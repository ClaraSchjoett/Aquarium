
Aquariumsteuerung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001844  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001a08  08001a08  00011a08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001a2c  08001a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000114  2000000c  08001a3c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000120  08001a3c  00020120  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011d8a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022f5  00000000  00000000  00031dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000652e  00000000  00000000  000340bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000898  00000000  00000000  0003a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b18  00000000  00000000  0003ae88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004cdf  00000000  00000000  0003b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a70  00000000  00000000  0004067f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000440ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001934  00000000  00000000  0004416c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080019f0 	.word	0x080019f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080019f0 	.word	0x080019f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f888 	bl	8000640 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f84a 	bl	80005d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f81b 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f001 f8ba 	bl	80016fc <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005c4:	0200      	lsls	r0, r0, #8
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	68dc      	ldr	r4, [r3, #12]
 80005de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	bf28      	it	cs
 80005ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 0501 	mov.w	r5, #1
 80005f4:	fa05 f303 	lsl.w	r3, r5, r3
 80005f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fc:	bf8c      	ite	hi
 80005fe:	3c03      	subhi	r4, #3
 8000600:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000602:	4019      	ands	r1, r3
 8000604:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000606:	fa05 f404 	lsl.w	r4, r5, r4
 800060a:	3c01      	subs	r4, #1
 800060c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800060e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	ea42 0201 	orr.w	r2, r2, r1
 8000614:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	bfaf      	iteee	ge
 800061a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	f000 000f 	andlt.w	r0, r0, #15
 8000622:	4b06      	ldrlt	r3, [pc, #24]	; (800063c <HAL_NVIC_SetPriority+0x64>)
 8000624:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	bfa5      	ittet	ge
 8000628:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800062c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	e000ed14 	.word	0xe000ed14

08000640 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	3801      	subs	r0, #1
 8000642:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000646:	d20a      	bcs.n	800065e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	21f0      	movs	r1, #240	; 0xf0
 8000650:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800065e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000670:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000672:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000674:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000818 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000678:	4a65      	ldr	r2, [pc, #404]	; (8000810 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800067a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800081c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000680:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000682:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000686:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000688:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000690:	45b6      	cmp	lr, r6
 8000692:	f040 80aa 	bne.w	80007ea <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000696:	684c      	ldr	r4, [r1, #4]
 8000698:	f024 0710 	bic.w	r7, r4, #16
 800069c:	2f02      	cmp	r7, #2
 800069e:	d116      	bne.n	80006ce <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006a0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006a4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006ac:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006b4:	f04f 0c0f 	mov.w	ip, #15
 80006b8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006bc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006c0:	690d      	ldr	r5, [r1, #16]
 80006c2:	fa05 f50b 	lsl.w	r5, r5, fp
 80006c6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006ca:	f8ca 5020 	str.w	r5, [sl, #32]
 80006ce:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006d4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d8:	fa05 f50a 	lsl.w	r5, r5, sl
 80006dc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006de:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ea:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ec:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006f2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f6:	d811      	bhi.n	800071c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006f8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006fa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006fe:	68cf      	ldr	r7, [r1, #12]
 8000700:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000704:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000708:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800070a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800070c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000710:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000714:	409f      	lsls	r7, r3
 8000716:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800071a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800071c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800071e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000720:	688f      	ldr	r7, [r1, #8]
 8000722:	fa07 f70a 	lsl.w	r7, r7, sl
 8000726:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000728:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800072a:	00e5      	lsls	r5, r4, #3
 800072c:	d55d      	bpl.n	80007ea <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	f04f 0b00 	mov.w	fp, #0
 8000732:	f8cd b00c 	str.w	fp, [sp, #12]
 8000736:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800073a:	4d36      	ldr	r5, [pc, #216]	; (8000814 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000740:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000744:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000748:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800074c:	9703      	str	r7, [sp, #12]
 800074e:	9f03      	ldr	r7, [sp, #12]
 8000750:	f023 0703 	bic.w	r7, r3, #3
 8000754:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000758:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800075c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000760:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000764:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000768:	f04f 0e0f 	mov.w	lr, #15
 800076c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000770:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000772:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000776:	d03f      	beq.n	80007f8 <HAL_GPIO_Init+0x18c>
 8000778:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077c:	42a8      	cmp	r0, r5
 800077e:	d03d      	beq.n	80007fc <HAL_GPIO_Init+0x190>
 8000780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000784:	42a8      	cmp	r0, r5
 8000786:	d03b      	beq.n	8000800 <HAL_GPIO_Init+0x194>
 8000788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078c:	42a8      	cmp	r0, r5
 800078e:	d039      	beq.n	8000804 <HAL_GPIO_Init+0x198>
 8000790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000794:	42a8      	cmp	r0, r5
 8000796:	d037      	beq.n	8000808 <HAL_GPIO_Init+0x19c>
 8000798:	4548      	cmp	r0, r9
 800079a:	d037      	beq.n	800080c <HAL_GPIO_Init+0x1a0>
 800079c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	bf14      	ite	ne
 80007a4:	2507      	movne	r5, #7
 80007a6:	2506      	moveq	r5, #6
 80007a8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007b0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007b2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ba:	bf0c      	ite	eq
 80007bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007be:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007c0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007c2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c8:	bf0c      	ite	eq
 80007ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007cc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007ce:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d6:	bf0c      	ite	eq
 80007d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007da:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007dc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007de:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e2:	bf54      	ite	pl
 80007e4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007e6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007e8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ea:	3301      	adds	r3, #1
 80007ec:	2b10      	cmp	r3, #16
 80007ee:	f47f af48 	bne.w	8000682 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f2:	b005      	add	sp, #20
 80007f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f8:	465d      	mov	r5, fp
 80007fa:	e7d5      	b.n	80007a8 <HAL_GPIO_Init+0x13c>
 80007fc:	2501      	movs	r5, #1
 80007fe:	e7d3      	b.n	80007a8 <HAL_GPIO_Init+0x13c>
 8000800:	2502      	movs	r5, #2
 8000802:	e7d1      	b.n	80007a8 <HAL_GPIO_Init+0x13c>
 8000804:	2503      	movs	r5, #3
 8000806:	e7cf      	b.n	80007a8 <HAL_GPIO_Init+0x13c>
 8000808:	2504      	movs	r5, #4
 800080a:	e7cd      	b.n	80007a8 <HAL_GPIO_Init+0x13c>
 800080c:	2505      	movs	r5, #5
 800080e:	e7cb      	b.n	80007a8 <HAL_GPIO_Init+0x13c>
 8000810:	40013c00 	.word	0x40013c00
 8000814:	40020000 	.word	0x40020000
 8000818:	40023800 	.word	0x40023800
 800081c:	40021400 	.word	0x40021400

08000820 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000820:	b10a      	cbz	r2, 8000826 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000822:	6181      	str	r1, [r0, #24]
 8000824:	4770      	bx	lr
 8000826:	0409      	lsls	r1, r1, #16
 8000828:	e7fb      	b.n	8000822 <HAL_GPIO_WritePin+0x2>
	...

0800082c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000830:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000832:	4604      	mov	r4, r0
 8000834:	b910      	cbnz	r0, 800083c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800083c:	4b44      	ldr	r3, [pc, #272]	; (8000950 <HAL_RCC_ClockConfig+0x124>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	f002 020f 	and.w	r2, r2, #15
 8000844:	428a      	cmp	r2, r1
 8000846:	d328      	bcc.n	800089a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000848:	6821      	ldr	r1, [r4, #0]
 800084a:	078f      	lsls	r7, r1, #30
 800084c:	d42d      	bmi.n	80008aa <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800084e:	07c8      	lsls	r0, r1, #31
 8000850:	d440      	bmi.n	80008d4 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000852:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <HAL_RCC_ClockConfig+0x124>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	f002 020f 	and.w	r2, r2, #15
 800085a:	4295      	cmp	r5, r2
 800085c:	d366      	bcc.n	800092c <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800085e:	6822      	ldr	r2, [r4, #0]
 8000860:	0751      	lsls	r1, r2, #29
 8000862:	d46c      	bmi.n	800093e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000864:	0713      	lsls	r3, r2, #28
 8000866:	d507      	bpl.n	8000878 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000868:	4a3a      	ldr	r2, [pc, #232]	; (8000954 <HAL_RCC_ClockConfig+0x128>)
 800086a:	6921      	ldr	r1, [r4, #16]
 800086c:	6893      	ldr	r3, [r2, #8]
 800086e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000872:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000876:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000878:	f000 f892 	bl	80009a0 <HAL_RCC_GetSysClockFreq>
 800087c:	4b35      	ldr	r3, [pc, #212]	; (8000954 <HAL_RCC_ClockConfig+0x128>)
 800087e:	4a36      	ldr	r2, [pc, #216]	; (8000958 <HAL_RCC_ClockConfig+0x12c>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	40d8      	lsrs	r0, r3
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <HAL_RCC_ClockConfig+0x130>)
 800088c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fe40 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000894:	2000      	movs	r0, #0
 8000896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800089a:	b2ca      	uxtb	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 030f 	and.w	r3, r3, #15
 80008a4:	4299      	cmp	r1, r3
 80008a6:	d1c6      	bne.n	8000836 <HAL_RCC_ClockConfig+0xa>
 80008a8:	e7ce      	b.n	8000848 <HAL_RCC_ClockConfig+0x1c>
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008b0:	bf1e      	ittt	ne
 80008b2:	689a      	ldrne	r2, [r3, #8]
 80008b4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80008b8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008ba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008bc:	bf42      	ittt	mi
 80008be:	689a      	ldrmi	r2, [r3, #8]
 80008c0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80008c4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	68a0      	ldr	r0, [r4, #8]
 80008ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008ce:	4302      	orrs	r2, r0
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	e7bc      	b.n	800084e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d4:	6862      	ldr	r2, [r4, #4]
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <HAL_RCC_ClockConfig+0x128>)
 80008d8:	2a01      	cmp	r2, #1
 80008da:	d11d      	bne.n	8000918 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e2:	d0a8      	beq.n	8000836 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e4:	4e1b      	ldr	r6, [pc, #108]	; (8000954 <HAL_RCC_ClockConfig+0x128>)
 80008e6:	68b3      	ldr	r3, [r6, #8]
 80008e8:	f023 0303 	bic.w	r3, r3, #3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80008f0:	f7ff fe5a 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80008f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80008fa:	68b3      	ldr	r3, [r6, #8]
 80008fc:	6862      	ldr	r2, [r4, #4]
 80008fe:	f003 030c 	and.w	r3, r3, #12
 8000902:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000906:	d0a4      	beq.n	8000852 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000908:	f7ff fe4e 	bl	80005a8 <HAL_GetTick>
 800090c:	1bc0      	subs	r0, r0, r7
 800090e:	4540      	cmp	r0, r8
 8000910:	d9f3      	bls.n	80008fa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
}
 8000914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000918:	1e91      	subs	r1, r2, #2
 800091a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800091c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800091e:	d802      	bhi.n	8000926 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000920:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000924:	e7dd      	b.n	80008e2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000926:	f013 0f02 	tst.w	r3, #2
 800092a:	e7da      	b.n	80008e2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800092c:	b2ea      	uxtb	r2, r5
 800092e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	429d      	cmp	r5, r3
 8000938:	f47f af7d 	bne.w	8000836 <HAL_RCC_ClockConfig+0xa>
 800093c:	e78f      	b.n	800085e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800093e:	4905      	ldr	r1, [pc, #20]	; (8000954 <HAL_RCC_ClockConfig+0x128>)
 8000940:	68e0      	ldr	r0, [r4, #12]
 8000942:	688b      	ldr	r3, [r1, #8]
 8000944:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000948:	4303      	orrs	r3, r0
 800094a:	608b      	str	r3, [r1, #8]
 800094c:	e78a      	b.n	8000864 <HAL_RCC_ClockConfig+0x38>
 800094e:	bf00      	nop
 8000950:	40023c00 	.word	0x40023c00
 8000954:	40023800 	.word	0x40023800
 8000958:	08001a08 	.word	0x08001a08
 800095c:	20000008 	.word	0x20000008

08000960 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800096e:	6810      	ldr	r0, [r2, #0]
}
 8000970:	40d8      	lsrs	r0, r3
 8000972:	4770      	bx	lr
 8000974:	40023800 	.word	0x40023800
 8000978:	08001a18 	.word	0x08001a18
 800097c:	20000008 	.word	0x20000008

08000980 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800098a:	5cd3      	ldrb	r3, [r2, r3]
 800098c:	4a03      	ldr	r2, [pc, #12]	; (800099c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800098e:	6810      	ldr	r0, [r2, #0]
}
 8000990:	40d8      	lsrs	r0, r3
 8000992:	4770      	bx	lr
 8000994:	40023800 	.word	0x40023800
 8000998:	08001a18 	.word	0x08001a18
 800099c:	20000008 	.word	0x20000008

080009a0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009a0:	4920      	ldr	r1, [pc, #128]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80009a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009a4:	688b      	ldr	r3, [r1, #8]
 80009a6:	f003 030c 	and.w	r3, r3, #12
 80009aa:	2b08      	cmp	r3, #8
 80009ac:	d007      	beq.n	80009be <HAL_RCC_GetSysClockFreq+0x1e>
 80009ae:	2b0c      	cmp	r3, #12
 80009b0:	d020      	beq.n	80009f4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80009b2:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x88>)
 80009b4:	481d      	ldr	r0, [pc, #116]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x8c>)
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf18      	it	ne
 80009ba:	4610      	movne	r0, r2
 80009bc:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009be:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009c0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009c2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009c4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009c8:	bf14      	ite	ne
 80009ca:	4818      	ldrne	r0, [pc, #96]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009cc:	4816      	ldreq	r0, [pc, #88]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009ce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80009d2:	bf18      	it	ne
 80009d4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009da:	fba1 0100 	umull	r0, r1, r1, r0
 80009de:	f7ff fc11 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x84>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80009ea:	3301      	adds	r3, #1
 80009ec:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80009ee:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009f2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009f4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009f6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009f8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009fa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009fe:	bf14      	ite	ne
 8000a00:	480a      	ldrne	r0, [pc, #40]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a02:	4809      	ldreq	r0, [pc, #36]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a04:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000a08:	bf18      	it	ne
 8000a0a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a0c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a10:	fba1 0100 	umull	r0, r1, r1, r0
 8000a14:	f7ff fbf6 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000a20:	e7e5      	b.n	80009ee <HAL_RCC_GetSysClockFreq+0x4e>
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	00f42400 	.word	0x00f42400
 8000a2c:	007a1200 	.word	0x007a1200

08000a30 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a30:	6803      	ldr	r3, [r0, #0]
{
 8000a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a36:	07df      	lsls	r7, r3, #31
{
 8000a38:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a3a:	d410      	bmi.n	8000a5e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	079e      	lsls	r6, r3, #30
 8000a40:	d467      	bmi.n	8000b12 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	071a      	lsls	r2, r3, #28
 8000a46:	f100 80b2 	bmi.w	8000bae <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	075b      	lsls	r3, r3, #29
 8000a4e:	f100 80d0 	bmi.w	8000bf2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a52:	69a2      	ldr	r2, [r4, #24]
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	f040 8139 	bne.w	8000ccc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	e01e      	b.n	8000a9c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a5e:	4b97      	ldr	r3, [pc, #604]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	f002 020c 	and.w	r2, r2, #12
 8000a66:	2a04      	cmp	r2, #4
 8000a68:	d010      	beq.n	8000a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a70:	2a08      	cmp	r2, #8
 8000a72:	d102      	bne.n	8000a7a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	025d      	lsls	r5, r3, #9
 8000a78:	d408      	bmi.n	8000a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a7a:	4b90      	ldr	r3, [pc, #576]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a82:	2a0c      	cmp	r2, #12
 8000a84:	d10d      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	0250      	lsls	r0, r2, #9
 8000a8a:	d50a      	bpl.n	8000aa2 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a8c:	4b8b      	ldr	r3, [pc, #556]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	0399      	lsls	r1, r3, #14
 8000a92:	d5d3      	bpl.n	8000a3c <HAL_RCC_OscConfig+0xc>
 8000a94:	6863      	ldr	r3, [r4, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1d0      	bne.n	8000a3c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
}
 8000a9c:	b002      	add	sp, #8
 8000a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa2:	6862      	ldr	r2, [r4, #4]
 8000aa4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000aa8:	d111      	bne.n	8000ace <HAL_RCC_OscConfig+0x9e>
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ab0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ab2:	f7ff fd79 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab6:	4d81      	ldr	r5, [pc, #516]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000ab8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aba:	682b      	ldr	r3, [r5, #0]
 8000abc:	039a      	lsls	r2, r3, #14
 8000abe:	d4bd      	bmi.n	8000a3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac0:	f7ff fd72 	bl	80005a8 <HAL_GetTick>
 8000ac4:	1b80      	subs	r0, r0, r6
 8000ac6:	2864      	cmp	r0, #100	; 0x64
 8000ac8:	d9f7      	bls.n	8000aba <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000aca:	2003      	movs	r0, #3
 8000acc:	e7e6      	b.n	8000a9c <HAL_RCC_OscConfig+0x6c>
 8000ace:	4d7b      	ldr	r5, [pc, #492]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	d107      	bne.n	8000ae8 <HAL_RCC_OscConfig+0xb8>
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000adc:	602b      	str	r3, [r5, #0]
 8000ade:	682b      	ldr	r3, [r5, #0]
 8000ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae4:	602b      	str	r3, [r5, #0]
 8000ae6:	e7e4      	b.n	8000ab2 <HAL_RCC_OscConfig+0x82>
 8000ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aec:	602b      	str	r3, [r5, #0]
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000af6:	2a00      	cmp	r2, #0
 8000af8:	d1db      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000afa:	f7ff fd55 	bl	80005a8 <HAL_GetTick>
 8000afe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	039b      	lsls	r3, r3, #14
 8000b04:	d59a      	bpl.n	8000a3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b06:	f7ff fd4f 	bl	80005a8 <HAL_GetTick>
 8000b0a:	1b80      	subs	r0, r0, r6
 8000b0c:	2864      	cmp	r0, #100	; 0x64
 8000b0e:	d9f7      	bls.n	8000b00 <HAL_RCC_OscConfig+0xd0>
 8000b10:	e7db      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000b12:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	f012 0f0c 	tst.w	r2, #12
 8000b1a:	d010      	beq.n	8000b3e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000b22:	2a08      	cmp	r2, #8
 8000b24:	d102      	bne.n	8000b2c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	025f      	lsls	r7, r3, #9
 8000b2a:	d508      	bpl.n	8000b3e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b2c:	4a63      	ldr	r2, [pc, #396]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000b2e:	6893      	ldr	r3, [r2, #8]
 8000b30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b34:	2b0c      	cmp	r3, #12
 8000b36:	d111      	bne.n	8000b5c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b38:	6853      	ldr	r3, [r2, #4]
 8000b3a:	025e      	lsls	r6, r3, #9
 8000b3c:	d40e      	bmi.n	8000b5c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b3e:	4b5f      	ldr	r3, [pc, #380]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	0795      	lsls	r5, r2, #30
 8000b44:	d502      	bpl.n	8000b4c <HAL_RCC_OscConfig+0x11c>
 8000b46:	68e2      	ldr	r2, [r4, #12]
 8000b48:	2a01      	cmp	r2, #1
 8000b4a:	d1a6      	bne.n	8000a9a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	6921      	ldr	r1, [r4, #16]
 8000b50:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b54:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b58:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b5a:	e772      	b.n	8000a42 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b5c:	68e2      	ldr	r2, [r4, #12]
 8000b5e:	4b58      	ldr	r3, [pc, #352]	; (8000cc0 <HAL_RCC_OscConfig+0x290>)
 8000b60:	b1b2      	cbz	r2, 8000b90 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b66:	f7ff fd1f 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b6a:	4d54      	ldr	r5, [pc, #336]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000b6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	0798      	lsls	r0, r3, #30
 8000b72:	d507      	bpl.n	8000b84 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	6922      	ldr	r2, [r4, #16]
 8000b78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	e75e      	b.n	8000a42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b84:	f7ff fd10 	bl	80005a8 <HAL_GetTick>
 8000b88:	1b80      	subs	r0, r0, r6
 8000b8a:	2802      	cmp	r0, #2
 8000b8c:	d9ef      	bls.n	8000b6e <HAL_RCC_OscConfig+0x13e>
 8000b8e:	e79c      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000b90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b92:	f7ff fd09 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b96:	4d49      	ldr	r5, [pc, #292]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000b98:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	0799      	lsls	r1, r3, #30
 8000b9e:	f57f af50 	bpl.w	8000a42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fd01 	bl	80005a8 <HAL_GetTick>
 8000ba6:	1b80      	subs	r0, r0, r6
 8000ba8:	2802      	cmp	r0, #2
 8000baa:	d9f6      	bls.n	8000b9a <HAL_RCC_OscConfig+0x16a>
 8000bac:	e78d      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000bae:	6962      	ldr	r2, [r4, #20]
 8000bb0:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <HAL_RCC_OscConfig+0x294>)
 8000bb2:	b17a      	cbz	r2, 8000bd4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bb8:	f7ff fcf6 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bbc:	4d3f      	ldr	r5, [pc, #252]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000bbe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bc0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bc2:	079f      	lsls	r7, r3, #30
 8000bc4:	f53f af41 	bmi.w	8000a4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc8:	f7ff fcee 	bl	80005a8 <HAL_GetTick>
 8000bcc:	1b80      	subs	r0, r0, r6
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f6      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x190>
 8000bd2:	e77a      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000bd4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bd6:	f7ff fce7 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bda:	4d38      	ldr	r5, [pc, #224]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000bdc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000be0:	0798      	lsls	r0, r3, #30
 8000be2:	f57f af32 	bpl.w	8000a4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000be6:	f7ff fcdf 	bl	80005a8 <HAL_GetTick>
 8000bea:	1b80      	subs	r0, r0, r6
 8000bec:	2802      	cmp	r0, #2
 8000bee:	d9f6      	bls.n	8000bde <HAL_RCC_OscConfig+0x1ae>
 8000bf0:	e76b      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf2:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000bfa:	d128      	bne.n	8000c4e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfc:	9201      	str	r2, [sp, #4]
 8000bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c10:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c12:	4d2d      	ldr	r5, [pc, #180]	; (8000cc8 <HAL_RCC_OscConfig+0x298>)
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	05d9      	lsls	r1, r3, #23
 8000c18:	d51b      	bpl.n	8000c52 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c1a:	68a3      	ldr	r3, [r4, #8]
 8000c1c:	4d27      	ldr	r5, [pc, #156]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d127      	bne.n	8000c72 <HAL_RCC_OscConfig+0x242>
 8000c22:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c2a:	f7ff fcbd 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c2e:	4d23      	ldr	r5, [pc, #140]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000c30:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c32:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c38:	079b      	lsls	r3, r3, #30
 8000c3a:	d539      	bpl.n	8000cb0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	f43f af08 	beq.w	8000a52 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c42:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_RCC_OscConfig+0x28c>)
 8000c44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	e701      	b.n	8000a52 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000c4e:	2600      	movs	r6, #0
 8000c50:	e7df      	b.n	8000c12 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c52:	682b      	ldr	r3, [r5, #0]
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c5a:	f7ff fca5 	bl	80005a8 <HAL_GetTick>
 8000c5e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	05da      	lsls	r2, r3, #23
 8000c64:	d4d9      	bmi.n	8000c1a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c66:	f7ff fc9f 	bl	80005a8 <HAL_GetTick>
 8000c6a:	1bc0      	subs	r0, r0, r7
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	d9f7      	bls.n	8000c60 <HAL_RCC_OscConfig+0x230>
 8000c70:	e72b      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d104      	bne.n	8000c80 <HAL_RCC_OscConfig+0x250>
 8000c76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	672b      	str	r3, [r5, #112]	; 0x70
 8000c7e:	e7d0      	b.n	8000c22 <HAL_RCC_OscConfig+0x1f2>
 8000c80:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c82:	f022 0201 	bic.w	r2, r2, #1
 8000c86:	672a      	str	r2, [r5, #112]	; 0x70
 8000c88:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c8a:	f022 0204 	bic.w	r2, r2, #4
 8000c8e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1ca      	bne.n	8000c2a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000c94:	f7ff fc88 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c98:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c9c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ca0:	0798      	lsls	r0, r3, #30
 8000ca2:	d5cb      	bpl.n	8000c3c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fc80 	bl	80005a8 <HAL_GetTick>
 8000ca8:	1bc0      	subs	r0, r0, r7
 8000caa:	4540      	cmp	r0, r8
 8000cac:	d9f7      	bls.n	8000c9e <HAL_RCC_OscConfig+0x26e>
 8000cae:	e70c      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fc7a 	bl	80005a8 <HAL_GetTick>
 8000cb4:	1bc0      	subs	r0, r0, r7
 8000cb6:	4540      	cmp	r0, r8
 8000cb8:	d9bd      	bls.n	8000c36 <HAL_RCC_OscConfig+0x206>
 8000cba:	e706      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	42470000 	.word	0x42470000
 8000cc4:	42470e80 	.word	0x42470e80
 8000cc8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ccc:	4d23      	ldr	r5, [pc, #140]	; (8000d5c <HAL_RCC_OscConfig+0x32c>)
 8000cce:	68ab      	ldr	r3, [r5, #8]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	f43f aee0 	beq.w	8000a9a <HAL_RCC_OscConfig+0x6a>
 8000cda:	4e21      	ldr	r6, [pc, #132]	; (8000d60 <HAL_RCC_OscConfig+0x330>)
 8000cdc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cde:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ce0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ce2:	d12d      	bne.n	8000d40 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fc60 	bl	80005a8 <HAL_GetTick>
 8000ce8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cea:	682b      	ldr	r3, [r5, #0]
 8000cec:	0199      	lsls	r1, r3, #6
 8000cee:	d421      	bmi.n	8000d34 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cf0:	6a22      	ldr	r2, [r4, #32]
 8000cf2:	69e3      	ldr	r3, [r4, #28]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cf8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000cfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d04:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d0a:	4c14      	ldr	r4, [pc, #80]	; (8000d5c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d0c:	0852      	lsrs	r2, r2, #1
 8000d0e:	3a01      	subs	r2, #1
 8000d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d14:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d16:	2301      	movs	r3, #1
 8000d18:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fc45 	bl	80005a8 <HAL_GetTick>
 8000d1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	019a      	lsls	r2, r3, #6
 8000d24:	f53f ae99 	bmi.w	8000a5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d28:	f7ff fc3e 	bl	80005a8 <HAL_GetTick>
 8000d2c:	1b40      	subs	r0, r0, r5
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9f6      	bls.n	8000d20 <HAL_RCC_OscConfig+0x2f0>
 8000d32:	e6ca      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d34:	f7ff fc38 	bl	80005a8 <HAL_GetTick>
 8000d38:	1bc0      	subs	r0, r0, r7
 8000d3a:	2802      	cmp	r0, #2
 8000d3c:	d9d5      	bls.n	8000cea <HAL_RCC_OscConfig+0x2ba>
 8000d3e:	e6c4      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc32 	bl	80005a8 <HAL_GetTick>
 8000d44:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d46:	682b      	ldr	r3, [r5, #0]
 8000d48:	019b      	lsls	r3, r3, #6
 8000d4a:	f57f ae86 	bpl.w	8000a5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d4e:	f7ff fc2b 	bl	80005a8 <HAL_GetTick>
 8000d52:	1b00      	subs	r0, r0, r4
 8000d54:	2802      	cmp	r0, #2
 8000d56:	d9f6      	bls.n	8000d46 <HAL_RCC_OscConfig+0x316>
 8000d58:	e6b7      	b.n	8000aca <HAL_RCC_OscConfig+0x9a>
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	42470060 	.word	0x42470060

08000d64 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d64:	6a03      	ldr	r3, [r0, #32]
 8000d66:	f023 0301 	bic.w	r3, r3, #1
 8000d6a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d6c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000d6e:	6842      	ldr	r2, [r0, #4]
{
 8000d70:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d72:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000d76:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d7a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000d7c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000d7e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000d82:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000d84:	4c0c      	ldr	r4, [pc, #48]	; (8000db8 <TIM_OC1_SetConfig+0x54>)
 8000d86:	42a0      	cmp	r0, r4
 8000d88:	d009      	beq.n	8000d9e <TIM_OC1_SetConfig+0x3a>
 8000d8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d8e:	42a0      	cmp	r0, r4
 8000d90:	d005      	beq.n	8000d9e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d92:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000d94:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000d96:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000d98:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000d9a:	6203      	str	r3, [r0, #32]
} 
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000d9e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000da0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000da2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000da6:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000da8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000daa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dae:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000db0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000db4:	4322      	orrs	r2, r4
 8000db6:	e7ec      	b.n	8000d92 <TIM_OC1_SetConfig+0x2e>
 8000db8:	40010000 	.word	0x40010000

08000dbc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000dbc:	6a03      	ldr	r3, [r0, #32]
 8000dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dc4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000dc6:	6842      	ldr	r2, [r0, #4]
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000dca:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000dcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000dce:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000dd2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dd4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000dd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dda:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000dde:	4c0e      	ldr	r4, [pc, #56]	; (8000e18 <TIM_OC3_SetConfig+0x5c>)
 8000de0:	42a0      	cmp	r0, r4
 8000de2:	d009      	beq.n	8000df8 <TIM_OC3_SetConfig+0x3c>
 8000de4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000de8:	42a0      	cmp	r0, r4
 8000dea:	d005      	beq.n	8000df8 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dec:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000dee:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000df0:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000df2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000df4:	6203      	str	r3, [r0, #32]
}
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000df8:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000dfa:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e00:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e04:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e06:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e0a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e10:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000e14:	e7ea      	b.n	8000dec <TIM_OC3_SetConfig+0x30>
 8000e16:	bf00      	nop
 8000e18:	40010000 	.word	0x40010000

08000e1c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e1c:	6a03      	ldr	r3, [r0, #32]
 8000e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e22:	6203      	str	r3, [r0, #32]
{
 8000e24:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e26:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e28:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e2a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e38:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e3c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e40:	4d09      	ldr	r5, [pc, #36]	; (8000e68 <TIM_OC4_SetConfig+0x4c>)
 8000e42:	42a8      	cmp	r0, r5
 8000e44:	d009      	beq.n	8000e5a <TIM_OC4_SetConfig+0x3e>
 8000e46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e4a:	42a8      	cmp	r0, r5
 8000e4c:	d005      	beq.n	8000e5a <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e4e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e50:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000e52:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000e54:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e56:	6204      	str	r4, [r0, #32]
}
 8000e58:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e5a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e60:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000e64:	e7f3      	b.n	8000e4e <TIM_OC4_SetConfig+0x32>
 8000e66:	bf00      	nop
 8000e68:	40010000 	.word	0x40010000

08000e6c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e6c:	4a2e      	ldr	r2, [pc, #184]	; (8000f28 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000e6e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d012      	beq.n	8000e9a <TIM_Base_SetConfig+0x2e>
 8000e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e78:	d00f      	beq.n	8000e9a <TIM_Base_SetConfig+0x2e>
 8000e7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d00b      	beq.n	8000e9a <TIM_Base_SetConfig+0x2e>
 8000e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d007      	beq.n	8000e9a <TIM_Base_SetConfig+0x2e>
 8000e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e8e:	4290      	cmp	r0, r2
 8000e90:	d003      	beq.n	8000e9a <TIM_Base_SetConfig+0x2e>
 8000e92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d11d      	bne.n	8000ed6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000e9a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ea0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <TIM_Base_SetConfig+0xbc>)
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d104      	bne.n	8000eb2 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ea8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	e028      	b.n	8000f04 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000eb2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eb6:	d0f7      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <TIM_Base_SetConfig+0xc0>)
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d0f4      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d0f0      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d0ec      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000ece:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d0e8      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <TIM_Base_SetConfig+0xc4>)
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	d0e5      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000edc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d0e1      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee8:	4290      	cmp	r0, r2
 8000eea:	d0dd      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000eec:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	d0d9      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000ef4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ef8:	4290      	cmp	r0, r2
 8000efa:	d0d5      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
 8000efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f00:	4290      	cmp	r0, r2
 8000f02:	d0d1      	beq.n	8000ea8 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000f04:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f06:	688b      	ldr	r3, [r1, #8]
 8000f08:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f0a:	680b      	ldr	r3, [r1, #0]
 8000f0c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <TIM_Base_SetConfig+0xbc>)
 8000f10:	4298      	cmp	r0, r3
 8000f12:	d006      	beq.n	8000f22 <TIM_Base_SetConfig+0xb6>
 8000f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	d002      	beq.n	8000f22 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	6143      	str	r3, [r0, #20]
}
 8000f20:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f22:	690b      	ldr	r3, [r1, #16]
 8000f24:	6303      	str	r3, [r0, #48]	; 0x30
 8000f26:	e7f9      	b.n	8000f1c <TIM_Base_SetConfig+0xb0>
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	40014000 	.word	0x40014000

08000f34 <HAL_TIM_PWM_Init>:
{
 8000f34:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f36:	4604      	mov	r4, r0
 8000f38:	b1a0      	cbz	r0, 8000f64 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f42:	b91b      	cbnz	r3, 8000f4c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f44:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000f48:	f000 fbf8 	bl	800173c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	1d21      	adds	r1, r4, #4
 8000f56:	f7ff ff89 	bl	8000e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000f60:	2000      	movs	r0, #0
 8000f62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f64:	2001      	movs	r0, #1
}  
 8000f66:	bd10      	pop	{r4, pc}

08000f68 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f68:	6a03      	ldr	r3, [r0, #32]
 8000f6a:	f023 0310 	bic.w	r3, r3, #16
 8000f6e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000f70:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8000f72:	6842      	ldr	r2, [r0, #4]
{
 8000f74:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8000f76:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000f7a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f7e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000f82:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000f84:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000f88:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000f8c:	4c0d      	ldr	r4, [pc, #52]	; (8000fc4 <TIM_OC2_SetConfig+0x5c>)
 8000f8e:	42a0      	cmp	r0, r4
 8000f90:	d009      	beq.n	8000fa6 <TIM_OC2_SetConfig+0x3e>
 8000f92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000f96:	42a0      	cmp	r0, r4
 8000f98:	d005      	beq.n	8000fa6 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8000f9a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8000f9c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000f9e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000fa0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000fa2:	6203      	str	r3, [r0, #32]
}
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000fa6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000fa8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000fae:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000fb2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000fb4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000fb8:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000fbe:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8000fc2:	e7ea      	b.n	8000f9a <TIM_OC2_SetConfig+0x32>
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <HAL_TIM_PWM_ConfigChannel>:
{
 8000fc8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000fca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fce:	2b01      	cmp	r3, #1
{
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000fd6:	d025      	beq.n	8001024 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8000fde:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8000fe2:	2a0c      	cmp	r2, #12
 8000fe4:	d818      	bhi.n	8001018 <HAL_TIM_PWM_ConfigChannel+0x50>
 8000fe6:	e8df f002 	tbb	[pc, r2]
 8000fea:	1707      	.short	0x1707
 8000fec:	171e1717 	.word	0x171e1717
 8000ff0:	172f1717 	.word	0x172f1717
 8000ff4:	1717      	.short	0x1717
 8000ff6:	40          	.byte	0x40
 8000ff7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	f7ff feb3 	bl	8000d64 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000ffe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001000:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001002:	699a      	ldr	r2, [r3, #24]
 8001004:	f042 0208 	orr.w	r2, r2, #8
 8001008:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	f022 0204 	bic.w	r2, r2, #4
 8001010:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001016:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001018:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800101a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800101c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001020:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001024:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	f7ff ff9e 	bl	8000f68 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800102c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800102e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001038:	699a      	ldr	r2, [r3, #24]
 800103a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800103e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001040:	699a      	ldr	r2, [r3, #24]
 8001042:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001046:	e7e6      	b.n	8001016 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001048:	6820      	ldr	r0, [r4, #0]
 800104a:	f7ff feb7 	bl	8000dbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800104e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001050:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001052:	69da      	ldr	r2, [r3, #28]
 8001054:	f042 0208 	orr.w	r2, r2, #8
 8001058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	f022 0204 	bic.w	r2, r2, #4
 8001060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001062:	69da      	ldr	r2, [r3, #28]
 8001064:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001066:	61da      	str	r2, [r3, #28]
    break;
 8001068:	e7d6      	b.n	8001018 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800106a:	6820      	ldr	r0, [r4, #0]
 800106c:	f7ff fed6 	bl	8000e1c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001070:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001072:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800107a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800107c:	69da      	ldr	r2, [r3, #28]
 800107e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001082:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001084:	69da      	ldr	r2, [r3, #28]
 8001086:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800108a:	e7ec      	b.n	8001066 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800108c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800108c:	6a03      	ldr	r3, [r0, #32]
{
 800108e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001090:	2401      	movs	r4, #1
 8001092:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001094:	ea23 0304 	bic.w	r3, r3, r4
 8001098:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800109a:	6a03      	ldr	r3, [r0, #32]
 800109c:	408a      	lsls	r2, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	6202      	str	r2, [r0, #32]
 80010a2:	bd10      	pop	{r4, pc}

080010a4 <HAL_TIM_PWM_Start>:
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80010a8:	2201      	movs	r2, #1
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	f7ff ffee 	bl	800108c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_TIM_PWM_Start+0x30>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d003      	beq.n	80010c0 <HAL_TIM_PWM_Start+0x1c>
 80010b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010bc:	4293      	cmp	r3, r2
 80010be:	d103      	bne.n	80010c8 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80010c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
} 
 80010d0:	2000      	movs	r0, #0
 80010d2:	bd10      	pop	{r4, pc}
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80010d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010dc:	2b01      	cmp	r3, #1
{
 80010de:	b510      	push	{r4, lr}
 80010e0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80010e4:	d018      	beq.n	8001118 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80010e6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80010ea:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80010ec:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80010ee:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80010f0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80010f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010f6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4322      	orrs	r2, r4
 80010fc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001104:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	430a      	orrs	r2, r1
 800110a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800110c:	2301      	movs	r3, #1
 800110e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001112:	2300      	movs	r3, #0
 8001114:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001118:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800111a:	bd10      	pop	{r4, pc}

0800111c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800111c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001120:	2b01      	cmp	r3, #1
 8001122:	d01f      	beq.n	8001164 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001124:	68cb      	ldr	r3, [r1, #12]
 8001126:	688a      	ldr	r2, [r1, #8]
 8001128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800112c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800112e:	684a      	ldr	r2, [r1, #4]
 8001130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001134:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001136:	680a      	ldr	r2, [r1, #0]
 8001138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800113c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800113e:	690a      	ldr	r2, [r1, #16]
 8001140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001144:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001146:	694a      	ldr	r2, [r1, #20]
 8001148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800114c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800114e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001154:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001156:	6802      	ldr	r2, [r0, #0]
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800115a:	2300      	movs	r3, #0
 800115c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001160:	4618      	mov	r0, r3
 8001162:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001164:	2002      	movs	r0, #2
}
 8001166:	4770      	bx	lr

08001168 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800116c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800116e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001170:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001172:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001178:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800117a:	6133      	str	r3, [r6, #16]
{
 800117c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800117e:	6883      	ldr	r3, [r0, #8]
 8001180:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001182:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001184:	4303      	orrs	r3, r0
 8001186:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001188:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800118c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800118e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001192:	430b      	orrs	r3, r1
 8001194:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001196:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001198:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800119a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800119c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80011a0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011a2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80011a6:	6173      	str	r3, [r6, #20]
 80011a8:	4b7a      	ldr	r3, [pc, #488]	; (8001394 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011aa:	d17c      	bne.n	80012a6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80011ac:	429e      	cmp	r6, r3
 80011ae:	d003      	beq.n	80011b8 <UART_SetConfig+0x50>
 80011b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011b4:	429e      	cmp	r6, r3
 80011b6:	d144      	bne.n	8001242 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011b8:	f7ff fbe2 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 80011bc:	2519      	movs	r5, #25
 80011be:	fb05 f300 	mul.w	r3, r5, r0
 80011c2:	6860      	ldr	r0, [r4, #4]
 80011c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011c8:	0040      	lsls	r0, r0, #1
 80011ca:	fbb3 f3f0 	udiv	r3, r3, r0
 80011ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80011d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80011d6:	f7ff fbd3 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	4368      	muls	r0, r5
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fbb0 f7f3 	udiv	r7, r0, r3
 80011e4:	f7ff fbcc 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	4368      	muls	r0, r5
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80011f6:	fb09 7313 	mls	r3, r9, r3, r7
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	3332      	adds	r3, #50	; 0x32
 80011fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001208:	f7ff fbba 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 800120c:	6862      	ldr	r2, [r4, #4]
 800120e:	4368      	muls	r0, r5
 8001210:	0052      	lsls	r2, r2, #1
 8001212:	fbb0 faf2 	udiv	sl, r0, r2
 8001216:	f7ff fbb3 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800121a:	6863      	ldr	r3, [r4, #4]
 800121c:	4368      	muls	r0, r5
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fbb0 f3f3 	udiv	r3, r0, r3
 8001224:	fbb3 f3f9 	udiv	r3, r3, r9
 8001228:	fb09 a313 	mls	r3, r9, r3, sl
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	3332      	adds	r3, #50	; 0x32
 8001230:	fbb3 f3f9 	udiv	r3, r3, r9
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800123a:	443b      	add	r3, r7
 800123c:	60b3      	str	r3, [r6, #8]
 800123e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001242:	f7ff fb8d 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001246:	2519      	movs	r5, #25
 8001248:	fb05 f300 	mul.w	r3, r5, r0
 800124c:	6860      	ldr	r0, [r4, #4]
 800124e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001252:	0040      	lsls	r0, r0, #1
 8001254:	fbb3 f3f0 	udiv	r3, r3, r0
 8001258:	fbb3 f3f9 	udiv	r3, r3, r9
 800125c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001260:	f7ff fb7e 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001264:	6863      	ldr	r3, [r4, #4]
 8001266:	4368      	muls	r0, r5
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fbb0 f7f3 	udiv	r7, r0, r3
 800126e:	f7ff fb77 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001272:	6863      	ldr	r3, [r4, #4]
 8001274:	4368      	muls	r0, r5
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fbb0 f3f3 	udiv	r3, r0, r3
 800127c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001280:	fb09 7313 	mls	r3, r9, r3, r7
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	3332      	adds	r3, #50	; 0x32
 8001288:	fbb3 f3f9 	udiv	r3, r3, r9
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001292:	f7ff fb65 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001296:	6862      	ldr	r2, [r4, #4]
 8001298:	4368      	muls	r0, r5
 800129a:	0052      	lsls	r2, r2, #1
 800129c:	fbb0 faf2 	udiv	sl, r0, r2
 80012a0:	f7ff fb5e 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 80012a4:	e7b9      	b.n	800121a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80012a6:	429e      	cmp	r6, r3
 80012a8:	d002      	beq.n	80012b0 <UART_SetConfig+0x148>
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <UART_SetConfig+0x230>)
 80012ac:	429e      	cmp	r6, r3
 80012ae:	d140      	bne.n	8001332 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012b0:	f7ff fb66 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 80012b4:	6867      	ldr	r7, [r4, #4]
 80012b6:	2519      	movs	r5, #25
 80012b8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012bc:	fb05 f300 	mul.w	r3, r5, r0
 80012c0:	00bf      	lsls	r7, r7, #2
 80012c2:	fbb3 f3f7 	udiv	r3, r3, r7
 80012c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80012ca:	011f      	lsls	r7, r3, #4
 80012cc:	f7ff fb58 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 80012d0:	6863      	ldr	r3, [r4, #4]
 80012d2:	4368      	muls	r0, r5
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	fbb0 f8f3 	udiv	r8, r0, r3
 80012da:	f7ff fb51 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 80012de:	6863      	ldr	r3, [r4, #4]
 80012e0:	4368      	muls	r0, r5
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80012ec:	fb09 8313 	mls	r3, r9, r3, r8
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	3332      	adds	r3, #50	; 0x32
 80012f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80012f8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80012fc:	f7ff fb40 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
 8001300:	6862      	ldr	r2, [r4, #4]
 8001302:	4368      	muls	r0, r5
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	fbb0 faf2 	udiv	sl, r0, r2
 800130a:	f7ff fb39 	bl	8000980 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800130e:	6863      	ldr	r3, [r4, #4]
 8001310:	4368      	muls	r0, r5
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fbb0 f3f3 	udiv	r3, r0, r3
 8001318:	fbb3 f3f9 	udiv	r3, r3, r9
 800131c:	fb09 a313 	mls	r3, r9, r3, sl
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	3332      	adds	r3, #50	; 0x32
 8001324:	fbb3 f3f9 	udiv	r3, r3, r9
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	ea43 0308 	orr.w	r3, r3, r8
 8001330:	e783      	b.n	800123a <UART_SetConfig+0xd2>
 8001332:	f7ff fb15 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001336:	6867      	ldr	r7, [r4, #4]
 8001338:	2519      	movs	r5, #25
 800133a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800133e:	fb05 f300 	mul.w	r3, r5, r0
 8001342:	00bf      	lsls	r7, r7, #2
 8001344:	fbb3 f3f7 	udiv	r3, r3, r7
 8001348:	fbb3 f3f9 	udiv	r3, r3, r9
 800134c:	011f      	lsls	r7, r3, #4
 800134e:	f7ff fb07 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	4368      	muls	r0, r5
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	fbb0 f8f3 	udiv	r8, r0, r3
 800135c:	f7ff fb00 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	4368      	muls	r0, r5
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	fbb0 f3f3 	udiv	r3, r0, r3
 800136a:	fbb3 f3f9 	udiv	r3, r3, r9
 800136e:	fb09 8313 	mls	r3, r9, r3, r8
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	3332      	adds	r3, #50	; 0x32
 8001376:	fbb3 f3f9 	udiv	r3, r3, r9
 800137a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800137e:	f7ff faef 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001382:	6862      	ldr	r2, [r4, #4]
 8001384:	4368      	muls	r0, r5
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	fbb0 faf2 	udiv	sl, r0, r2
 800138c:	f7ff fae8 	bl	8000960 <HAL_RCC_GetPCLK1Freq>
 8001390:	e7bd      	b.n	800130e <UART_SetConfig+0x1a6>
 8001392:	bf00      	nop
 8001394:	40011000 	.word	0x40011000
 8001398:	40011400 	.word	0x40011400

0800139c <HAL_UART_Init>:
{
 800139c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800139e:	4604      	mov	r4, r0
 80013a0:	b340      	cbz	r0, 80013f4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80013a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013aa:	b91b      	cbnz	r3, 80013b4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013ac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80013b0:	f000 fa60 	bl	8001874 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80013b4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013b6:	2324      	movs	r3, #36	; 0x24
 80013b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80013bc:	68d3      	ldr	r3, [r2, #12]
 80013be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013c2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fecf 	bl	8001168 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013da:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013e2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013e4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80013e6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013e8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80013ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80013ee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80013f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
}
 80013f6:	bd10      	pop	{r4, pc}

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b510      	push	{r4, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fc:	2234      	movs	r2, #52	; 0x34
 80013fe:	2100      	movs	r1, #0
 8001400:	a807      	add	r0, sp, #28
 8001402:	f000 faed 	bl	80019e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001406:	2214      	movs	r2, #20
 8001408:	2100      	movs	r1, #0
 800140a:	a802      	add	r0, sp, #8
 800140c:	f000 fae8 	bl	80019e0 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2200      	movs	r2, #0
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <SystemClock_Config+0x94>)
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001418:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800141c:	6419      	str	r1, [r3, #64]	; 0x40
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001420:	491b      	ldr	r1, [pc, #108]	; (8001490 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	680b      	ldr	r3, [r1, #0]
 800142e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143a:	920e      	str	r2, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800143c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001444:	2301      	movs	r3, #1
 8001446:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001448:	2310      	movs	r3, #16
 800144a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800144c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800144e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001452:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001454:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001458:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800145a:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800145e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001460:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001462:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f7ff fae4 	bl	8000a30 <HAL_RCC_OscConfig>
 8001468:	b100      	cbz	r0, 800146c <SystemClock_Config+0x74>
 800146a:	e7fe      	b.n	800146a <SystemClock_Config+0x72>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	4621      	mov	r1, r4
 800147a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800147e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001480:	f7ff f9d4 	bl	800082c <HAL_RCC_ClockConfig>
 8001484:	b100      	cbz	r0, 8001488 <SystemClock_Config+0x90>
 8001486:	e7fe      	b.n	8001486 <SystemClock_Config+0x8e>
  {
    Error_Handler();
  }
}
 8001488:	b014      	add	sp, #80	; 0x50
 800148a:	bd10      	pop	{r4, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <main>:
{
 8001494:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001498:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 800149a:	f7ff f85f 	bl	800055c <HAL_Init>
  SystemClock_Config();
 800149e:	f7ff ffab 	bl	80013f8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	2214      	movs	r2, #20
 80014a4:	2100      	movs	r1, #0
 80014a6:	a80d      	add	r0, sp, #52	; 0x34
 80014a8:	f000 fa9a 	bl	80019e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	2400      	movs	r4, #0
 80014ae:	4b87      	ldr	r3, [pc, #540]	; (80016cc <main+0x238>)
 80014b0:	9400      	str	r4, [sp, #0]
 80014b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014b4:	4886      	ldr	r0, [pc, #536]	; (80016d0 <main+0x23c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	f042 0204 	orr.w	r2, r2, #4
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	f002 0204 	and.w	r2, r2, #4
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	9401      	str	r4, [sp, #4]
 80014c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
 80014d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80014d6:	9201      	str	r2, [sp, #4]
 80014d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	9402      	str	r4, [sp, #8]
 80014dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
 80014e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e6:	f002 0201 	and.w	r2, r2, #1
 80014ea:	9202      	str	r2, [sp, #8]
 80014ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	9403      	str	r4, [sp, #12]
 80014f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f2:	f042 0202 	orr.w	r2, r2, #2
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014fe:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001502:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001506:	f7ff f98b 	bl	8000820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001510:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	4b70      	ldr	r3, [pc, #448]	; (80016d4 <main+0x240>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001514:	4870      	ldr	r0, [pc, #448]	; (80016d8 <main+0x244>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001516:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	940f      	str	r4, [sp, #60]	; 0x3c

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800151a:	2520      	movs	r5, #32
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151c:	f7ff f8a6 	bl	800066c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001522:	486b      	ldr	r0, [pc, #428]	; (80016d0 <main+0x23c>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001524:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001526:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800152e:	f7ff f89d 	bl	800066c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001532:	486a      	ldr	r0, [pc, #424]	; (80016dc <main+0x248>)
  huart2.Init.BaudRate = 115200;
 8001534:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <main+0x24c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001538:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800153c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001542:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001544:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001546:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001548:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154c:	f7ff ff26 	bl	800139c <HAL_UART_Init>
 8001550:	b100      	cbz	r0, 8001554 <main+0xc0>
 8001552:	e7fe      	b.n	8001552 <main+0xbe>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001554:	4629      	mov	r1, r5
 8001556:	4632      	mov	r2, r6
 8001558:	485d      	ldr	r0, [pc, #372]	; (80016d0 <main+0x23c>)
  htim4.Instance = TIM4;
 800155a:	4d62      	ldr	r5, [pc, #392]	; (80016e4 <main+0x250>)
  htim8.Instance = TIM8;
 800155c:	f8df b198 	ldr.w	fp, [pc, #408]	; 80016f8 <main+0x264>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001560:	f7ff f95e 	bl	8000820 <HAL_GPIO_WritePin>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001566:	221c      	movs	r2, #28
 8001568:	4621      	mov	r1, r4
 800156a:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	9406      	str	r4, [sp, #24]
 800156e:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001570:	f000 fa36 	bl	80019e0 <memset>
  htim4.Init.Prescaler = 840;
 8001574:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <main+0x254>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001576:	485b      	ldr	r0, [pc, #364]	; (80016e4 <main+0x250>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 840;
 800157a:	f44f 7952 	mov.w	r9, #840	; 0x348
  htim4.Init.Period = 100;
 800157e:	f04f 0864 	mov.w	r8, #100	; 0x64
  htim4.Init.Prescaler = 840;
 8001582:	e885 0208 	stmia.w	r5, {r3, r9}
  htim4.Init.Period = 100;
 8001586:	f8c5 800c 	str.w	r8, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800158c:	f7ff fcd2 	bl	8000f34 <HAL_TIM_PWM_Init>
 8001590:	b100      	cbz	r0, 8001594 <main+0x100>
 8001592:	e7fe      	b.n	8001592 <main+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001598:	a906      	add	r1, sp, #24
 800159a:	4628      	mov	r0, r5
 800159c:	f7ff fd9c 	bl	80010d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4602      	mov	r2, r0
 80015a2:	b100      	cbz	r0, 80015a6 <main+0x112>
 80015a4:	e7fe      	b.n	80015a4 <main+0x110>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015aa:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = Duty;
 80015ac:	2632      	movs	r6, #50	; 0x32
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	a90d      	add	r1, sp, #52	; 0x34
 80015b0:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	970d      	str	r7, [sp, #52]	; 0x34
  sConfigOC.Pulse = Duty;
 80015b4:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	f7ff fd07 	bl	8000fc8 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4682      	mov	sl, r0
 80015bc:	b100      	cbz	r0, 80015c0 <main+0x12c>
 80015be:	e7fe      	b.n	80015be <main+0x12a>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80015c0:	4601      	mov	r1, r0
 80015c2:	4628      	mov	r0, r5
 80015c4:	f7ff fd6e 	bl	80010a4 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim4);
 80015c8:	4628      	mov	r0, r5
 80015ca:	f000 f8f3 	bl	80017b4 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 80015ce:	4c47      	ldr	r4, [pc, #284]	; (80016ec <main+0x258>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	f8cd a018 	str.w	sl, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	221c      	movs	r2, #28
 80015d6:	4651      	mov	r1, sl
 80015d8:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	f8cd a01c 	str.w	sl, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015de:	f000 f9ff 	bl	80019e0 <memset>
  htim3.Instance = TIM3;
 80015e2:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <main+0x25c>)
  htim3.Init.Period = 100;
 80015e4:	f8c4 800c 	str.w	r8, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e8:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	e884 0604 	stmia.w	r4, {r2, r9, sl}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	f8c4 a010 	str.w	sl, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f2:	f7ff fc9f 	bl	8000f34 <HAL_TIM_PWM_Init>
 80015f6:	b100      	cbz	r0, 80015fa <main+0x166>
 80015f8:	e7fe      	b.n	80015f8 <main+0x164>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015fe:	a906      	add	r1, sp, #24
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff fd69 	bl	80010d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	b100      	cbz	r0, 800160a <main+0x176>
 8001608:	e7fe      	b.n	8001608 <main+0x174>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800160e:	2204      	movs	r2, #4
 8001610:	a90d      	add	r1, sp, #52	; 0x34
 8001612:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001614:	970d      	str	r7, [sp, #52]	; 0x34
  sConfigOC.Pulse = Duty;
 8001616:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001618:	f7ff fcd6 	bl	8000fc8 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4682      	mov	sl, r0
 800161e:	b100      	cbz	r0, 8001622 <main+0x18e>
 8001620:	e7fe      	b.n	8001620 <main+0x18c>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001622:	2104      	movs	r1, #4
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fd3d 	bl	80010a4 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim3);
 800162a:	4620      	mov	r0, r4
 800162c:	f000 f8c2 	bl	80017b4 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 8001630:	4c30      	ldr	r4, [pc, #192]	; (80016f4 <main+0x260>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001632:	f8cd a010 	str.w	sl, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001636:	221c      	movs	r2, #28
 8001638:	4651      	mov	r1, sl
 800163a:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	f8cd a014 	str.w	sl, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001640:	f000 f9ce 	bl	80019e0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001644:	221c      	movs	r2, #28
 8001646:	4651      	mov	r1, sl
 8001648:	a80d      	add	r0, sp, #52	; 0x34
 800164a:	f000 f9c9 	bl	80019e0 <memset>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800164e:	4620      	mov	r0, r4
  htim8.Instance = TIM8;
 8001650:	f8c4 b000 	str.w	fp, [r4]
  htim8.Init.Prescaler = 840;
 8001654:	f8c4 9004 	str.w	r9, [r4, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	f8c4 a008 	str.w	sl, [r4, #8]
  htim8.Init.Period = 100;
 800165c:	f8c4 800c 	str.w	r8, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	f8c4 a010 	str.w	sl, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 8001664:	f8c4 a014 	str.w	sl, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001668:	f7ff fc64 	bl	8000f34 <HAL_TIM_PWM_Init>
 800166c:	b100      	cbz	r0, 8001670 <main+0x1dc>
 800166e:	e7fe      	b.n	800166e <main+0x1da>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001670:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001674:	a904      	add	r1, sp, #16
 8001676:	4620      	mov	r0, r4
 8001678:	f7ff fd2e 	bl	80010d8 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	b100      	cbz	r0, 8001680 <main+0x1ec>
 800167e:	e7fe      	b.n	800167e <main+0x1ea>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	9008      	str	r0, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001682:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001684:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001686:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001688:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800168a:	2204      	movs	r2, #4
 800168c:	a906      	add	r1, sp, #24
 800168e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001690:	9706      	str	r7, [sp, #24]
  sConfigOC.Pulse = Duty;
 8001692:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001694:	f7ff fc98 	bl	8000fc8 <HAL_TIM_PWM_ConfigChannel>
 8001698:	b100      	cbz	r0, 800169c <main+0x208>
 800169a:	e7fe      	b.n	800169a <main+0x206>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169c:	900d      	str	r0, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800169e:	900e      	str	r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a0:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a2:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a4:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016aa:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016ac:	a90d      	add	r1, sp, #52	; 0x34
 80016ae:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b0:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016b2:	f7ff fd33 	bl	800111c <HAL_TIMEx_ConfigBreakDeadTime>
 80016b6:	b100      	cbz	r0, 80016ba <main+0x226>
 80016b8:	e7fe      	b.n	80016b8 <main+0x224>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80016ba:	2104      	movs	r1, #4
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <main+0x260>)
 80016be:	f7ff fcf1 	bl	80010a4 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim8);
 80016c2:	480c      	ldr	r0, [pc, #48]	; (80016f4 <main+0x260>)
 80016c4:	f000 f876 	bl	80017b4 <HAL_TIM_MspPostInit>
 80016c8:	e74c      	b.n	8001564 <main+0xd0>
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	10210000 	.word	0x10210000
 80016d8:	40020800 	.word	0x40020800
 80016dc:	200000e0 	.word	0x200000e0
 80016e0:	40004400 	.word	0x40004400
 80016e4:	20000068 	.word	0x20000068
 80016e8:	40000800 	.word	0x40000800
 80016ec:	200000a4 	.word	0x200000a4
 80016f0:	40000400 	.word	0x40000400
 80016f4:	2000002c 	.word	0x2000002c
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_MspInit+0x3c>)
 8001700:	2100      	movs	r1, #0
 8001702:	9100      	str	r1, [sp, #0]
 8001704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
 800170c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800170e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	9101      	str	r1, [sp, #4]
 8001718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001728:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800172c:	f7fe ff42 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001730:	b003      	add	sp, #12
 8001732:	f85d fb04 	ldr.w	pc, [sp], #4
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 800173c:	6803      	ldr	r3, [r0, #0]
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_TIM_PWM_MspInit+0x68>)
 8001740:	4293      	cmp	r3, r2
{
 8001742:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM3)
 8001744:	d10d      	bne.n	8001762 <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_TIM_PWM_MspInit+0x6c>)
 800174c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174e:	f042 0202 	orr.w	r2, r2, #2
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800175e:	b004      	add	sp, #16
 8001760:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_TIM_PWM_MspInit+0x70>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d10c      	bne.n	8001782 <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_TIM_PWM_MspInit+0x6c>)
 800176e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001770:	f042 0204 	orr.w	r2, r2, #4
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	9302      	str	r3, [sp, #8]
 800177e:	9b02      	ldr	r3, [sp, #8]
 8001780:	e7ed      	b.n	800175e <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM8)
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_TIM_PWM_MspInit+0x74>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d1ea      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	9303      	str	r3, [sp, #12]
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_TIM_PWM_MspInit+0x6c>)
 800178e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001790:	f042 0202 	orr.w	r2, r2, #2
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	9303      	str	r3, [sp, #12]
 800179e:	9b03      	ldr	r3, [sp, #12]
}
 80017a0:	e7dd      	b.n	800175e <HAL_TIM_PWM_MspInit+0x22>
 80017a2:	bf00      	nop
 80017a4:	40000400 	.word	0x40000400
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40000800 	.word	0x40000800
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4604      	mov	r4, r0
 80017b8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	2214      	movs	r2, #20
 80017bc:	2100      	movs	r1, #0
 80017be:	a803      	add	r0, sp, #12
 80017c0:	f000 f90e 	bl	80019e0 <memset>
  if(htim->Instance==TIM3)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	4a24      	ldr	r2, [pc, #144]	; (8001858 <HAL_TIM_MspPostInit+0xa4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d116      	bne.n	80017fa <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_TIM_MspPostInit+0xa8>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	4823      	ldr	r0, [pc, #140]	; (8001860 <HAL_TIM_MspPostInit+0xac>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f7fe ff3b 	bl	800066c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80017f6:	b008      	add	sp, #32
 80017f8:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 80017fa:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_TIM_MspPostInit+0xb0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d113      	bne.n	8001828 <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_TIM_MspPostInit+0xa8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	4818      	ldr	r0, [pc, #96]	; (8001868 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180a:	f042 0202 	orr.w	r2, r2, #2
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001822:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	a903      	add	r1, sp, #12
 8001826:	e7e4      	b.n	80017f2 <HAL_TIM_MspPostInit+0x3e>
  else if(htim->Instance==TIM8)
 8001828:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_TIM_MspPostInit+0xb8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d1e3      	bne.n	80017f6 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_TIM_MspPostInit+0xa8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <HAL_TIM_MspPostInit+0xbc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001838:	f042 0204 	orr.w	r2, r2, #4
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001850:	2303      	movs	r3, #3
 8001852:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	a903      	add	r1, sp, #12
 8001856:	e7cc      	b.n	80017f2 <HAL_TIM_MspPostInit+0x3e>
 8001858:	40000400 	.word	0x40000400
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000
 8001864:	40000800 	.word	0x40000800
 8001868:	40020400 	.word	0x40020400
 800186c:	40010400 	.word	0x40010400
 8001870:	40020800 	.word	0x40020800

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b510      	push	{r4, lr}
 8001876:	4604      	mov	r4, r0
 8001878:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	2214      	movs	r2, #20
 800187c:	2100      	movs	r1, #0
 800187e:	a803      	add	r0, sp, #12
 8001880:	f000 f8ae 	bl	80019e0 <memset>
  if(huart->Instance==USART2)
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_UART_MspInit+0x68>)
 8001888:	429a      	cmp	r2, r3
 800188a:	d124      	bne.n	80018d6 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001890:	2100      	movs	r1, #0
 8001892:	9101      	str	r1, [sp, #4]
 8001894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001898:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
 800189e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80018a4:	9201      	str	r2, [sp, #4]
 80018a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	9102      	str	r1, [sp, #8]
 80018aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018bc:	230c      	movs	r3, #12
 80018be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ce:	2307      	movs	r3, #7
 80018d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f7fe fecb 	bl	800066c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d6:	b008      	add	sp, #32
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	bf00      	nop
 80018dc:	40004400 	.word	0x40004400
 80018e0:	40020000 	.word	0x40020000

080018e4 <NMI_Handler>:
 80018e4:	4770      	bx	lr

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler>

080018ee <SVC_Handler>:
 80018ee:	4770      	bx	lr

080018f0 <DebugMon_Handler>:
 80018f0:	4770      	bx	lr

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f7fe be4c 	b.w	8000590 <HAL_IncTick>

080018f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f8:	490f      	ldr	r1, [pc, #60]	; (8001938 <SystemInit+0x40>)
 80018fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <SystemInit+0x44>)
 8001908:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800190a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001912:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800191a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800191e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <SystemInit+0x48>)
 8001922:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800192a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800192c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800192e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001932:	608b      	str	r3, [r1, #8]
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00
 800193c:	40023800 	.word	0x40023800
 8001940:	24003010 	.word	0x24003010

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001948:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800194a:	e003      	b.n	8001954 <LoopCopyDataInit>

0800194c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800194e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001950:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001952:	3104      	adds	r1, #4

08001954 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001958:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800195a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800195c:	d3f6      	bcc.n	800194c <CopyDataInit>
  ldr  r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001960:	e002      	b.n	8001968 <LoopFillZerobss>

08001962 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001962:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001964:	f842 3b04 	str.w	r3, [r2], #4

08001968 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800196a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800196c:	d3f9      	bcc.n	8001962 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800196e:	f7ff ffc3 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f000 f811 	bl	8001998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fd8d 	bl	8001494 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001980:	08001a30 	.word	0x08001a30
  ldr  r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001988:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800198c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001990:	20000120 	.word	0x20000120

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <__libc_init_array>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	4e0d      	ldr	r6, [pc, #52]	; (80019d0 <__libc_init_array+0x38>)
 800199c:	4c0d      	ldr	r4, [pc, #52]	; (80019d4 <__libc_init_array+0x3c>)
 800199e:	1ba4      	subs	r4, r4, r6
 80019a0:	10a4      	asrs	r4, r4, #2
 80019a2:	2500      	movs	r5, #0
 80019a4:	42a5      	cmp	r5, r4
 80019a6:	d109      	bne.n	80019bc <__libc_init_array+0x24>
 80019a8:	4e0b      	ldr	r6, [pc, #44]	; (80019d8 <__libc_init_array+0x40>)
 80019aa:	4c0c      	ldr	r4, [pc, #48]	; (80019dc <__libc_init_array+0x44>)
 80019ac:	f000 f820 	bl	80019f0 <_init>
 80019b0:	1ba4      	subs	r4, r4, r6
 80019b2:	10a4      	asrs	r4, r4, #2
 80019b4:	2500      	movs	r5, #0
 80019b6:	42a5      	cmp	r5, r4
 80019b8:	d105      	bne.n	80019c6 <__libc_init_array+0x2e>
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019c0:	4798      	blx	r3
 80019c2:	3501      	adds	r5, #1
 80019c4:	e7ee      	b.n	80019a4 <__libc_init_array+0xc>
 80019c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ca:	4798      	blx	r3
 80019cc:	3501      	adds	r5, #1
 80019ce:	e7f2      	b.n	80019b6 <__libc_init_array+0x1e>
 80019d0:	08001a28 	.word	0x08001a28
 80019d4:	08001a28 	.word	0x08001a28
 80019d8:	08001a28 	.word	0x08001a28
 80019dc:	08001a2c 	.word	0x08001a2c

080019e0 <memset>:
 80019e0:	4402      	add	r2, r0
 80019e2:	4603      	mov	r3, r0
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d100      	bne.n	80019ea <memset+0xa>
 80019e8:	4770      	bx	lr
 80019ea:	f803 1b01 	strb.w	r1, [r3], #1
 80019ee:	e7f9      	b.n	80019e4 <memset+0x4>

080019f0 <_init>:
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	bf00      	nop
 80019f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f6:	bc08      	pop	{r3}
 80019f8:	469e      	mov	lr, r3
 80019fa:	4770      	bx	lr

080019fc <_fini>:
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	bf00      	nop
 8001a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a02:	bc08      	pop	{r3}
 8001a04:	469e      	mov	lr, r3
 8001a06:	4770      	bx	lr
