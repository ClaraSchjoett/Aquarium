
Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002530  08002530  00012530  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002548  08002548  00012548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c4  2000000c  08002564  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d0  08002564  000201d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00007848  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00019b8f  00000000  00000000  00027884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c6a  00000000  00000000  00041413  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c08  00000000  00000000  00044080  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001048  00000000  00000000  00044c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004ef5  00000000  00000000  00045cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004abc5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000258c  00000000  00000000  0004ac44  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a4fc  00000000  00000000  0004d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002518 	.word	0x08002518

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002518 	.word	0x08002518

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800054c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000518:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800051a:	e003      	b.n	8000524 <LoopCopyDataInit>

0800051c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800051e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000520:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000522:	3104      	adds	r1, #4

08000524 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000528:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800052c:	d3f6      	bcc.n	800051c <CopyDataInit>
  ldr  r2, =_sbss
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000530:	e002      	b.n	8000538 <LoopFillZerobss>

08000532 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000532:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000534:	f842 3b04 	str.w	r3, [r2], #4

08000538 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800053a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800053c:	d3f9      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800053e:	f000 fb91 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f001 ffbd 	bl	80024c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000546:	f000 f869 	bl	800061c <main>
  bx  lr    
 800054a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800054c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000550:	08002558 	.word	0x08002558
  ldr  r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000558:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800055c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000560:	200001d0 	.word	0x200001d0

08000564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC_IRQHandler>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	2234      	movs	r2, #52	; 0x34
 800056e:	2100      	movs	r1, #0
 8000570:	a808      	add	r0, sp, #32
 8000572:	f001 ffc9 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	2214      	movs	r2, #20
 8000578:	2100      	movs	r1, #0
 800057a:	a803      	add	r0, sp, #12
 800057c:	f001 ffc4 	bl	8002508 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000580:	2100      	movs	r1, #0
 8000582:	225c      	movs	r2, #92	; 0x5c
 8000584:	a815      	add	r0, sp, #84	; 0x54
 8000586:	f001 ffbf 	bl	8002508 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	2500      	movs	r5, #0
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <SystemClock_Config+0xac>)
 800058e:	9501      	str	r5, [sp, #4]
 8000590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000592:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000596:	641a      	str	r2, [r3, #64]	; 0x40
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059a:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a4:	9502      	str	r5, [sp, #8]
 80005a6:	6813      	ldr	r3, [r2, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005be:	2306      	movs	r3, #6
 80005c0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ce:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d8:	2304      	movs	r3, #4
 80005da:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005de:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e0:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f001 f875 	bl	80016d0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f000 fd5f 	bl	80010bc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005fe:	2320      	movs	r3, #32
 8000600:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000602:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000608:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060a:	f000 fe11 	bl	8001230 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800060e:	b02d      	add	sp, #180	; 0xb4
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <main>:
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8000620:	f000 fb6a 	bl	8000cf8 <HAL_Init>
  SystemClock_Config();
 8000624:	f7ff ffa0 	bl	8000568 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	2214      	movs	r2, #20
 800062a:	2100      	movs	r1, #0
 800062c:	a80e      	add	r0, sp, #56	; 0x38

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f001 ff6a 	bl	8002508 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000634:	4bad      	ldr	r3, [pc, #692]	; (80008ec <main+0x2d0>)
 8000636:	9401      	str	r4, [sp, #4]
 8000638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800063a:	48ad      	ldr	r0, [pc, #692]	; (80008f0 <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063c:	4dad      	ldr	r5, [pc, #692]	; (80008f4 <main+0x2d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	f042 0204 	orr.w	r2, r2, #4
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
 8000644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000646:	f002 0204 	and.w	r2, r2, #4
 800064a:	9201      	str	r2, [sp, #4]
 800064c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	9402      	str	r4, [sp, #8]
 8000650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800065e:	9202      	str	r2, [sp, #8]
 8000660:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	9403      	str	r4, [sp, #12]
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f042 0201 	orr.w	r2, r2, #1
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	f002 0201 	and.w	r2, r2, #1
 8000672:	9203      	str	r2, [sp, #12]
 8000674:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	9404      	str	r4, [sp, #16]
 8000678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067a:	f042 0202 	orr.w	r2, r2, #2
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000688:	4622      	mov	r2, r4
 800068a:	2160      	movs	r1, #96	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800068e:	f000 fca1 	bl	8000fd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000692:	4622      	mov	r2, r4
 8000694:	2120      	movs	r1, #32
 8000696:	4898      	ldr	r0, [pc, #608]	; (80008f8 <main+0x2dc>)
 8000698:	f000 fc9c 	bl	8000fd4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800069c:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a0:	4b96      	ldr	r3, [pc, #600]	; (80008fc <main+0x2e0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	4897      	ldr	r0, [pc, #604]	; (8000900 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a6:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = B1_Pin;
 80006a8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f000 fbb7 	bl	8000e20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006b2:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	a90e      	add	r1, sp, #56	; 0x38
 80006b6:	4892      	ldr	r0, [pc, #584]	; (8000900 <main+0x2e4>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006b8:	930e      	str	r3, [sp, #56]	; 0x38

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80006bc:	2760      	movs	r7, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f000 fbad 	bl	8000e20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	a90e      	add	r1, sp, #56	; 0x38
 80006c8:	4889      	ldr	r0, [pc, #548]	; (80008f0 <main+0x2d4>)
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80006ca:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f000 fba5 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006d6:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	a90e      	add	r1, sp, #56	; 0x38
 80006dc:	4884      	ldr	r0, [pc, #528]	; (80008f0 <main+0x2d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006de:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e0:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f000 fb9c 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006e8:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	a90e      	add	r1, sp, #56	; 0x38
 80006ec:	4882      	ldr	r0, [pc, #520]	; (80008f8 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ee:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f000 fb93 	bl	8000e20 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80006fa:	4882      	ldr	r0, [pc, #520]	; (8000904 <main+0x2e8>)
  huart2.Init.BaudRate = 115200;
 80006fc:	4a82      	ldr	r2, [pc, #520]	; (8000908 <main+0x2ec>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8000700:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000704:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	230c      	movs	r3, #12
 800070a:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000710:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000712:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000714:	f001 fea6 	bl	8002464 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 8000718:	487c      	ldr	r0, [pc, #496]	; (800090c <main+0x2f0>)
  hi2c1.Init.ClockSpeed = 100000;
 800071a:	497d      	ldr	r1, [pc, #500]	; (8000910 <main+0x2f4>)
 800071c:	4b7d      	ldr	r3, [pc, #500]	; (8000914 <main+0x2f8>)
  htim4.Instance = TIM4;
 800071e:	4d7e      	ldr	r5, [pc, #504]	; (8000918 <main+0x2fc>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000722:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800072a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072e:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000730:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000732:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000736:	f000 fc53 	bl	8000fe0 <HAL_I2C_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	221c      	movs	r2, #28
 800073c:	4621      	mov	r1, r4
 800073e:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	9407      	str	r4, [sp, #28]
 8000742:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000744:	f001 fee0 	bl	8002508 <memset>
  htim4.Instance = TIM4;
 8000748:	4b74      	ldr	r3, [pc, #464]	; (800091c <main+0x300>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800074c:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 0;
 800074e:	e885 0018 	stmia.w	r5, {r3, r4}
  htim4.Init.Period = 0;
 8000752:	60ec      	str	r4, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000756:	f001 fc77 	bl	8002048 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800075a:	a907      	add	r1, sp, #28
 800075c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075e:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000762:	f001 fd1d 	bl	80021a0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000766:	4622      	mov	r2, r4
 8000768:	a90e      	add	r1, sp, #56	; 0x38
 800076a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076c:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800076e:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000770:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000772:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000774:	f001 fcb2 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8000778:	4628      	mov	r0, r5
 800077a:	f000 f9b3 	bl	8000ae4 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800077e:	4d68      	ldr	r5, [pc, #416]	; (8000920 <main+0x304>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	221c      	movs	r2, #28
 8000784:	4621      	mov	r1, r4
 8000786:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078a:	f001 febd 	bl	8002508 <memset>
  htim3.Instance = TIM3;
 800078e:	4b65      	ldr	r3, [pc, #404]	; (8000924 <main+0x308>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000792:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 8000794:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 0;
 8000798:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079a:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800079c:	f001 fc54 	bl	8002048 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a0:	a907      	add	r1, sp, #28
 80007a2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a4:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a8:	f001 fcfa 	bl	80021a0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ac:	2204      	movs	r2, #4
 80007ae:	a90e      	add	r1, sp, #56	; 0x38
 80007b0:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b2:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80007b4:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b8:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ba:	f001 fc8f 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 f990 	bl	8000ae4 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c4:	221c      	movs	r2, #28
 80007c6:	4621      	mov	r1, r4
 80007c8:	eb0d 0002 	add.w	r0, sp, r2
  htim8.Instance = TIM8;
 80007cc:	4d56      	ldr	r5, [pc, #344]	; (8000928 <main+0x30c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	9405      	str	r4, [sp, #20]
 80007d0:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	f001 fe99 	bl	8002508 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d6:	221c      	movs	r2, #28
 80007d8:	4621      	mov	r1, r4
 80007da:	a80e      	add	r0, sp, #56	; 0x38
 80007dc:	f001 fe94 	bl	8002508 <memset>
  htim8.Instance = TIM8;
 80007e0:	4b52      	ldr	r3, [pc, #328]	; (800092c <main+0x310>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007e4:	4628      	mov	r0, r5
  htim8.Init.Prescaler = 0;
 80007e6:	e885 0018 	stmia.w	r5, {r3, r4}
  htim8.Init.Period = 0;
 80007ea:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 80007ee:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007f0:	f001 fc2a 	bl	8002048 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007f4:	a905      	add	r1, sp, #20
 80007f6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007fc:	f001 fcd0 	bl	80021a0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000800:	2204      	movs	r2, #4
 8000802:	a907      	add	r1, sp, #28
 8000804:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	9707      	str	r7, [sp, #28]
  sConfigOC.Pulse = 0;
 8000808:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800080c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080e:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000810:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000812:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000814:	f001 fc62 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000818:	a90e      	add	r1, sp, #56	; 0x38
 800081a:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081c:	940e      	str	r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081e:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000820:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 8000822:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000824:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000826:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800082a:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800082c:	f001 fcda 	bl	80021e4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 8000830:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8000832:	4d3f      	ldr	r5, [pc, #252]	; (8000930 <main+0x314>)
  HAL_TIM_MspPostInit(&htim8);
 8000834:	f000 f956 	bl	8000ae4 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000838:	221c      	movs	r2, #28
 800083a:	4621      	mov	r1, r4
 800083c:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	9407      	str	r4, [sp, #28]
 8000840:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	f001 fe61 	bl	8002508 <memset>
  htim2.Instance = TIM2;
 8000846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800084a:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 0;
 800084c:	e885 0018 	stmia.w	r5, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8000852:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000856:	f001 fbf7 	bl	8002048 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085a:	a907      	add	r1, sp, #28
 800085c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000862:	f001 fc9d 	bl	80021a0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000866:	2208      	movs	r2, #8
 8000868:	a90e      	add	r1, sp, #56	; 0x38
 800086a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800086e:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000872:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000874:	f001 fc32 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000878:	4628      	mov	r0, r5
 800087a:	f000 f933 	bl	8000ae4 <HAL_TIM_MspPostInit>
  RTC_TimeTypeDef sTime = {0};
 800087e:	2214      	movs	r2, #20
 8000880:	4621      	mov	r1, r4
 8000882:	a807      	add	r0, sp, #28
 8000884:	f001 fe40 	bl	8002508 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8000888:	2228      	movs	r2, #40	; 0x28
 800088a:	4621      	mov	r1, r4
 800088c:	a80e      	add	r0, sp, #56	; 0x38
  hrtc.Instance = RTC;
 800088e:	4d29      	ldr	r5, [pc, #164]	; (8000934 <main+0x318>)
  RTC_DateTypeDef sDate = {0};
 8000890:	9405      	str	r4, [sp, #20]
  RTC_AlarmTypeDef sAlarm = {0};
 8000892:	f001 fe39 	bl	8002508 <memset>
  hrtc.Instance = RTC;
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <main+0x31c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000898:	612c      	str	r4, [r5, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800089a:	e885 0018 	stmia.w	r5, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 800089e:	237f      	movs	r3, #127	; 0x7f
 80008a0:	60ab      	str	r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a2:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80008a4:	23ff      	movs	r3, #255	; 0xff
 80008a6:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008a8:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008aa:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ac:	f001 f908 	bl	8001ac0 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008b0:	4632      	mov	r2, r6
 80008b2:	a907      	add	r1, sp, #28
 80008b4:	4628      	mov	r0, r5
  sTime.Hours = 0x0;
 80008b6:	f88d 401c 	strb.w	r4, [sp, #28]
  sTime.Minutes = 0x0;
 80008ba:	f88d 401d 	strb.w	r4, [sp, #29]
  sTime.Seconds = 0x0;
 80008be:	f88d 401e 	strb.w	r4, [sp, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c2:	940a      	str	r4, [sp, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008c4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008c6:	f001 f9b4 	bl	8001c32 <HAL_RTC_SetTime>
  sDate.Year = 0x18;
 80008ca:	2318      	movs	r3, #24
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008cc:	4632      	mov	r2, r6
 80008ce:	a905      	add	r1, sp, #20
 80008d0:	4628      	mov	r0, r5
  sDate.Year = 0x18;
 80008d2:	f88d 3017 	strb.w	r3, [sp, #23]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008d6:	f88d 6014 	strb.w	r6, [sp, #20]
  sDate.Month = RTC_MONTH_JANUARY;
 80008da:	f88d 6015 	strb.w	r6, [sp, #21]
  sDate.Date = 0x1;
 80008de:	f88d 6016 	strb.w	r6, [sp, #22]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008e2:	f001 f946 	bl	8001b72 <HAL_RTC_SetDate>
  sAlarm.Alarm = RTC_ALARM_A;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	e027      	b.n	800093c <main+0x320>
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	10110000 	.word	0x10110000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	10210000 	.word	0x10210000
 8000900:	40020800 	.word	0x40020800
 8000904:	2000018c 	.word	0x2000018c
 8000908:	40004400 	.word	0x40004400
 800090c:	200000a0 	.word	0x200000a0
 8000910:	40005400 	.word	0x40005400
 8000914:	000186a0 	.word	0x000186a0
 8000918:	20000064 	.word	0x20000064
 800091c:	40000800 	.word	0x40000800
 8000920:	200000f4 	.word	0x200000f4
 8000924:	40000400 	.word	0x40000400
 8000928:	20000028 	.word	0x20000028
 800092c:	40010400 	.word	0x40010400
 8000930:	20000150 	.word	0x20000150
 8000934:	20000130 	.word	0x20000130
 8000938:	40002800 	.word	0x40002800
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800093c:	4632      	mov	r2, r6
 800093e:	a90e      	add	r1, sp, #56	; 0x38
 8000940:	4628      	mov	r0, r5
  sAlarm.AlarmTime.Hours = 0x0;
 8000942:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  sAlarm.AlarmTime.Minutes = 0x0;
 8000946:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  sAlarm.AlarmTime.Seconds = 0x0;
 800094a:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800094e:	940f      	str	r4, [sp, #60]	; 0x3c
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000950:	9411      	str	r4, [sp, #68]	; 0x44
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000952:	9412      	str	r4, [sp, #72]	; 0x48
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000954:	9413      	str	r4, [sp, #76]	; 0x4c
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000956:	9414      	str	r4, [sp, #80]	; 0x50
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000958:	9415      	str	r4, [sp, #84]	; 0x54
  sAlarm.AlarmDateWeekDay = 0x1;
 800095a:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
  sAlarm.Alarm = RTC_ALARM_A;
 800095e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000960:	f001 f9d8 	bl	8001d14 <HAL_RTC_SetAlarm_IT>
 8000964:	e7fe      	b.n	8000964 <main+0x348>
 8000966:	bf00      	nop

08000968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x3c>)
 800096c:	2100      	movs	r1, #0
 800096e:	9100      	str	r1, [sp, #0]
 8000970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000976:	645a      	str	r2, [r3, #68]	; 0x44
 8000978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800097a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800097e:	9200      	str	r2, [sp, #0]
 8000980:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	9101      	str	r1, [sp, #4]
 8000984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000986:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000994:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000998:	f000 f9da 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	b003      	add	sp, #12
 800099e:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b530      	push	{r4, r5, lr}
 80009aa:	4604      	mov	r4, r0
 80009ac:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	2214      	movs	r2, #20
 80009b0:	2100      	movs	r1, #0
 80009b2:	a803      	add	r0, sp, #12
 80009b4:	f001 fda8 	bl	8002508 <memset>
  if(hi2c->Instance==I2C1)
 80009b8:	6822      	ldr	r2, [r4, #0]
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_I2C_MspInit+0x68>)
 80009bc:	429a      	cmp	r2, r3
 80009be:	d124      	bne.n	8000a0a <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c0:	4c14      	ldr	r4, [pc, #80]	; (8000a14 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	4815      	ldr	r0, [pc, #84]	; (8000a18 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	2500      	movs	r5, #0
 80009c6:	9501      	str	r5, [sp, #4]
 80009c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	6323      	str	r3, [r4, #48]	; 0x30
 80009d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e0:	2312      	movs	r3, #18
 80009e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ee:	2304      	movs	r3, #4
 80009f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f000 fa15 	bl	8000e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f6:	9502      	str	r5, [sp, #8]
 80009f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009fe:	6423      	str	r3, [r4, #64]	; 0x40
 8000a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a0a:	b009      	add	sp, #36	; 0x24
 8000a0c:	bd30      	pop	{r4, r5, pc}
 8000a0e:	bf00      	nop
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a1c:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8000a1e:	6802      	ldr	r2, [r0, #0]
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_RTC_MspInit+0x28>)
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d10c      	bne.n	8000a40 <HAL_RTC_MspInit+0x24>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_RTC_MspInit+0x2c>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2029      	movs	r0, #41	; 0x29
 8000a30:	4611      	mov	r1, r2
 8000a32:	f000 f99f 	bl	8000d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a36:	2029      	movs	r0, #41	; 0x29
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a3c:	f000 b9ce 	b.w	8000ddc <HAL_NVIC_EnableIRQ>
 8000a40:	bd08      	pop	{r3, pc}
 8000a42:	bf00      	nop
 8000a44:	40002800 	.word	0x40002800
 8000a48:	42470e3c 	.word	0x42470e3c

08000a4c <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8000a4c:	6803      	ldr	r3, [r0, #0]
 8000a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8000a52:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM2)
 8000a54:	d10d      	bne.n	8000a72 <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x88>)
 8000a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5e:	f042 0201 	orr.w	r2, r2, #1
 8000a62:	641a      	str	r2, [r3, #64]	; 0x40
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000a6e:	b004      	add	sp, #16
 8000a70:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM3)
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d10c      	bne.n	8000a92 <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x88>)
 8000a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a80:	f042 0202 	orr.w	r2, r2, #2
 8000a84:	641a      	str	r2, [r3, #64]	; 0x40
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	9b01      	ldr	r3, [sp, #4]
 8000a90:	e7ed      	b.n	8000a6e <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM4)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <HAL_TIM_PWM_MspInit+0x90>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d10c      	bne.n	8000ab2 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x88>)
 8000a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa0:	f042 0204 	orr.w	r2, r2, #4
 8000aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	9b02      	ldr	r3, [sp, #8]
 8000ab0:	e7dd      	b.n	8000a6e <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM8)
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_TIM_PWM_MspInit+0x94>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d1da      	bne.n	8000a6e <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9303      	str	r3, [sp, #12]
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x88>)
 8000abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ac0:	f042 0202 	orr.w	r2, r2, #2
 8000ac4:	645a      	str	r2, [r3, #68]	; 0x44
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	9303      	str	r3, [sp, #12]
 8000ace:	9b03      	ldr	r3, [sp, #12]
}
 8000ad0:	e7cd      	b.n	8000a6e <HAL_TIM_PWM_MspInit+0x22>
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40000400 	.word	0x40000400
 8000adc:	40000800 	.word	0x40000800
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ae4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	2214      	movs	r2, #20
{
 8000ae8:	b08a      	sub	sp, #40	; 0x28
 8000aea:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2100      	movs	r1, #0
 8000aee:	eb0d 0002 	add.w	r0, sp, r2
 8000af2:	f001 fd09 	bl	8002508 <memset>
  if(htim->Instance==TIM2)
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000afc:	d115      	bne.n	8000b2a <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <HAL_TIM_MspPostInit+0xd4>)
 8000b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b06:	f042 0202 	orr.w	r2, r2, #2
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9b01      	ldr	r3, [sp, #4]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b20:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b22:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	a905      	add	r1, sp, #20
 8000b26:	4825      	ldr	r0, [pc, #148]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b28:	e015      	b.n	8000b56 <HAL_TIM_MspPostInit+0x72>
  else if(htim->Instance==TIM3)
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <HAL_TIM_MspPostInit+0xdc>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d116      	bne.n	8000b5e <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <HAL_TIM_MspPostInit+0xd4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <HAL_TIM_MspPostInit+0xe0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3a:	f042 0201 	orr.w	r2, r2, #1
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b52:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f000 f963 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000b5a:	b00a      	add	sp, #40	; 0x28
 8000b5c:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8000b5e:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <HAL_TIM_MspPostInit+0xe4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d110      	bne.n	8000b86 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_TIM_MspPostInit+0xd4>)
 8000b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6c:	f042 0202 	orr.w	r2, r2, #2
 8000b70:	631a      	str	r2, [r3, #48]	; 0x30
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	9303      	str	r3, [sp, #12]
 8000b7a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	9306      	str	r3, [sp, #24]
 8000b84:	e7cd      	b.n	8000b22 <HAL_TIM_MspPostInit+0x3e>
  else if(htim->Instance==TIM8)
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_TIM_MspPostInit+0xe8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d1e6      	bne.n	8000b5a <HAL_TIM_MspPostInit+0x76>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	9304      	str	r3, [sp, #16]
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_TIM_MspPostInit+0xd4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <HAL_TIM_MspPostInit+0xec>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b96:	f042 0204 	orr.w	r2, r2, #4
 8000b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	9304      	str	r3, [sp, #16]
 8000ba4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	a905      	add	r1, sp, #20
 8000bb4:	e7cf      	b.n	8000b56 <HAL_TIM_MspPostInit+0x72>
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40000800 	.word	0x40000800
 8000bcc:	40010400 	.word	0x40010400
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	2214      	movs	r2, #20
 8000bdc:	2100      	movs	r1, #0
 8000bde:	a803      	add	r0, sp, #12
 8000be0:	f001 fc92 	bl	8002508 <memset>
  if(huart->Instance==USART2)
 8000be4:	6822      	ldr	r2, [r4, #0]
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x68>)
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d124      	bne.n	8000c36 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bec:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	9101      	str	r1, [sp, #4]
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c00:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c04:	9201      	str	r2, [sp, #4]
 8000c06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	9102      	str	r1, [sp, #8]
 8000c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0c:	f042 0201 	orr.w	r2, r2, #1
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f000 f8f5 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c36:	b008      	add	sp, #32
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40020000 	.word	0x40020000

08000c44 <NMI_Handler>:
 8000c44:	4770      	bx	lr

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler>

08000c4e <SVC_Handler>:
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 b86a 	b.w	8000d2c <HAL_IncTick>

08000c58 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c58:	4801      	ldr	r0, [pc, #4]	; (8000c60 <RTC_Alarm_IRQHandler+0x8>)
 8000c5a:	f000 bed5 	b.w	8001a08 <HAL_RTC_AlarmIRQHandler>
 8000c5e:	bf00      	nop
 8000c60:	20000130 	.word	0x20000130

08000c64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	490f      	ldr	r1, [pc, #60]	; (8000ca4 <SystemInit+0x40>)
 8000c66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000c6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <SystemInit+0x44>)
 8000c74:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c76:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000c78:	f042 0201 	orr.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000c7e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c8a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <SystemInit+0x48>)
 8000c8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c96:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c98:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c9e:	608b      	str	r3, [r1, #8]
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	24003010 	.word	0x24003010

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_InitTick+0x3c>)
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_InitTick+0x40>)
{
 8000cb6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	7818      	ldrb	r0, [r3, #0]
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cc2:	6810      	ldr	r0, [r2, #0]
 8000cc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc8:	f000 f894 	bl	8000df4 <HAL_SYSTICK_Config>
 8000ccc:	4604      	mov	r4, r0
 8000cce:	b958      	cbnz	r0, 8000ce8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd0:	2d0f      	cmp	r5, #15
 8000cd2:	d809      	bhi.n	8000ce8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f84a 	bl	8000d74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <HAL_InitTick+0x44>)
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	601d      	str	r5, [r3, #0]
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <HAL_Init>:
{
 8000cf8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_Init+0x30>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d12:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f81b 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff ffc8 	bl	8000cb0 <HAL_InitTick>
  HAL_MspInit();
 8000d20:	f7ff fe22 	bl	8000968 <HAL_MspInit>
}
 8000d24:	2000      	movs	r0, #0
 8000d26:	bd08      	pop	{r3, pc}
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d2c:	4a03      	ldr	r2, [pc, #12]	; (8000d3c <HAL_IncTick+0x10>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_IncTick+0x14>)
 8000d30:	6811      	ldr	r1, [r2, #0]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	440b      	add	r3, r1
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200001cc 	.word	0x200001cc
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d44:	4b01      	ldr	r3, [pc, #4]	; (8000d4c <HAL_GetTick+0x8>)
 8000d46:	6818      	ldr	r0, [r3, #0]
}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200001cc 	.word	0x200001cc

08000d50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d58:	041b      	lsls	r3, r3, #16
 8000d5a:	0c1b      	lsrs	r3, r3, #16
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d60:	0200      	lsls	r0, r0, #8
 8000d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d66:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d6a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d6c:	60d3      	str	r3, [r2, #12]
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d76:	b530      	push	{r4, r5, lr}
 8000d78:	68dc      	ldr	r4, [r3, #12]
 8000d7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	bf28      	it	cs
 8000d88:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 0501 	mov.w	r5, #1
 8000d90:	fa05 f303 	lsl.w	r3, r5, r3
 8000d94:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d98:	bf8c      	ite	hi
 8000d9a:	3c03      	subhi	r4, #3
 8000d9c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9e:	4019      	ands	r1, r3
 8000da0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da2:	fa05 f404 	lsl.w	r4, r5, r4
 8000da6:	3c01      	subs	r4, #1
 8000da8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000daa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	ea42 0201 	orr.w	r2, r2, r1
 8000db0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	bfaf      	iteee	ge
 8000db6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	f000 000f 	andlt.w	r0, r0, #15
 8000dbe:	4b06      	ldrlt	r3, [pc, #24]	; (8000dd8 <HAL_NVIC_SetPriority+0x64>)
 8000dc0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	bfa5      	ittet	ge
 8000dc4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000dc8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000dd0:	bd30      	pop	{r4, r5, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00
 8000dd8:	e000ed14 	.word	0xe000ed14

08000ddc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ddc:	0942      	lsrs	r2, r0, #5
 8000dde:	2301      	movs	r3, #1
 8000de0:	f000 001f 	and.w	r0, r0, #31
 8000de4:	fa03 f000 	lsl.w	r0, r3, r0
 8000de8:	4b01      	ldr	r3, [pc, #4]	; (8000df0 <HAL_NVIC_EnableIRQ+0x14>)
 8000dea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	3801      	subs	r0, #1
 8000df6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dfa:	d20a      	bcs.n	8000e12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e00:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	21f0      	movs	r1, #240	; 0xf0
 8000e04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e24:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e28:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000fcc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2c:	4a65      	ldr	r2, [pc, #404]	; (8000fc4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000fd0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e34:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e36:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e3c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e40:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e44:	45b6      	cmp	lr, r6
 8000e46:	f040 80aa 	bne.w	8000f9e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4a:	684c      	ldr	r4, [r1, #4]
 8000e4c:	f024 0710 	bic.w	r7, r4, #16
 8000e50:	2f02      	cmp	r7, #2
 8000e52:	d116      	bne.n	8000e82 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e58:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e64:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e68:	f04f 0c0f 	mov.w	ip, #15
 8000e6c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e70:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	690d      	ldr	r5, [r1, #16]
 8000e76:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e7a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e82:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e88:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e90:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e92:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e96:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ea6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eaa:	d811      	bhi.n	8000ed0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000eac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eae:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	68cf      	ldr	r7, [r1, #12]
 8000eb4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000eb8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ebc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ebe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ec8:	409f      	lsls	r7, r3
 8000eca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ece:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ed0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	688f      	ldr	r7, [r1, #8]
 8000ed6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000eda:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000edc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ede:	00e5      	lsls	r5, r4, #3
 8000ee0:	d55d      	bpl.n	8000f9e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	f04f 0b00 	mov.w	fp, #0
 8000ee6:	f8cd b00c 	str.w	fp, [sp, #12]
 8000eea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	4d36      	ldr	r5, [pc, #216]	; (8000fc8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ef4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ef8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000efc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f00:	9703      	str	r7, [sp, #12]
 8000f02:	9f03      	ldr	r7, [sp, #12]
 8000f04:	f023 0703 	bic.w	r7, r3, #3
 8000f08:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f0c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f10:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f14:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f18:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f1c:	f04f 0e0f 	mov.w	lr, #15
 8000f20:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f24:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f26:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	d03f      	beq.n	8000fac <HAL_GPIO_Init+0x18c>
 8000f2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f30:	42a8      	cmp	r0, r5
 8000f32:	d03d      	beq.n	8000fb0 <HAL_GPIO_Init+0x190>
 8000f34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f38:	42a8      	cmp	r0, r5
 8000f3a:	d03b      	beq.n	8000fb4 <HAL_GPIO_Init+0x194>
 8000f3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f40:	42a8      	cmp	r0, r5
 8000f42:	d039      	beq.n	8000fb8 <HAL_GPIO_Init+0x198>
 8000f44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f48:	42a8      	cmp	r0, r5
 8000f4a:	d037      	beq.n	8000fbc <HAL_GPIO_Init+0x19c>
 8000f4c:	4548      	cmp	r0, r9
 8000f4e:	d037      	beq.n	8000fc0 <HAL_GPIO_Init+0x1a0>
 8000f50:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	bf14      	ite	ne
 8000f58:	2507      	movne	r5, #7
 8000f5a:	2506      	moveq	r5, #6
 8000f5c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f60:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f66:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	bf0c      	ite	eq
 8000f70:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f72:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f74:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f76:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f78:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	bf0c      	ite	eq
 8000f7e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f80:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f82:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f84:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f86:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	bf0c      	ite	eq
 8000f8c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f8e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f90:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f92:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f94:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f96:	bf54      	ite	pl
 8000f98:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f9a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f9c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	2b10      	cmp	r3, #16
 8000fa2:	f47f af48 	bne.w	8000e36 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fa6:	b005      	add	sp, #20
 8000fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fac:	465d      	mov	r5, fp
 8000fae:	e7d5      	b.n	8000f5c <HAL_GPIO_Init+0x13c>
 8000fb0:	2501      	movs	r5, #1
 8000fb2:	e7d3      	b.n	8000f5c <HAL_GPIO_Init+0x13c>
 8000fb4:	2502      	movs	r5, #2
 8000fb6:	e7d1      	b.n	8000f5c <HAL_GPIO_Init+0x13c>
 8000fb8:	2503      	movs	r5, #3
 8000fba:	e7cf      	b.n	8000f5c <HAL_GPIO_Init+0x13c>
 8000fbc:	2504      	movs	r5, #4
 8000fbe:	e7cd      	b.n	8000f5c <HAL_GPIO_Init+0x13c>
 8000fc0:	2505      	movs	r5, #5
 8000fc2:	e7cb      	b.n	8000f5c <HAL_GPIO_Init+0x13c>
 8000fc4:	40013c00 	.word	0x40013c00
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021400 	.word	0x40021400

08000fd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	b10a      	cbz	r2, 8000fda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd6:	6181      	str	r1, [r0, #24]
 8000fd8:	4770      	bx	lr
 8000fda:	0409      	lsls	r1, r1, #16
 8000fdc:	e7fb      	b.n	8000fd6 <HAL_GPIO_WritePin+0x2>
	...

08000fe0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	d062      	beq.n	80010ae <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000fe8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000fec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ff0:	b91b      	cbnz	r3, 8000ffa <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ff2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	f7ff fcd7 	bl	80009a8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ffa:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ffc:	4e2d      	ldr	r6, [pc, #180]	; (80010b4 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000ffe:	4d2e      	ldr	r5, [pc, #184]	; (80010b8 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001000:	2324      	movs	r3, #36	; 0x24
 8001002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800100e:	f000 f8ef 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001012:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001014:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001016:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800101a:	42b3      	cmp	r3, r6
 800101c:	bf84      	itt	hi
 800101e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001022:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001024:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001026:	bf91      	iteee	ls
 8001028:	1c69      	addls	r1, r5, #1
 800102a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800102e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001032:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001034:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001036:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001038:	d821      	bhi.n	800107e <HAL_I2C_Init+0x9e>
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001040:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001044:	2b03      	cmp	r3, #3
 8001046:	bf98      	it	ls
 8001048:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800104a:	6a21      	ldr	r1, [r4, #32]
 800104c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800104e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001050:	430b      	orrs	r3, r1
 8001052:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001054:	68e1      	ldr	r1, [r4, #12]
 8001056:	6923      	ldr	r3, [r4, #16]
 8001058:	430b      	orrs	r3, r1
 800105a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800105c:	69a1      	ldr	r1, [r4, #24]
 800105e:	6963      	ldr	r3, [r4, #20]
 8001060:	430b      	orrs	r3, r1
 8001062:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800106c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800106e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001070:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001076:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001078:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800107c:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800107e:	68a1      	ldr	r1, [r4, #8]
 8001080:	b949      	cbnz	r1, 8001096 <HAL_I2C_Init+0xb6>
 8001082:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001086:	fbb0 f0f3 	udiv	r0, r0, r3
 800108a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800108e:	b163      	cbz	r3, 80010aa <HAL_I2C_Init+0xca>
 8001090:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001094:	e7d9      	b.n	800104a <HAL_I2C_Init+0x6a>
 8001096:	2119      	movs	r1, #25
 8001098:	434b      	muls	r3, r1
 800109a:	fbb0 f0f3 	udiv	r0, r0, r3
 800109e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80010a2:	b113      	cbz	r3, 80010aa <HAL_I2C_Init+0xca>
 80010a4:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80010a8:	e7cf      	b.n	800104a <HAL_I2C_Init+0x6a>
 80010aa:	2001      	movs	r0, #1
 80010ac:	e7cd      	b.n	800104a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
}
 80010b0:	bd70      	pop	{r4, r5, r6, pc}
 80010b2:	bf00      	nop
 80010b4:	000186a0 	.word	0x000186a0
 80010b8:	000f4240 	.word	0x000f4240

080010bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c0:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010c2:	4604      	mov	r4, r0
 80010c4:	b910      	cbnz	r0, 80010cc <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80010c6:	2001      	movs	r0, #1
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010cc:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <HAL_RCC_ClockConfig+0x124>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	f002 020f 	and.w	r2, r2, #15
 80010d4:	428a      	cmp	r2, r1
 80010d6:	d328      	bcc.n	800112a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d8:	6821      	ldr	r1, [r4, #0]
 80010da:	078f      	lsls	r7, r1, #30
 80010dc:	d42d      	bmi.n	800113a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010de:	07c8      	lsls	r0, r1, #31
 80010e0:	d440      	bmi.n	8001164 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e2:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <HAL_RCC_ClockConfig+0x124>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	f002 020f 	and.w	r2, r2, #15
 80010ea:	4295      	cmp	r5, r2
 80010ec:	d366      	bcc.n	80011bc <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ee:	6822      	ldr	r2, [r4, #0]
 80010f0:	0751      	lsls	r1, r2, #29
 80010f2:	d46c      	bmi.n	80011ce <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	0713      	lsls	r3, r2, #28
 80010f6:	d507      	bpl.n	8001108 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010f8:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <HAL_RCC_ClockConfig+0x128>)
 80010fa:	6921      	ldr	r1, [r4, #16]
 80010fc:	6893      	ldr	r3, [r2, #8]
 80010fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001102:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001106:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001108:	f000 fa9a 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 800110c:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <HAL_RCC_ClockConfig+0x128>)
 800110e:	4a36      	ldr	r2, [pc, #216]	; (80011e8 <HAL_RCC_ClockConfig+0x12c>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001116:	5cd3      	ldrb	r3, [r2, r3]
 8001118:	40d8      	lsrs	r0, r3
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_RCC_ClockConfig+0x130>)
 800111c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fdc6 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8001124:	2000      	movs	r0, #0
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	b2ca      	uxtb	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	4299      	cmp	r1, r3
 8001136:	d1c6      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xa>
 8001138:	e7ce      	b.n	80010d8 <HAL_RCC_ClockConfig+0x1c>
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001140:	bf1e      	ittt	ne
 8001142:	689a      	ldrne	r2, [r3, #8]
 8001144:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001148:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114c:	bf42      	ittt	mi
 800114e:	689a      	ldrmi	r2, [r3, #8]
 8001150:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001154:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	68a0      	ldr	r0, [r4, #8]
 800115a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800115e:	4302      	orrs	r2, r0
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	e7bc      	b.n	80010de <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001164:	6862      	ldr	r2, [r4, #4]
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_RCC_ClockConfig+0x128>)
 8001168:	2a01      	cmp	r2, #1
 800116a:	d11d      	bne.n	80011a8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001172:	d0a8      	beq.n	80010c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001174:	4e1b      	ldr	r6, [pc, #108]	; (80011e4 <HAL_RCC_ClockConfig+0x128>)
 8001176:	68b3      	ldr	r3, [r6, #8]
 8001178:	f023 0303 	bic.w	r3, r3, #3
 800117c:	4313      	orrs	r3, r2
 800117e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001180:	f7ff fde0 	bl	8000d44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001188:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	68b3      	ldr	r3, [r6, #8]
 800118c:	6862      	ldr	r2, [r4, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001196:	d0a4      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f7ff fdd4 	bl	8000d44 <HAL_GetTick>
 800119c:	1bc0      	subs	r0, r0, r7
 800119e:	4540      	cmp	r0, r8
 80011a0:	d9f3      	bls.n	800118a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
}
 80011a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a8:	1e91      	subs	r1, r2, #2
 80011aa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ac:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	d802      	bhi.n	80011b6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011b4:	e7dd      	b.n	8001172 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	f013 0f02 	tst.w	r3, #2
 80011ba:	e7da      	b.n	8001172 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011bc:	b2ea      	uxtb	r2, r5
 80011be:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	429d      	cmp	r5, r3
 80011c8:	f47f af7d 	bne.w	80010c6 <HAL_RCC_ClockConfig+0xa>
 80011cc:	e78f      	b.n	80010ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ce:	4905      	ldr	r1, [pc, #20]	; (80011e4 <HAL_RCC_ClockConfig+0x128>)
 80011d0:	68e0      	ldr	r0, [r4, #12]
 80011d2:	688b      	ldr	r3, [r1, #8]
 80011d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011d8:	4303      	orrs	r3, r0
 80011da:	608b      	str	r3, [r1, #8]
 80011dc:	e78a      	b.n	80010f4 <HAL_RCC_ClockConfig+0x38>
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	08002530 	.word	0x08002530
 80011ec:	20000000 	.word	0x20000000

080011f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_RCC_GetPCLK1Freq+0x14>)
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011fe:	6810      	ldr	r0, [r2, #0]
}
 8001200:	40d8      	lsrs	r0, r3
 8001202:	4770      	bx	lr
 8001204:	40023800 	.word	0x40023800
 8001208:	08002540 	.word	0x08002540
 800120c:	20000000 	.word	0x20000000

08001210 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800121e:	6810      	ldr	r0, [r2, #0]
}
 8001220:	40d8      	lsrs	r0, r3
 8001222:	4770      	bx	lr
 8001224:	40023800 	.word	0x40023800
 8001228:	08002540 	.word	0x08002540
 800122c:	20000000 	.word	0x20000000

08001230 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001230:	6803      	ldr	r3, [r0, #0]
{
 8001232:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001236:	f013 0601 	ands.w	r6, r3, #1
{
 800123a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800123c:	d00b      	beq.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800123e:	49aa      	ldr	r1, [pc, #680]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001240:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8001242:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001246:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800124a:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800124c:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001250:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001254:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001256:	079d      	lsls	r5, r3, #30
 8001258:	d50b      	bpl.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800125a:	48a3      	ldr	r0, [pc, #652]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800125c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800125e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001262:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8001266:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001268:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800126a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 800126e:	bf08      	it	eq
 8001270:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001272:	f013 0504 	ands.w	r5, r3, #4
 8001276:	d012      	beq.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001278:	499b      	ldr	r1, [pc, #620]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800127a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800127c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001280:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001284:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001288:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800128c:	bf18      	it	ne
 800128e:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001292:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001296:	bf12      	itee	ne
 8001298:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 800129a:	2500      	moveq	r5, #0
      plli2sused = 1U;
 800129c:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800129e:	0718      	lsls	r0, r3, #28
 80012a0:	d50f      	bpl.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012a2:	4891      	ldr	r0, [pc, #580]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012a6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80012aa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80012ae:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80012b0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012b4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80012b8:	f000 8109 	beq.w	80014ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 80012bc:	2900      	cmp	r1, #0
 80012be:	bf08      	it	eq
 80012c0:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012c2:	0699      	lsls	r1, r3, #26
 80012c4:	d533      	bpl.n	800132e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	4b87      	ldr	r3, [pc, #540]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80012cc:	4f87      	ldr	r7, [pc, #540]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fd2c 	bl	8000d44 <HAL_GetTick>
 80012ec:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	05da      	lsls	r2, r3, #23
 80012f2:	f140 80ee 	bpl.w	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012f6:	4f7c      	ldr	r7, [pc, #496]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012fa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012fe:	f040 80fb 	bne.w	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001304:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001308:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800130c:	4a76      	ldr	r2, [pc, #472]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800130e:	f040 8116 	bne.w	800153e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001312:	6891      	ldr	r1, [r2, #8]
 8001314:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001318:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800131c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001320:	4301      	orrs	r1, r0
 8001322:	6091      	str	r1, [r2, #8]
 8001324:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132a:	430b      	orrs	r3, r1
 800132c:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001332:	bf42      	ittt	mi
 8001334:	4b6e      	ldrmi	r3, [pc, #440]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001336:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 800133a:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	061a      	lsls	r2, r3, #24
 8001340:	d508      	bpl.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001342:	4969      	ldr	r1, [pc, #420]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001344:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001346:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800134a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800134e:	4302      	orrs	r2, r0
 8001350:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001354:	065f      	lsls	r7, r3, #25
 8001356:	d508      	bpl.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001358:	4963      	ldr	r1, [pc, #396]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800135a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800135c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001360:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001364:	4302      	orrs	r2, r0
 8001366:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800136a:	05d8      	lsls	r0, r3, #23
 800136c:	d50c      	bpl.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800136e:	485e      	ldr	r0, [pc, #376]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001370:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001372:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001376:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800137a:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 800137c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001380:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8001384:	bf08      	it	eq
 8001386:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001388:	0599      	lsls	r1, r3, #22
 800138a:	d508      	bpl.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800138c:	4956      	ldr	r1, [pc, #344]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800138e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001390:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001394:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001398:	4302      	orrs	r2, r0
 800139a:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800139e:	055a      	lsls	r2, r3, #21
 80013a0:	f100 80d1 	bmi.w	8001546 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80013a4:	2e01      	cmp	r6, #1
 80013a6:	f040 80dc 	bne.w	8001562 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80013aa:	4e52      	ldr	r6, [pc, #328]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013ac:	4f4e      	ldr	r7, [pc, #312]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80013b2:	f7ff fcc7 	bl	8000d44 <HAL_GetTick>
 80013b6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	f100 8125 	bmi.w	800160a <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80013c0:	6822      	ldr	r2, [r4, #0]
 80013c2:	07d0      	lsls	r0, r2, #31
 80013c4:	d501      	bpl.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80013c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013c8:	b11b      	cbz	r3, 80013d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80013ca:	0791      	lsls	r1, r2, #30
 80013cc:	d515      	bpl.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80013ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013d0:	b99b      	cbnz	r3, 80013fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013d2:	4945      	ldr	r1, [pc, #276]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80013d4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80013d8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80013dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80013e4:	4303      	orrs	r3, r0
 80013e6:	6860      	ldr	r0, [r4, #4]
 80013e8:	4303      	orrs	r3, r0
 80013ea:	68a0      	ldr	r0, [r4, #8]
 80013ec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80013f0:	6960      	ldr	r0, [r4, #20]
 80013f2:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80013f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80013fa:	0753      	lsls	r3, r2, #29
 80013fc:	d503      	bpl.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80013fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001404:	d005      	beq.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001406:	0717      	lsls	r7, r2, #28
 8001408:	d520      	bpl.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800140a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800140c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001410:	d11c      	bne.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001412:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001414:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001418:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800141c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001420:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001424:	4303      	orrs	r3, r0
 8001426:	6860      	ldr	r0, [r4, #4]
 8001428:	4303      	orrs	r3, r0
 800142a:	68a0      	ldr	r0, [r4, #8]
 800142c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001430:	6920      	ldr	r0, [r4, #16]
 8001432:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001436:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800143a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800143e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001440:	f020 001f 	bic.w	r0, r0, #31
 8001444:	3b01      	subs	r3, #1
 8001446:	4303      	orrs	r3, r0
 8001448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800144c:	0550      	lsls	r0, r2, #21
 800144e:	d51b      	bpl.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001450:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001456:	d117      	bne.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001458:	4823      	ldr	r0, [pc, #140]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800145a:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800145c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001460:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001464:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001468:	433b      	orrs	r3, r7
 800146a:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800146c:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8001470:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001472:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8001476:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800147a:	68e1      	ldr	r1, [r4, #12]
 800147c:	0849      	lsrs	r1, r1, #1
 800147e:	3901      	subs	r1, #1
 8001480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001484:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001488:	0511      	lsls	r1, r2, #20
 800148a:	d511      	bpl.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	68a2      	ldr	r2, [r4, #8]
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001496:	6862      	ldr	r2, [r4, #4]
 8001498:	4313      	orrs	r3, r2
 800149a:	6962      	ldr	r2, [r4, #20]
 800149c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014a0:	68e2      	ldr	r2, [r4, #12]
 80014a2:	0852      	lsrs	r2, r2, #1
 80014a4:	3a01      	subs	r2, #1
 80014a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80014ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80014b0:	2301      	movs	r3, #1
 80014b2:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b4:	f7ff fc46 	bl	8000d44 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014b8:	4e0b      	ldr	r6, [pc, #44]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 80014ba:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014bc:	6833      	ldr	r3, [r6, #0]
 80014be:	011a      	lsls	r2, r3, #4
 80014c0:	d453      	bmi.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014c2:	f7ff fc3f 	bl	8000d44 <HAL_GetTick>
 80014c6:	1bc0      	subs	r0, r0, r7
 80014c8:	2802      	cmp	r0, #2
 80014ca:	d9f7      	bls.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80014cc:	e008      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 80014ce:	2601      	movs	r6, #1
 80014d0:	e6f7      	b.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff fc37 	bl	8000d44 <HAL_GetTick>
 80014d6:	eba0 0008 	sub.w	r0, r0, r8
 80014da:	2802      	cmp	r0, #2
 80014dc:	f67f af07 	bls.w	80012ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 80014e0:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 80014e2:	b003      	add	sp, #12
 80014e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000
 80014f0:	424711e0 	.word	0x424711e0
 80014f4:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014fa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80014fe:	4293      	cmp	r3, r2
 8001500:	f43f aeff 	beq.w	8001302 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001506:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8001508:	2101      	movs	r1, #1
 800150a:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800150c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001510:	2100      	movs	r1, #0
 8001512:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001514:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001518:	07db      	lsls	r3, r3, #31
 800151a:	f57f aef2 	bpl.w	8001302 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 800151e:	f7ff fc11 	bl	8000d44 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001526:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800152a:	0798      	lsls	r0, r3, #30
 800152c:	f53f aee9 	bmi.w	8001302 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fc08 	bl	8000d44 <HAL_GetTick>
 8001534:	eba0 0008 	sub.w	r0, r0, r8
 8001538:	4548      	cmp	r0, r9
 800153a:	d9f5      	bls.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800153c:	e7d0      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800153e:	6891      	ldr	r1, [r2, #8]
 8001540:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001544:	e6ed      	b.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001546:	483c      	ldr	r0, [pc, #240]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001548:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800154a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800154e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001552:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001554:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001558:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800155c:	f47f af22 	bne.w	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001560:	e723      	b.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001566:	f43f af20 	beq.w	80013aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 800156a:	2d01      	cmp	r5, #1
 800156c:	d14b      	bne.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 800156e:	4d33      	ldr	r5, [pc, #204]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001570:	4e31      	ldr	r6, [pc, #196]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001576:	f7ff fbe5 	bl	8000d44 <HAL_GetTick>
 800157a:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800157c:	6833      	ldr	r3, [r6, #0]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	d44b      	bmi.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001582:	6821      	ldr	r1, [r4, #0]
 8001584:	074e      	lsls	r6, r1, #29
 8001586:	d501      	bpl.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800158a:	b11b      	cbz	r3, 8001594 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800158c:	0708      	lsls	r0, r1, #28
 800158e:	d51a      	bpl.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001592:	b9c3      	cbnz	r3, 80015c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001594:	4a28      	ldr	r2, [pc, #160]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001596:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001598:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800159c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a0:	4303      	orrs	r3, r0
 80015a2:	69e0      	ldr	r0, [r4, #28]
 80015a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80015a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80015aa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80015ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80015b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80015b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80015b8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80015bc:	3801      	subs	r0, #1
 80015be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80015c6:	05ca      	lsls	r2, r1, #23
 80015c8:	d514      	bpl.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80015ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015d0:	d110      	bne.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015d2:	4919      	ldr	r1, [pc, #100]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015d4:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015da:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80015de:	4313      	orrs	r3, r2
 80015e0:	69e2      	ldr	r2, [r4, #28]
 80015e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015e6:	6a22      	ldr	r2, [r4, #32]
 80015e8:	0852      	lsrs	r2, r2, #1
 80015ea:	3a01      	subs	r2, #1
 80015ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80015f4:	2301      	movs	r3, #1
 80015f6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80015f8:	f7ff fba4 	bl	8000d44 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015fc:	4c0e      	ldr	r4, [pc, #56]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 80015fe:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	d50f      	bpl.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8001606:	2000      	movs	r0, #0
 8001608:	e76b      	b.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800160a:	f7ff fb9b 	bl	8000d44 <HAL_GetTick>
 800160e:	eba0 0008 	sub.w	r0, r0, r8
 8001612:	2802      	cmp	r0, #2
 8001614:	f67f aed0 	bls.w	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001618:	e762      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800161a:	f7ff fb93 	bl	8000d44 <HAL_GetTick>
 800161e:	1bc0      	subs	r0, r0, r7
 8001620:	2802      	cmp	r0, #2
 8001622:	d9ab      	bls.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8001624:	e75c      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001626:	f7ff fb8d 	bl	8000d44 <HAL_GetTick>
 800162a:	1b40      	subs	r0, r0, r5
 800162c:	2802      	cmp	r0, #2
 800162e:	d9e7      	bls.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001630:	e756      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001632:	bf00      	nop
 8001634:	42470e40 	.word	0x42470e40
 8001638:	40023800 	.word	0x40023800
 800163c:	42470070 	.word	0x42470070

08001640 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001640:	4920      	ldr	r1, [pc, #128]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001642:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001644:	688b      	ldr	r3, [r1, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d007      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x1e>
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d020      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001652:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x88>)
 8001654:	481d      	ldr	r0, [pc, #116]	; (80016cc <HAL_RCC_GetSysClockFreq+0x8c>)
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf18      	it	ne
 800165a:	4610      	movne	r0, r2
 800165c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001660:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001662:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001664:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001668:	bf14      	ite	ne
 800166a:	4818      	ldrne	r0, [pc, #96]	; (80016cc <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166c:	4816      	ldreq	r0, [pc, #88]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001672:	bf18      	it	ne
 8001674:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001676:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167a:	fba1 0100 	umull	r0, r1, r1, r0
 800167e:	f7fe fdc1 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x84>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800168a:	3301      	adds	r3, #1
 800168c:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800168e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001692:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001694:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001698:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169e:	bf14      	ite	ne
 80016a0:	480a      	ldrne	r0, [pc, #40]	; (80016cc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a2:	4809      	ldreq	r0, [pc, #36]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016a8:	bf18      	it	ne
 80016aa:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b0:	fba1 0100 	umull	r0, r1, r1, r0
 80016b4:	f7fe fda6 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x84>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80016c0:	e7e5      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x4e>
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	007a1200 	.word	0x007a1200

080016d0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d0:	6803      	ldr	r3, [r0, #0]
{
 80016d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	07df      	lsls	r7, r3, #31
{
 80016d8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	d410      	bmi.n	80016fe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	079e      	lsls	r6, r3, #30
 80016e0:	d467      	bmi.n	80017b2 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	071a      	lsls	r2, r3, #28
 80016e6:	f100 80b2 	bmi.w	800184e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	075b      	lsls	r3, r3, #29
 80016ee:	f100 80d0 	bmi.w	8001892 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f2:	69a2      	ldr	r2, [r4, #24]
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	f040 8139 	bne.w	800196c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80016fa:	2000      	movs	r0, #0
 80016fc:	e01e      	b.n	800173c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016fe:	4b97      	ldr	r3, [pc, #604]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	f002 020c 	and.w	r2, r2, #12
 8001706:	2a04      	cmp	r2, #4
 8001708:	d010      	beq.n	800172c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001710:	2a08      	cmp	r2, #8
 8001712:	d102      	bne.n	800171a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	025d      	lsls	r5, r3, #9
 8001718:	d408      	bmi.n	800172c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171a:	4b90      	ldr	r3, [pc, #576]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001722:	2a0c      	cmp	r2, #12
 8001724:	d10d      	bne.n	8001742 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	0250      	lsls	r0, r2, #9
 800172a:	d50a      	bpl.n	8001742 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4b8b      	ldr	r3, [pc, #556]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0399      	lsls	r1, r3, #14
 8001732:	d5d3      	bpl.n	80016dc <HAL_RCC_OscConfig+0xc>
 8001734:	6863      	ldr	r3, [r4, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1d0      	bne.n	80016dc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
}
 800173c:	b002      	add	sp, #8
 800173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	6862      	ldr	r2, [r4, #4]
 8001744:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001748:	d111      	bne.n	800176e <HAL_RCC_OscConfig+0x9e>
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001750:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001752:	f7ff faf7 	bl	8000d44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4d81      	ldr	r5, [pc, #516]	; (800195c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001758:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	682b      	ldr	r3, [r5, #0]
 800175c:	039a      	lsls	r2, r3, #14
 800175e:	d4bd      	bmi.n	80016dc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff faf0 	bl	8000d44 <HAL_GetTick>
 8001764:	1b80      	subs	r0, r0, r6
 8001766:	2864      	cmp	r0, #100	; 0x64
 8001768:	d9f7      	bls.n	800175a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800176a:	2003      	movs	r0, #3
 800176c:	e7e6      	b.n	800173c <HAL_RCC_OscConfig+0x6c>
 800176e:	4d7b      	ldr	r5, [pc, #492]	; (800195c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0xb8>
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	602b      	str	r3, [r5, #0]
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	602b      	str	r3, [r5, #0]
 8001786:	e7e4      	b.n	8001752 <HAL_RCC_OscConfig+0x82>
 8001788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178c:	602b      	str	r3, [r5, #0]
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001794:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001796:	2a00      	cmp	r2, #0
 8001798:	d1db      	bne.n	8001752 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800179a:	f7ff fad3 	bl	8000d44 <HAL_GetTick>
 800179e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	039b      	lsls	r3, r3, #14
 80017a4:	d59a      	bpl.n	80016dc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a6:	f7ff facd 	bl	8000d44 <HAL_GetTick>
 80017aa:	1b80      	subs	r0, r0, r6
 80017ac:	2864      	cmp	r0, #100	; 0x64
 80017ae:	d9f7      	bls.n	80017a0 <HAL_RCC_OscConfig+0xd0>
 80017b0:	e7db      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017b2:	4b6a      	ldr	r3, [pc, #424]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	f012 0f0c 	tst.w	r2, #12
 80017ba:	d010      	beq.n	80017de <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017c2:	2a08      	cmp	r2, #8
 80017c4:	d102      	bne.n	80017cc <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	025f      	lsls	r7, r3, #9
 80017ca:	d508      	bpl.n	80017de <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017cc:	4a63      	ldr	r2, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 80017ce:	6893      	ldr	r3, [r2, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d111      	bne.n	80017fc <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d8:	6853      	ldr	r3, [r2, #4]
 80017da:	025e      	lsls	r6, r3, #9
 80017dc:	d40e      	bmi.n	80017fc <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	0795      	lsls	r5, r2, #30
 80017e4:	d502      	bpl.n	80017ec <HAL_RCC_OscConfig+0x11c>
 80017e6:	68e2      	ldr	r2, [r4, #12]
 80017e8:	2a01      	cmp	r2, #1
 80017ea:	d1a6      	bne.n	800173a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	6921      	ldr	r1, [r4, #16]
 80017f0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017f4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e772      	b.n	80016e2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017fc:	68e2      	ldr	r2, [r4, #12]
 80017fe:	4b58      	ldr	r3, [pc, #352]	; (8001960 <HAL_RCC_OscConfig+0x290>)
 8001800:	b1b2      	cbz	r2, 8001830 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001806:	f7ff fa9d 	bl	8000d44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4d54      	ldr	r5, [pc, #336]	; (800195c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800180c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	682b      	ldr	r3, [r5, #0]
 8001810:	0798      	lsls	r0, r3, #30
 8001812:	d507      	bpl.n	8001824 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	6922      	ldr	r2, [r4, #16]
 8001818:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800181c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001820:	602b      	str	r3, [r5, #0]
 8001822:	e75e      	b.n	80016e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff fa8e 	bl	8000d44 <HAL_GetTick>
 8001828:	1b80      	subs	r0, r0, r6
 800182a:	2802      	cmp	r0, #2
 800182c:	d9ef      	bls.n	800180e <HAL_RCC_OscConfig+0x13e>
 800182e:	e79c      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001830:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001832:	f7ff fa87 	bl	8000d44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	4d49      	ldr	r5, [pc, #292]	; (800195c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001838:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	0799      	lsls	r1, r3, #30
 800183e:	f57f af50 	bpl.w	80016e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fa7f 	bl	8000d44 <HAL_GetTick>
 8001846:	1b80      	subs	r0, r0, r6
 8001848:	2802      	cmp	r0, #2
 800184a:	d9f6      	bls.n	800183a <HAL_RCC_OscConfig+0x16a>
 800184c:	e78d      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800184e:	6962      	ldr	r2, [r4, #20]
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x294>)
 8001852:	b17a      	cbz	r2, 8001874 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001858:	f7ff fa74 	bl	8000d44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185c:	4d3f      	ldr	r5, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800185e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001860:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001862:	079f      	lsls	r7, r3, #30
 8001864:	f53f af41 	bmi.w	80016ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fa6c 	bl	8000d44 <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	2802      	cmp	r0, #2
 8001870:	d9f6      	bls.n	8001860 <HAL_RCC_OscConfig+0x190>
 8001872:	e77a      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001874:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001876:	f7ff fa65 	bl	8000d44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187a:	4d38      	ldr	r5, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800187c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001880:	0798      	lsls	r0, r3, #30
 8001882:	f57f af32 	bpl.w	80016ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff fa5d 	bl	8000d44 <HAL_GetTick>
 800188a:	1b80      	subs	r0, r0, r6
 800188c:	2802      	cmp	r0, #2
 800188e:	d9f6      	bls.n	800187e <HAL_RCC_OscConfig+0x1ae>
 8001890:	e76b      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 8001894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001896:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800189a:	d128      	bne.n	80018ee <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018b0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4d2d      	ldr	r5, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80018b4:	682b      	ldr	r3, [r5, #0]
 80018b6:	05d9      	lsls	r1, r3, #23
 80018b8:	d51b      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ba:	68a3      	ldr	r3, [r4, #8]
 80018bc:	4d27      	ldr	r5, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d127      	bne.n	8001912 <HAL_RCC_OscConfig+0x242>
 80018c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018ca:	f7ff fa3b 	bl	8000d44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	4d23      	ldr	r5, [pc, #140]	; (800195c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80018d0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d8:	079b      	lsls	r3, r3, #30
 80018da:	d539      	bpl.n	8001950 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80018dc:	2e00      	cmp	r6, #0
 80018de:	f43f af08 	beq.w	80016f2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <HAL_RCC_OscConfig+0x28c>)
 80018e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	e701      	b.n	80016f2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80018ee:	2600      	movs	r6, #0
 80018f0:	e7df      	b.n	80018b2 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	682b      	ldr	r3, [r5, #0]
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018fa:	f7ff fa23 	bl	8000d44 <HAL_GetTick>
 80018fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	05da      	lsls	r2, r3, #23
 8001904:	d4d9      	bmi.n	80018ba <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff fa1d 	bl	8000d44 <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	2802      	cmp	r0, #2
 800190e:	d9f7      	bls.n	8001900 <HAL_RCC_OscConfig+0x230>
 8001910:	e72b      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	2b05      	cmp	r3, #5
 8001914:	d104      	bne.n	8001920 <HAL_RCC_OscConfig+0x250>
 8001916:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	672b      	str	r3, [r5, #112]	; 0x70
 800191e:	e7d0      	b.n	80018c2 <HAL_RCC_OscConfig+0x1f2>
 8001920:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	672a      	str	r2, [r5, #112]	; 0x70
 8001928:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800192a:	f022 0204 	bic.w	r2, r2, #4
 800192e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ca      	bne.n	80018ca <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001934:	f7ff fa06 	bl	8000d44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800193c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001940:	0798      	lsls	r0, r3, #30
 8001942:	d5cb      	bpl.n	80018dc <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff f9fe 	bl	8000d44 <HAL_GetTick>
 8001948:	1bc0      	subs	r0, r0, r7
 800194a:	4540      	cmp	r0, r8
 800194c:	d9f7      	bls.n	800193e <HAL_RCC_OscConfig+0x26e>
 800194e:	e70c      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff f9f8 	bl	8000d44 <HAL_GetTick>
 8001954:	1bc0      	subs	r0, r0, r7
 8001956:	4540      	cmp	r0, r8
 8001958:	d9bd      	bls.n	80018d6 <HAL_RCC_OscConfig+0x206>
 800195a:	e706      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
 800195c:	40023800 	.word	0x40023800
 8001960:	42470000 	.word	0x42470000
 8001964:	42470e80 	.word	0x42470e80
 8001968:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196c:	4d23      	ldr	r5, [pc, #140]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
 800196e:	68ab      	ldr	r3, [r5, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	f43f aee0 	beq.w	800173a <HAL_RCC_OscConfig+0x6a>
 800197a:	4e21      	ldr	r6, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x330>)
 800197c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001980:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	d12d      	bne.n	80019e0 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001984:	f7ff f9de 	bl	8000d44 <HAL_GetTick>
 8001988:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	0199      	lsls	r1, r3, #6
 800198e:	d421      	bmi.n	80019d4 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001990:	6a22      	ldr	r2, [r4, #32]
 8001992:	69e3      	ldr	r3, [r4, #28]
 8001994:	4313      	orrs	r3, r2
 8001996:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001998:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800199c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800199e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80019a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019a4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4c14      	ldr	r4, [pc, #80]	; (80019fc <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ac:	0852      	lsrs	r2, r2, #1
 80019ae:	3a01      	subs	r2, #1
 80019b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019b4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80019b6:	2301      	movs	r3, #1
 80019b8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80019ba:	f7ff f9c3 	bl	8000d44 <HAL_GetTick>
 80019be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	019a      	lsls	r2, r3, #6
 80019c4:	f53f ae99 	bmi.w	80016fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f9bc 	bl	8000d44 <HAL_GetTick>
 80019cc:	1b40      	subs	r0, r0, r5
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9f6      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
 80019d2:	e6ca      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f9b6 	bl	8000d44 <HAL_GetTick>
 80019d8:	1bc0      	subs	r0, r0, r7
 80019da:	2802      	cmp	r0, #2
 80019dc:	d9d5      	bls.n	800198a <HAL_RCC_OscConfig+0x2ba>
 80019de:	e6c4      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80019e0:	f7ff f9b0 	bl	8000d44 <HAL_GetTick>
 80019e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	019b      	lsls	r3, r3, #6
 80019ea:	f57f ae86 	bpl.w	80016fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f9a9 	bl	8000d44 <HAL_GetTick>
 80019f2:	1b00      	subs	r0, r0, r4
 80019f4:	2802      	cmp	r0, #2
 80019f6:	d9f6      	bls.n	80019e6 <HAL_RCC_OscConfig+0x316>
 80019f8:	e6b7      	b.n	800176a <HAL_RCC_OscConfig+0x9a>
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	42470060 	.word	0x42470060

08001a04 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_RTC_AlarmIRQHandler>:
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8001a08:	6803      	ldr	r3, [r0, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	05d2      	lsls	r2, r2, #23
{  
 8001a0e:	b510      	push	{r4, lr}
 8001a10:	4604      	mov	r4, r0
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8001a12:	d50a      	bpl.n	8001a2a <HAL_RTC_AlarmIRQHandler+0x22>
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	04d9      	lsls	r1, r3, #19
 8001a18:	d507      	bpl.n	8001a2a <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001a1a:	f7ff fff3 	bl	8001a04 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8001a1e:	6822      	ldr	r2, [r4, #0]
 8001a20:	68d3      	ldr	r3, [r2, #12]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8001a28:	60d3      	str	r3, [r2, #12]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	0592      	lsls	r2, r2, #22
 8001a30:	d50b      	bpl.n	8001a4a <HAL_RTC_AlarmIRQHandler+0x42>
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	049b      	lsls	r3, r3, #18
 8001a36:	d508      	bpl.n	8001a4a <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f000 fa1b 	bl	8001e74 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	68d3      	ldr	r3, [r2, #12]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f463 7320 	orn	r3, r3, #640	; 0x280
 8001a48:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_RTC_AlarmIRQHandler+0x50>)
 8001a4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a50:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY; 
 8001a52:	2301      	movs	r3, #1
 8001a54:	7763      	strb	r3, [r4, #29]
 8001a56:	bd10      	pop	{r4, pc}
 8001a58:	40013c00 	.word	0x40013c00

08001a5c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001a5c:	6802      	ldr	r2, [r0, #0]
{
 8001a5e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001a60:	68d3      	ldr	r3, [r2, #12]
 8001a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a66:	60d3      	str	r3, [r2, #12]
{
 8001a68:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff f96b 	bl	8000d44 <HAL_GetTick>
 8001a6e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	069b      	lsls	r3, r3, #26
 8001a76:	d501      	bpl.n	8001a7c <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001a78:	2000      	movs	r0, #0
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a7c:	f7ff f962 	bl	8000d44 <HAL_GetTick>
 8001a80:	1b40      	subs	r0, r0, r5
 8001a82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a86:	d9f3      	bls.n	8001a70 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001a88:	2003      	movs	r0, #3
}
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}

08001a8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001a8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a8e:	6803      	ldr	r3, [r0, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	0652      	lsls	r2, r2, #25
{
 8001a94:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a96:	d501      	bpl.n	8001a9c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001a98:	2000      	movs	r0, #0
 8001a9a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001aa2:	f7ff f94f 	bl	8000d44 <HAL_GetTick>
 8001aa6:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	065b      	lsls	r3, r3, #25
 8001aae:	d4f3      	bmi.n	8001a98 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ab0:	f7ff f948 	bl	8000d44 <HAL_GetTick>
 8001ab4:	1b40      	subs	r0, r0, r5
 8001ab6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001aba:	d9f5      	bls.n	8001aa8 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001abc:	2003      	movs	r0, #3
}
 8001abe:	bd38      	pop	{r3, r4, r5, pc}

08001ac0 <HAL_RTC_Init>:
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	b1b8      	cbz	r0, 8001af6 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001ac6:	7f43      	ldrb	r3, [r0, #29]
 8001ac8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001acc:	b913      	cbnz	r3, 8001ad4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001ace:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001ad0:	f7fe ffa4 	bl	8000a1c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	22ca      	movs	r2, #202	; 0xca
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
 8001ade:	2253      	movs	r2, #83	; 0x53
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff ffd2 	bl	8001a8c <RTC_EnterInitMode>
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	4605      	mov	r5, r0
 8001aec:	b128      	cbz	r0, 8001afa <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001aee:	22ff      	movs	r2, #255	; 0xff
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001af2:	2304      	movs	r3, #4
 8001af4:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001af6:	2501      	movs	r5, #1
 8001af8:	e02e      	b.n	8001b58 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001afa:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001afc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001afe:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b06:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b08:	6862      	ldr	r2, [r4, #4]
 8001b0a:	6899      	ldr	r1, [r3, #8]
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	6960      	ldr	r0, [r4, #20]
 8001b10:	4302      	orrs	r2, r0
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001b16:	68e2      	ldr	r2, [r4, #12]
 8001b18:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	68a1      	ldr	r1, [r4, #8]
 8001b1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b2a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	069b      	lsls	r3, r3, #26
 8001b30:	d405      	bmi.n	8001b3e <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff ff92 	bl	8001a5c <HAL_RTC_WaitForSynchro>
 8001b38:	b108      	cbz	r0, 8001b3e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	e7d7      	b.n	8001aee <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001b3e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001b40:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001b50:	22ff      	movs	r2, #255	; 0xff
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001b54:	2301      	movs	r3, #1
 8001b56:	7763      	strb	r3, [r4, #29]
}
 8001b58:	4628      	mov	r0, r5
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}

08001b5c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001b5c:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001b5e:	2809      	cmp	r0, #9
 8001b60:	d803      	bhi.n	8001b6a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001b62:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001b66:	b2c0      	uxtb	r0, r0
 8001b68:	4770      	bx	lr
    Value -= 10U;
 8001b6a:	380a      	subs	r0, #10
    bcdhigh++;
 8001b6c:	3301      	adds	r3, #1
    Value -= 10U;
 8001b6e:	b2c0      	uxtb	r0, r0
 8001b70:	e7f5      	b.n	8001b5e <RTC_ByteToBcd2+0x2>

08001b72 <HAL_RTC_SetDate>:
{
 8001b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001b74:	7f03      	ldrb	r3, [r0, #28]
 8001b76:	2b01      	cmp	r3, #1
{
 8001b78:	4605      	mov	r5, r0
 8001b7a:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8001b7e:	d030      	beq.n	8001be2 <HAL_RTC_SetDate+0x70>
 8001b80:	2301      	movs	r3, #1
 8001b82:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001b84:	7746      	strb	r6, [r0, #29]
 8001b86:	784b      	ldrb	r3, [r1, #1]
 8001b88:	78c8      	ldrb	r0, [r1, #3]
 8001b8a:	788e      	ldrb	r6, [r1, #2]
 8001b8c:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d148      	bne.n	8001c24 <HAL_RTC_SetDate+0xb2>
 8001b92:	06da      	lsls	r2, r3, #27
 8001b94:	d503      	bpl.n	8001b9e <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001b96:	f023 0310 	bic.w	r3, r3, #16
 8001b9a:	330a      	adds	r3, #10
 8001b9c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001b9e:	f7ff ffdd 	bl	8001b5c <RTC_ByteToBcd2>
 8001ba2:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001ba4:	7848      	ldrb	r0, [r1, #1]
 8001ba6:	f7ff ffd9 	bl	8001b5c <RTC_ByteToBcd2>
 8001baa:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001bac:	4630      	mov	r0, r6
 8001bae:	f7ff ffd5 	bl	8001b5c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001bb2:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001bb6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001bba:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bbe:	682b      	ldr	r3, [r5, #0]
 8001bc0:	22ca      	movs	r2, #202	; 0xca
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8001bc4:	2253      	movs	r2, #83	; 0x53
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001bc8:	4628      	mov	r0, r5
 8001bca:	f7ff ff5f 	bl	8001a8c <RTC_EnterInitMode>
 8001bce:	682b      	ldr	r3, [r5, #0]
 8001bd0:	4606      	mov	r6, r0
 8001bd2:	b140      	cbz	r0, 8001be6 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001bd4:	22ff      	movs	r2, #255	; 0xff
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8001be0:	2601      	movs	r6, #1
}
 8001be2:	4630      	mov	r0, r6
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001be6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001bea:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8001bee:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	069b      	lsls	r3, r3, #26
 8001bfc:	d40a      	bmi.n	8001c14 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f7ff ff2c 	bl	8001a5c <HAL_RTC_WaitForSynchro>
 8001c04:	b130      	cbz	r0, 8001c14 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	22ff      	movs	r2, #255	; 0xff
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8001c10:	772e      	strb	r6, [r5, #28]
 8001c12:	e7e5      	b.n	8001be0 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	22ff      	movs	r2, #255	; 0xff
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8001c22:	e7de      	b.n	8001be2 <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c2a:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c2c:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8001c30:	e7c5      	b.n	8001bbe <HAL_RTC_SetDate+0x4c>

08001c32 <HAL_RTC_SetTime>:
{
 8001c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001c34:	7f03      	ldrb	r3, [r0, #28]
 8001c36:	2b01      	cmp	r3, #1
{
 8001c38:	4606      	mov	r6, r0
 8001c3a:	460f      	mov	r7, r1
 8001c3c:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001c40:	d02f      	beq.n	8001ca2 <HAL_RTC_SetTime+0x70>
 8001c42:	2301      	movs	r3, #1
 8001c44:	7703      	strb	r3, [r0, #28]
 8001c46:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c48:	7745      	strb	r5, [r0, #29]
 8001c4a:	7808      	ldrb	r0, [r1, #0]
 8001c4c:	784d      	ldrb	r5, [r1, #1]
 8001c4e:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001c50:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001c52:	bb42      	cbnz	r2, 8001ca6 <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001c54:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001c58:	bf08      	it	eq
 8001c5a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c5c:	f7ff ff7e 	bl	8001b5c <RTC_ByteToBcd2>
 8001c60:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001c62:	4628      	mov	r0, r5
 8001c64:	f7ff ff7a 	bl	8001b5c <RTC_ByteToBcd2>
 8001c68:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff ff76 	bl	8001b5c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001c70:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001c7a:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c7e:	6833      	ldr	r3, [r6, #0]
 8001c80:	22ca      	movs	r2, #202	; 0xca
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
 8001c84:	2253      	movs	r2, #83	; 0x53
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c88:	4630      	mov	r0, r6
 8001c8a:	f7ff feff 	bl	8001a8c <RTC_EnterInitMode>
 8001c8e:	6833      	ldr	r3, [r6, #0]
 8001c90:	4605      	mov	r5, r0
 8001c92:	b1a8      	cbz	r0, 8001cc0 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001c94:	22ff      	movs	r2, #255	; 0xff
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001ca0:	2501      	movs	r5, #1
}
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ca6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001caa:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8001cae:	bf08      	it	eq
 8001cb0:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001cb2:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001cb6:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001cb8:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001cba:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001cbe:	e7de      	b.n	8001c7e <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001cc0:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8001cc4:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8001cc8:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001cca:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001ccc:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001cce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	6899      	ldr	r1, [r3, #8]
 8001cd8:	4302      	orrs	r2, r0
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce4:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	069b      	lsls	r3, r3, #26
 8001cea:	d40a      	bmi.n	8001d02 <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cec:	4630      	mov	r0, r6
 8001cee:	f7ff feb5 	bl	8001a5c <HAL_RTC_WaitForSynchro>
 8001cf2:	b130      	cbz	r0, 8001d02 <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	22ff      	movs	r2, #255	; 0xff
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001cfe:	7735      	strb	r5, [r6, #28]
 8001d00:	e7ce      	b.n	8001ca0 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d02:	6833      	ldr	r3, [r6, #0]
 8001d04:	22ff      	movs	r2, #255	; 0xff
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001d10:	e7c7      	b.n	8001ca2 <HAL_RTC_SetTime+0x70>
	...

08001d14 <HAL_RTC_SetAlarm_IT>:
{
 8001d14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001d18:	4b54      	ldr	r3, [pc, #336]	; (8001e6c <HAL_RTC_SetAlarm_IT+0x158>)
{
 8001d1a:	4605      	mov	r5, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001d22:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	4343      	muls	r3, r0
 8001d2c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8001d2e:	7f2b      	ldrb	r3, [r5, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f04f 0002 	mov.w	r0, #2
 8001d36:	d04b      	beq.n	8001dd0 <HAL_RTC_SetAlarm_IT+0xbc>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d3c:	7768      	strb	r0, [r5, #29]
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	7808      	ldrb	r0, [r1, #0]
 8001d42:	784f      	ldrb	r7, [r1, #1]
 8001d44:	f891 8002 	ldrb.w	r8, [r1, #2]
 8001d48:	f891 6020 	ldrb.w	r6, [r1, #32]
 8001d4c:	69cc      	ldr	r4, [r1, #28]
 8001d4e:	f8d1 a014 	ldr.w	sl, [r1, #20]
  if(Format == RTC_FORMAT_BIN)
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	d13f      	bne.n	8001dd6 <HAL_RTC_SetAlarm_IT+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001d5c:	bf08      	it	eq
 8001d5e:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d60:	f7ff fefc 	bl	8001b5c <RTC_ByteToBcd2>
 8001d64:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001d66:	4638      	mov	r0, r7
 8001d68:	f7ff fef8 	bl	8001b5c <RTC_ByteToBcd2>
 8001d6c:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001d6e:	4640      	mov	r0, r8
 8001d70:	f7ff fef4 	bl	8001b5c <RTC_ByteToBcd2>
 8001d74:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001d76:	4630      	mov	r0, r6
 8001d78:	f7ff fef0 	bl	8001b5c <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001d7c:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d7e:	ea44 040a 	orr.w	r4, r4, sl
 8001d82:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001d86:	433b      	orrs	r3, r7
 8001d88:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
 8001d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d90:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001d94:	698b      	ldr	r3, [r1, #24]
 8001d96:	684c      	ldr	r4, [r1, #4]
 8001d98:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d9a:	682b      	ldr	r3, [r5, #0]
 8001d9c:	22ca      	movs	r2, #202	; 0xca
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8001da0:	2253      	movs	r2, #83	; 0x53
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001da4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001da6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001daa:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001dac:	d143      	bne.n	8001e36 <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001dbc:	60da      	str	r2, [r3, #12]
      if (count-- == 0U)
 8001dbe:	9a01      	ldr	r2, [sp, #4]
 8001dc0:	1e51      	subs	r1, r2, #1
 8001dc2:	9101      	str	r1, [sp, #4]
 8001dc4:	b9d2      	cbnz	r2, 8001dfc <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dc6:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001dc8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dca:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001dcc:	7768      	strb	r0, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8001dce:	772a      	strb	r2, [r5, #28]
}
 8001dd0:	b002      	add	sp, #8
 8001dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001dd6:	689a      	ldr	r2, [r3, #8]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001dd8:	ea44 040a 	orr.w	r4, r4, sl
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ddc:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001de0:	bf08      	it	eq
 8001de2:	70ca      	strbeq	r2, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001de4:	ea44 0408 	orr.w	r4, r4, r8
 8001de8:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001dec:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001dee:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8001df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001df6:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8001dfa:	e7cb      	b.n	8001d94 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	07d1      	lsls	r1, r2, #31
 8001e00:	d5dd      	bpl.n	8001dbe <HAL_RTC_SetAlarm_IT+0xaa>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001e02:	61d8      	str	r0, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001e04:	645c      	str	r4, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e0c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001e14:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_RTC_SetAlarm_IT+0x15c>)
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001e1e:	6011      	str	r1, [r2, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001e20:	6891      	ldr	r1, [r2, #8]
 8001e22:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001e26:	6091      	str	r1, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);  
 8001e2c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY; 
 8001e2e:	2301      	movs	r3, #1
 8001e30:	776b      	strb	r3, [r5, #29]
  __HAL_UNLOCK(hrtc);  
 8001e32:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 8001e34:	e7cc      	b.n	8001dd0 <HAL_RTC_SetAlarm_IT+0xbc>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001e36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e3a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001e44:	60da      	str	r2, [r3, #12]
      if (count-- == 0U)
 8001e46:	9a01      	ldr	r2, [sp, #4]
 8001e48:	1e51      	subs	r1, r2, #1
 8001e4a:	9101      	str	r1, [sp, #4]
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d0ba      	beq.n	8001dc6 <HAL_RTC_SetAlarm_IT+0xb2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	0792      	lsls	r2, r2, #30
 8001e54:	d5f7      	bpl.n	8001e46 <HAL_RTC_SetAlarm_IT+0x132>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001e56:	6218      	str	r0, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001e58:	649c      	str	r4, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e60:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e68:	e7d4      	b.n	8001e14 <HAL_RTC_SetAlarm_IT+0x100>
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e74:	4770      	bx	lr
	...

08001e78 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e78:	6a03      	ldr	r3, [r0, #32]
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e80:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e82:	6842      	ldr	r2, [r0, #4]
{
 8001e84:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e86:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e8a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e8e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e90:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e92:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001e96:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e98:	4c0c      	ldr	r4, [pc, #48]	; (8001ecc <TIM_OC1_SetConfig+0x54>)
 8001e9a:	42a0      	cmp	r0, r4
 8001e9c:	d009      	beq.n	8001eb2 <TIM_OC1_SetConfig+0x3a>
 8001e9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ea2:	42a0      	cmp	r0, r4
 8001ea4:	d005      	beq.n	8001eb2 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ea8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001eaa:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001eac:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001eae:	6203      	str	r3, [r0, #32]
} 
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001eb2:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001eb4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001eb6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001eba:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ebc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ebe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ec2:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ec8:	4322      	orrs	r2, r4
 8001eca:	e7ec      	b.n	8001ea6 <TIM_OC1_SetConfig+0x2e>
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ed0:	6a03      	ldr	r3, [r0, #32]
 8001ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ed8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001eda:	6842      	ldr	r2, [r0, #4]
{
 8001edc:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ede:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ee0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001ee2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ee6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ee8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001eea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ef2:	4c0e      	ldr	r4, [pc, #56]	; (8001f2c <TIM_OC3_SetConfig+0x5c>)
 8001ef4:	42a0      	cmp	r0, r4
 8001ef6:	d009      	beq.n	8001f0c <TIM_OC3_SetConfig+0x3c>
 8001ef8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001efc:	42a0      	cmp	r0, r4
 8001efe:	d005      	beq.n	8001f0c <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f00:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f02:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f04:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001f06:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f08:	6203      	str	r3, [r0, #32]
}
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f0c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f0e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f14:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f18:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f1a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f1e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f24:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001f28:	e7ea      	b.n	8001f00 <TIM_OC3_SetConfig+0x30>
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000

08001f30 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f30:	6a03      	ldr	r3, [r0, #32]
 8001f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f36:	6203      	str	r3, [r0, #32]
{
 8001f38:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f3a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f3c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f3e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001f4c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f50:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f54:	4d09      	ldr	r5, [pc, #36]	; (8001f7c <TIM_OC4_SetConfig+0x4c>)
 8001f56:	42a8      	cmp	r0, r5
 8001f58:	d009      	beq.n	8001f6e <TIM_OC4_SetConfig+0x3e>
 8001f5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f5e:	42a8      	cmp	r0, r5
 8001f60:	d005      	beq.n	8001f6e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f62:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f64:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f66:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001f68:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f6a:	6204      	str	r4, [r0, #32]
}
 8001f6c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f6e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f74:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001f78:	e7f3      	b.n	8001f62 <TIM_OC4_SetConfig+0x32>
 8001f7a:	bf00      	nop
 8001f7c:	40010000 	.word	0x40010000

08001f80 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001f82:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f84:	4290      	cmp	r0, r2
 8001f86:	d012      	beq.n	8001fae <TIM_Base_SetConfig+0x2e>
 8001f88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f8c:	d00f      	beq.n	8001fae <TIM_Base_SetConfig+0x2e>
 8001f8e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d00b      	beq.n	8001fae <TIM_Base_SetConfig+0x2e>
 8001f96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f9a:	4290      	cmp	r0, r2
 8001f9c:	d007      	beq.n	8001fae <TIM_Base_SetConfig+0x2e>
 8001f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa2:	4290      	cmp	r0, r2
 8001fa4:	d003      	beq.n	8001fae <TIM_Base_SetConfig+0x2e>
 8001fa6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001faa:	4290      	cmp	r0, r2
 8001fac:	d11d      	bne.n	8001fea <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001fae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fb4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001fb6:	4a21      	ldr	r2, [pc, #132]	; (800203c <TIM_Base_SetConfig+0xbc>)
 8001fb8:	4290      	cmp	r0, r2
 8001fba:	d104      	bne.n	8001fc6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	e028      	b.n	8002018 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001fc6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fca:	d0f7      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <TIM_Base_SetConfig+0xc0>)
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d0f4      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8001fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd6:	4290      	cmp	r0, r2
 8001fd8:	d0f0      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8001fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fde:	4290      	cmp	r0, r2
 8001fe0:	d0ec      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8001fe2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001fe6:	4290      	cmp	r0, r2
 8001fe8:	d0e8      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8001fea:	4a16      	ldr	r2, [pc, #88]	; (8002044 <TIM_Base_SetConfig+0xc4>)
 8001fec:	4290      	cmp	r0, r2
 8001fee:	d0e5      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8001ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff4:	4290      	cmp	r0, r2
 8001ff6:	d0e1      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8001ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ffc:	4290      	cmp	r0, r2
 8001ffe:	d0dd      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8002000:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002004:	4290      	cmp	r0, r2
 8002006:	d0d9      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8002008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200c:	4290      	cmp	r0, r2
 800200e:	d0d5      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
 8002010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002014:	4290      	cmp	r0, r2
 8002016:	d0d1      	beq.n	8001fbc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002018:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800201a:	688b      	ldr	r3, [r1, #8]
 800201c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800201e:	680b      	ldr	r3, [r1, #0]
 8002020:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <TIM_Base_SetConfig+0xbc>)
 8002024:	4298      	cmp	r0, r3
 8002026:	d006      	beq.n	8002036 <TIM_Base_SetConfig+0xb6>
 8002028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800202c:	4298      	cmp	r0, r3
 800202e:	d002      	beq.n	8002036 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002030:	2301      	movs	r3, #1
 8002032:	6143      	str	r3, [r0, #20]
}
 8002034:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002036:	690b      	ldr	r3, [r1, #16]
 8002038:	6303      	str	r3, [r0, #48]	; 0x30
 800203a:	e7f9      	b.n	8002030 <TIM_Base_SetConfig+0xb0>
 800203c:	40010000 	.word	0x40010000
 8002040:	40000400 	.word	0x40000400
 8002044:	40014000 	.word	0x40014000

08002048 <HAL_TIM_PWM_Init>:
{
 8002048:	b510      	push	{r4, lr}
  if(htim == NULL)
 800204a:	4604      	mov	r4, r0
 800204c:	b1a0      	cbz	r0, 8002078 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800204e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002056:	b91b      	cbnz	r3, 8002060 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002058:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800205c:	f7fe fcf6 	bl	8000a4c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002060:	2302      	movs	r3, #2
 8002062:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002066:	6820      	ldr	r0, [r4, #0]
 8002068:	1d21      	adds	r1, r4, #4
 800206a:	f7ff ff89 	bl	8001f80 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800206e:	2301      	movs	r3, #1
 8002070:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002074:	2000      	movs	r0, #0
 8002076:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
}  
 800207a:	bd10      	pop	{r4, pc}

0800207c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800207c:	6a03      	ldr	r3, [r0, #32]
 800207e:	f023 0310 	bic.w	r3, r3, #16
 8002082:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002084:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002086:	6842      	ldr	r2, [r0, #4]
{
 8002088:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800208a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800208c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800208e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002092:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002096:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002098:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800209c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80020a0:	4c0d      	ldr	r4, [pc, #52]	; (80020d8 <TIM_OC2_SetConfig+0x5c>)
 80020a2:	42a0      	cmp	r0, r4
 80020a4:	d009      	beq.n	80020ba <TIM_OC2_SetConfig+0x3e>
 80020a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020aa:	42a0      	cmp	r0, r4
 80020ac:	d005      	beq.n	80020ba <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80020ae:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80020b0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80020b2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80020b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80020b6:	6203      	str	r3, [r0, #32]
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020ba:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020bc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80020be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020c2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020c6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020cc:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80020ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020d2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80020d6:	e7ea      	b.n	80020ae <TIM_OC2_SetConfig+0x32>
 80020d8:	40010000 	.word	0x40010000

080020dc <HAL_TIM_PWM_ConfigChannel>:
{
 80020dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80020de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80020e2:	2b01      	cmp	r3, #1
{
 80020e4:	4604      	mov	r4, r0
 80020e6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80020ea:	d025      	beq.n	8002138 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80020ec:	2301      	movs	r3, #1
 80020ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80020f2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80020f6:	2a0c      	cmp	r2, #12
 80020f8:	d818      	bhi.n	800212c <HAL_TIM_PWM_ConfigChannel+0x50>
 80020fa:	e8df f002 	tbb	[pc, r2]
 80020fe:	1707      	.short	0x1707
 8002100:	171e1717 	.word	0x171e1717
 8002104:	172f1717 	.word	0x172f1717
 8002108:	1717      	.short	0x1717
 800210a:	40          	.byte	0x40
 800210b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800210c:	6820      	ldr	r0, [r4, #0]
 800210e:	f7ff feb3 	bl	8001e78 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002112:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002114:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	f042 0208 	orr.w	r2, r2, #8
 800211c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	f022 0204 	bic.w	r2, r2, #4
 8002124:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800212a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800212c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800212e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002134:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002138:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800213a:	6820      	ldr	r0, [r4, #0]
 800213c:	f7ff ff9e 	bl	800207c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002140:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002142:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215a:	e7e6      	b.n	800212a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800215c:	6820      	ldr	r0, [r4, #0]
 800215e:	f7ff feb7 	bl	8001ed0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002162:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002164:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	f042 0208 	orr.w	r2, r2, #8
 800216c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	f022 0204 	bic.w	r2, r2, #4
 8002174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800217a:	61da      	str	r2, [r3, #28]
    break;
 800217c:	e7d6      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800217e:	6820      	ldr	r0, [r4, #0]
 8002180:	f7ff fed6 	bl	8001f30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002184:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002186:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002196:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800219e:	e7ec      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x9e>

080021a0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80021a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021a4:	2b01      	cmp	r3, #1
{
 80021a6:	b510      	push	{r4, lr}
 80021a8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80021ac:	d018      	beq.n	80021e0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80021ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021b2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80021b4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021b6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021b8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021be:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4322      	orrs	r2, r4
 80021c4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021cc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80021da:	2300      	movs	r3, #0
 80021dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80021e0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80021e2:	bd10      	pop	{r4, pc}

080021e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80021e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d01f      	beq.n	800222c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021ec:	68cb      	ldr	r3, [r1, #12]
 80021ee:	688a      	ldr	r2, [r1, #8]
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80021f6:	684a      	ldr	r2, [r1, #4]
 80021f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80021fe:	680a      	ldr	r2, [r1, #0]
 8002200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002204:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002206:	690a      	ldr	r2, [r1, #16]
 8002208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800220c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800220e:	694a      	ldr	r2, [r1, #20]
 8002210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002214:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002216:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002218:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800221c:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800221e:	6802      	ldr	r2, [r0, #0]
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002222:	2300      	movs	r3, #0
 8002224:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002228:	4618      	mov	r0, r3
 800222a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800222c:	2002      	movs	r0, #2
}
 800222e:	4770      	bx	lr

08002230 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002234:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002236:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002238:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800223a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800223c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002240:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002242:	6133      	str	r3, [r6, #16]
{
 8002244:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002246:	6883      	ldr	r3, [r0, #8]
 8002248:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800224a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800224c:	4303      	orrs	r3, r0
 800224e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002250:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002254:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002256:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800225a:	430b      	orrs	r3, r1
 800225c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800225e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002260:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002262:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002268:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800226a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800226e:	6173      	str	r3, [r6, #20]
 8002270:	4b7a      	ldr	r3, [pc, #488]	; (800245c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002272:	d17c      	bne.n	800236e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002274:	429e      	cmp	r6, r3
 8002276:	d003      	beq.n	8002280 <UART_SetConfig+0x50>
 8002278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227c:	429e      	cmp	r6, r3
 800227e:	d144      	bne.n	800230a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002280:	f7fe ffc6 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 8002284:	2519      	movs	r5, #25
 8002286:	fb05 f300 	mul.w	r3, r5, r0
 800228a:	6860      	ldr	r0, [r4, #4]
 800228c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002290:	0040      	lsls	r0, r0, #1
 8002292:	fbb3 f3f0 	udiv	r3, r3, r0
 8002296:	fbb3 f3f9 	udiv	r3, r3, r9
 800229a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800229e:	f7fe ffb7 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 80022a2:	6863      	ldr	r3, [r4, #4]
 80022a4:	4368      	muls	r0, r5
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fbb0 f7f3 	udiv	r7, r0, r3
 80022ac:	f7fe ffb0 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 80022b0:	6863      	ldr	r3, [r4, #4]
 80022b2:	4368      	muls	r0, r5
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80022be:	fb09 7313 	mls	r3, r9, r3, r7
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	3332      	adds	r3, #50	; 0x32
 80022c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80022d0:	f7fe ff9e 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 80022d4:	6862      	ldr	r2, [r4, #4]
 80022d6:	4368      	muls	r0, r5
 80022d8:	0052      	lsls	r2, r2, #1
 80022da:	fbb0 faf2 	udiv	sl, r0, r2
 80022de:	f7fe ff97 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022e2:	6863      	ldr	r3, [r4, #4]
 80022e4:	4368      	muls	r0, r5
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80022f0:	fb09 a313 	mls	r3, r9, r3, sl
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	3332      	adds	r3, #50	; 0x32
 80022f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002302:	443b      	add	r3, r7
 8002304:	60b3      	str	r3, [r6, #8]
 8002306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800230a:	f7fe ff71 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800230e:	2519      	movs	r5, #25
 8002310:	fb05 f300 	mul.w	r3, r5, r0
 8002314:	6860      	ldr	r0, [r4, #4]
 8002316:	f04f 0964 	mov.w	r9, #100	; 0x64
 800231a:	0040      	lsls	r0, r0, #1
 800231c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002320:	fbb3 f3f9 	udiv	r3, r3, r9
 8002324:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002328:	f7fe ff62 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800232c:	6863      	ldr	r3, [r4, #4]
 800232e:	4368      	muls	r0, r5
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fbb0 f7f3 	udiv	r7, r0, r3
 8002336:	f7fe ff5b 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800233a:	6863      	ldr	r3, [r4, #4]
 800233c:	4368      	muls	r0, r5
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fbb0 f3f3 	udiv	r3, r0, r3
 8002344:	fbb3 f3f9 	udiv	r3, r3, r9
 8002348:	fb09 7313 	mls	r3, r9, r3, r7
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	3332      	adds	r3, #50	; 0x32
 8002350:	fbb3 f3f9 	udiv	r3, r3, r9
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800235a:	f7fe ff49 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800235e:	6862      	ldr	r2, [r4, #4]
 8002360:	4368      	muls	r0, r5
 8002362:	0052      	lsls	r2, r2, #1
 8002364:	fbb0 faf2 	udiv	sl, r0, r2
 8002368:	f7fe ff42 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800236c:	e7b9      	b.n	80022e2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800236e:	429e      	cmp	r6, r3
 8002370:	d002      	beq.n	8002378 <UART_SetConfig+0x148>
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <UART_SetConfig+0x230>)
 8002374:	429e      	cmp	r6, r3
 8002376:	d140      	bne.n	80023fa <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002378:	f7fe ff4a 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 800237c:	6867      	ldr	r7, [r4, #4]
 800237e:	2519      	movs	r5, #25
 8002380:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002384:	fb05 f300 	mul.w	r3, r5, r0
 8002388:	00bf      	lsls	r7, r7, #2
 800238a:	fbb3 f3f7 	udiv	r3, r3, r7
 800238e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002392:	011f      	lsls	r7, r3, #4
 8002394:	f7fe ff3c 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 8002398:	6863      	ldr	r3, [r4, #4]
 800239a:	4368      	muls	r0, r5
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	fbb0 f8f3 	udiv	r8, r0, r3
 80023a2:	f7fe ff35 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 80023a6:	6863      	ldr	r3, [r4, #4]
 80023a8:	4368      	muls	r0, r5
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80023b4:	fb09 8313 	mls	r3, r9, r3, r8
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	3332      	adds	r3, #50	; 0x32
 80023bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80023c0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80023c4:	f7fe ff24 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 80023c8:	6862      	ldr	r2, [r4, #4]
 80023ca:	4368      	muls	r0, r5
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	fbb0 faf2 	udiv	sl, r0, r2
 80023d2:	f7fe ff1d 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023d6:	6863      	ldr	r3, [r4, #4]
 80023d8:	4368      	muls	r0, r5
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80023e4:	fb09 a313 	mls	r3, r9, r3, sl
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	3332      	adds	r3, #50	; 0x32
 80023ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	ea43 0308 	orr.w	r3, r3, r8
 80023f8:	e783      	b.n	8002302 <UART_SetConfig+0xd2>
 80023fa:	f7fe fef9 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 80023fe:	6867      	ldr	r7, [r4, #4]
 8002400:	2519      	movs	r5, #25
 8002402:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002406:	fb05 f300 	mul.w	r3, r5, r0
 800240a:	00bf      	lsls	r7, r7, #2
 800240c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002410:	fbb3 f3f9 	udiv	r3, r3, r9
 8002414:	011f      	lsls	r7, r3, #4
 8002416:	f7fe feeb 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800241a:	6863      	ldr	r3, [r4, #4]
 800241c:	4368      	muls	r0, r5
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fbb0 f8f3 	udiv	r8, r0, r3
 8002424:	f7fe fee4 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 8002428:	6863      	ldr	r3, [r4, #4]
 800242a:	4368      	muls	r0, r5
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	fbb3 f3f9 	udiv	r3, r3, r9
 8002436:	fb09 8313 	mls	r3, r9, r3, r8
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	3332      	adds	r3, #50	; 0x32
 800243e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002442:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002446:	f7fe fed3 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800244a:	6862      	ldr	r2, [r4, #4]
 800244c:	4368      	muls	r0, r5
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	fbb0 faf2 	udiv	sl, r0, r2
 8002454:	f7fe fecc 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 8002458:	e7bd      	b.n	80023d6 <UART_SetConfig+0x1a6>
 800245a:	bf00      	nop
 800245c:	40011000 	.word	0x40011000
 8002460:	40011400 	.word	0x40011400

08002464 <HAL_UART_Init>:
{
 8002464:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002466:	4604      	mov	r4, r0
 8002468:	b340      	cbz	r0, 80024bc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800246a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800246e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002472:	b91b      	cbnz	r3, 800247c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002474:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002478:	f7fe fbac 	bl	8000bd4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800247c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800247e:	2324      	movs	r3, #36	; 0x24
 8002480:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002484:	68d3      	ldr	r3, [r2, #12]
 8002486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800248a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff fecf 	bl	8002230 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800249a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024aa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80024ae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80024b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80024b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80024ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024bc:	2001      	movs	r0, #1
}
 80024be:	bd10      	pop	{r4, pc}

080024c0 <__libc_init_array>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	4e0d      	ldr	r6, [pc, #52]	; (80024f8 <__libc_init_array+0x38>)
 80024c4:	4c0d      	ldr	r4, [pc, #52]	; (80024fc <__libc_init_array+0x3c>)
 80024c6:	1ba4      	subs	r4, r4, r6
 80024c8:	10a4      	asrs	r4, r4, #2
 80024ca:	2500      	movs	r5, #0
 80024cc:	42a5      	cmp	r5, r4
 80024ce:	d109      	bne.n	80024e4 <__libc_init_array+0x24>
 80024d0:	4e0b      	ldr	r6, [pc, #44]	; (8002500 <__libc_init_array+0x40>)
 80024d2:	4c0c      	ldr	r4, [pc, #48]	; (8002504 <__libc_init_array+0x44>)
 80024d4:	f000 f820 	bl	8002518 <_init>
 80024d8:	1ba4      	subs	r4, r4, r6
 80024da:	10a4      	asrs	r4, r4, #2
 80024dc:	2500      	movs	r5, #0
 80024de:	42a5      	cmp	r5, r4
 80024e0:	d105      	bne.n	80024ee <__libc_init_array+0x2e>
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024e8:	4798      	blx	r3
 80024ea:	3501      	adds	r5, #1
 80024ec:	e7ee      	b.n	80024cc <__libc_init_array+0xc>
 80024ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024f2:	4798      	blx	r3
 80024f4:	3501      	adds	r5, #1
 80024f6:	e7f2      	b.n	80024de <__libc_init_array+0x1e>
 80024f8:	08002550 	.word	0x08002550
 80024fc:	08002550 	.word	0x08002550
 8002500:	08002550 	.word	0x08002550
 8002504:	08002554 	.word	0x08002554

08002508 <memset>:
 8002508:	4402      	add	r2, r0
 800250a:	4603      	mov	r3, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <_init>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr

08002524 <_fini>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr
