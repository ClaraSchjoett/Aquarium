
Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004108  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  080042f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000210  20000018  0800430c  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000228  0800430c  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016610  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002560  00000000  00000000  00036658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fd8  00000000  00000000  00038bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee0  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007600  00000000  00000000  0003aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f2b  00000000  00000000  00042070  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046f9b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043d4  00000000  00000000  00047018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080042b4 	.word	0x080042b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	080042b4 	.word	0x080042b4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f925 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 fbbe 	bl	8003cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f93d 	bl	80007f6 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f905 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000014 	.word	0x20000014
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000038 	.word	0x20000038

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000038 	.word	0x20000038

080005f8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <NVIC_EnableIRQ+0x30>)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	095b      	lsrs	r3, r3, #5
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	f002 021f 	and.w	r2, r2, #31
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da0b      	bge.n	80006bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	490d      	ldr	r1, [pc, #52]	; (80006dc <NVIC_SetPriority+0x4c>)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	3b04      	subs	r3, #4
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ba:	e009      	b.n	80006d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	4908      	ldr	r1, [pc, #32]	; (80006e0 <NVIC_SetPriority+0x50>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	2201      	movs	r2, #1
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	401a      	ands	r2, r3
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072a:	2101      	movs	r1, #1
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	1e59      	subs	r1, r3, #1
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff90 	bl	8000690 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff2f 	bl	80005f8 <NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff44 	bl	8000640 <NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff37 	bl	800065c <NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e165      	b.n	8000af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8154 	bne.w	8000af2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0x4a>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b12      	cmp	r3, #18
 8000858:	d123      	bne.n	80008a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	220f      	movs	r2, #15
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	08da      	lsrs	r2, r3, #3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0203 	and.w	r2, r3, #3
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d00b      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d007      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ea:	2b11      	cmp	r3, #17
 80008ec:	d003      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d130      	bne.n	8000958 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4313      	orrs	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	f003 0201 	and.w	r2, r3, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80ae 	beq.w	8000af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4a5c      	ldr	r2, [pc, #368]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099c:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b2:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <HAL_GPIO_Init+0x300>)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <HAL_GPIO_Init+0x304>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x21a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4d      	ldr	r2, [pc, #308]	; (8000b18 <HAL_GPIO_Init+0x308>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x216>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_GPIO_Init+0x30c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x212>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4b      	ldr	r2, [pc, #300]	; (8000b20 <HAL_GPIO_Init+0x310>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x20e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4a      	ldr	r2, [pc, #296]	; (8000b24 <HAL_GPIO_Init+0x314>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x20a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <HAL_GPIO_Init+0x318>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a48      	ldr	r2, [pc, #288]	; (8000b2c <HAL_GPIO_Init+0x31c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x202>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a98:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	f67f ae96 	bls.w	800082c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b00:	bf00      	nop
 8000b02:	3724      	adds	r7, #36	; 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691a      	ldr	r2, [r3, #16]
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	041a      	lsls	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	619a      	str	r2, [r3, #24]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f806 	bl	8000bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40013c00 	.word	0x40013c00

08000bc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e0c8      	b.n	8000d8c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d106      	bne.n	8000c14 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f003 f882 	bl	8003d18 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2224      	movs	r2, #36	; 0x24
 8000c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	f022 0201 	bic.w	r2, r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c2c:	f000 f9a6 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 8000c30:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <HAL_I2C_Init+0x1b4>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	0c9b      	lsrs	r3, r3, #18
 8000c3c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4952      	ldr	r1, [pc, #328]	; (8000d98 <HAL_I2C_Init+0x1b8>)
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d802      	bhi.n	8000c5a <HAL_I2C_Init+0x7a>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	e009      	b.n	8000c6e <HAL_I2C_Init+0x8e>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c60:	fb01 f303 	mul.w	r3, r1, r3
 8000c64:	494d      	ldr	r1, [pc, #308]	; (8000d9c <HAL_I2C_Init+0x1bc>)
 8000c66:	fba1 1303 	umull	r1, r3, r1, r3
 8000c6a:	099b      	lsrs	r3, r3, #6
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6819      	ldr	r1, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <HAL_I2C_Init+0x1b8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d812      	bhi.n	8000ca4 <HAL_I2C_Init+0xc4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d906      	bls.n	8000ca0 <HAL_I2C_Init+0xc0>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	e045      	b.n	8000d2c <HAL_I2C_Init+0x14c>
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	e043      	b.n	8000d2c <HAL_I2C_Init+0x14c>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10f      	bne.n	8000ccc <HAL_I2C_Init+0xec>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	e010      	b.n	8000cee <HAL_I2C_Init+0x10e>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009a      	lsls	r2, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf0c      	ite	eq
 8000ce8:	2301      	moveq	r3, #1
 8000cea:	2300      	movne	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_I2C_Init+0x116>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e01a      	b.n	8000d2c <HAL_I2C_Init+0x14c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10a      	bne.n	8000d14 <HAL_I2C_Init+0x134>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d12:	e00b      	b.n	8000d2c <HAL_I2C_Init+0x14c>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009a      	lsls	r2, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	69d1      	ldr	r1, [r2, #28]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6a12      	ldr	r2, [r2, #32]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	6911      	ldr	r1, [r2, #16]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68d2      	ldr	r2, [r2, #12]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6951      	ldr	r1, [r2, #20]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6992      	ldr	r2, [r2, #24]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	f042 0201 	orr.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	431bde83 	.word	0x431bde83
 8000d98:	000186a0 	.word	0x000186a0
 8000d9c:	10624dd3 	.word	0x10624dd3

08000da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e0ca      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000db4:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <HAL_RCC_ClockConfig+0x1b4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 020f 	and.w	r2, r3, #15
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d20c      	bcs.n	8000ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc2:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <HAL_RCC_ClockConfig+0x1b4>)
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dca:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <HAL_RCC_ClockConfig+0x1b4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 020f 	and.w	r2, r3, #15
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d001      	beq.n	8000ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e0b6      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d020      	beq.n	8000e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d005      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000df4:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000df6:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e0c:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e0e:	4b52      	ldr	r3, [pc, #328]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e18:	494f      	ldr	r1, [pc, #316]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e1a:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d044      	beq.n	8000ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d107      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d119      	bne.n	8000e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e07d      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d003      	beq.n	8000e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d107      	bne.n	8000e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e06d      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e065      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e7e:	4936      	ldr	r1, [pc, #216]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f023 0203 	bic.w	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e90:	f7ff fba6 	bl	80005e0 <HAL_GetTick>
 8000e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e96:	e00a      	b.n	8000eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e98:	f7ff fba2 	bl	80005e0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e04d      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 020c 	and.w	r2, r3, #12
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d1eb      	bne.n	8000e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <HAL_RCC_ClockConfig+0x1b4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 020f 	and.w	r2, r3, #15
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d90c      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <HAL_RCC_ClockConfig+0x1b4>)
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_RCC_ClockConfig+0x1b4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 020f 	and.w	r2, r3, #15
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e030      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d008      	beq.n	8000f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef4:	4918      	ldr	r1, [pc, #96]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d009      	beq.n	8000f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f12:	4911      	ldr	r1, [pc, #68]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f26:	f000 fb7b 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_RCC_ClockConfig+0x1b8>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_RCC_ClockConfig+0x1bc>)
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_RCC_ClockConfig+0x1c0>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fb08 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	080042cc 	.word	0x080042cc
 8000f60:	20000014 	.word	0x20000014

08000f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000014 	.word	0x20000014

08000f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f80:	f7ff fff0 	bl	8000f64 <HAL_RCC_GetHCLKFreq>
 8000f84:	4601      	mov	r1, r0
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	0a9b      	lsrs	r3, r3, #10
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f92:	5cd3      	ldrb	r3, [r2, r3]
 8000f94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	080042dc 	.word	0x080042dc

08000fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fa8:	f7ff ffdc 	bl	8000f64 <HAL_RCC_GetHCLKFreq>
 8000fac:	4601      	mov	r1, r0
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	0b5b      	lsrs	r3, r3, #13
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	080042dc 	.word	0x080042dc

08000fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d010      	beq.n	8001026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001004:	496f      	ldr	r1, [pc, #444]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001006:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100c:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001014:	4313      	orrs	r3, r2
 8001016:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001022:	2301      	movs	r3, #1
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d010      	beq.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001032:	4964      	ldr	r1, [pc, #400]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001034:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103a:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001042:	4313      	orrs	r3, r2
 8001044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d017      	beq.n	8001090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001060:	4958      	ldr	r1, [pc, #352]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001062:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4313      	orrs	r3, r2
 8001072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800107e:	d101      	bne.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001080:	2301      	movs	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800108c:	2301      	movs	r3, #1
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b00      	cmp	r3, #0
 800109a:	d017      	beq.n	80010cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800109c:	4949      	ldr	r1, [pc, #292]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	4313      	orrs	r3, r2
 80010ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ba:	d101      	bne.n	80010c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 808a 	beq.w	80011ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4a39      	ldr	r2, [pc, #228]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80010f6:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001102:	f7ff fa6d 	bl	80005e0 <HAL_GetTick>
 8001106:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001108:	e008      	b.n	800111c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800110a:	f7ff fa69 	bl	80005e0 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e278      	b.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800112a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001130:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d02f      	beq.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	429a      	cmp	r2, r3
 8001144:	d028      	beq.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800114e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d014      	beq.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fa37 	bl	80005e0 <HAL_GetTick>
 8001172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001176:	f7ff fa33 	bl	80005e0 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f241 3288 	movw	r2, #5000	; 0x1388
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e240      	b.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0ee      	beq.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011a4:	d114      	bne.n	80011d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80011a6:	4907      	ldr	r1, [pc, #28]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80011b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011bc:	4313      	orrs	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
 80011c0:	e00c      	b.n	80011dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000
 80011cc:	42470e40 	.word	0x42470e40
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011d2:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80011da:	6093      	str	r3, [r2, #8]
 80011dc:	4947      	ldr	r1, [pc, #284]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ea:	4313      	orrs	r3, r2
 80011ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80011fa:	4a41      	ldr	r2, [pc, #260]	; (8001300 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001202:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001210:	493a      	ldr	r1, [pc, #232]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001218:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	4313      	orrs	r3, r2
 8001222:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001232:	4932      	ldr	r1, [pc, #200]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001242:	4313      	orrs	r3, r2
 8001244:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d011      	beq.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001254:	4929      	ldr	r1, [pc, #164]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001264:	4313      	orrs	r3, r2
 8001266:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001272:	d101      	bne.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001274:	2301      	movs	r3, #1
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00a      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001284:	491d      	ldr	r1, [pc, #116]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	4313      	orrs	r3, r2
 8001296:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d011      	beq.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80012a6:	4915      	ldr	r1, [pc, #84]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012c4:	d101      	bne.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d005      	beq.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012d8:	f040 80ff 	bne.w	80014da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80012e2:	f7ff f97d 	bl	80005e0 <HAL_GetTick>
 80012e6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012e8:	e00e      	b.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80012ea:	f7ff f979 	bl	80005e0 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d907      	bls.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e188      	b.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80012fc:	40023800 	.word	0x40023800
 8001300:	424711e0 	.word	0x424711e0
 8001304:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1ea      	bne.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001330:	2b00      	cmp	r3, #0
 8001332:	d028      	beq.n	8001386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d124      	bne.n	8001386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800133c:	4b71      	ldr	r3, [pc, #452]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800133e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	3301      	adds	r3, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001354:	0e1b      	lsrs	r3, r3, #24
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800135c:	4969      	ldr	r1, [pc, #420]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	019b      	lsls	r3, r3, #6
 8001368:	431a      	orrs	r2, r3
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	3b01      	subs	r3, #1
 8001370:	041b      	lsls	r3, r3, #16
 8001372:	431a      	orrs	r2, r3
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	061b      	lsls	r3, r3, #24
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	071b      	lsls	r3, r3, #28
 8001380:	4313      	orrs	r3, r2
 8001382:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800139a:	d00a      	beq.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d035      	beq.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013b0:	d130      	bne.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013b2:	4b54      	ldr	r3, [pc, #336]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013b8:	0c1b      	lsrs	r3, r3, #16
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	3301      	adds	r3, #1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013c4:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ca:	0f1b      	lsrs	r3, r3, #28
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80013d2:	494c      	ldr	r1, [pc, #304]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	019b      	lsls	r3, r3, #6
 80013de:	431a      	orrs	r2, r3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	3b01      	subs	r3, #1
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	061b      	lsls	r3, r3, #24
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	071b      	lsls	r3, r3, #28
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80013fc:	4941      	ldr	r1, [pc, #260]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001404:	f023 021f 	bic.w	r2, r3, #31
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	3b01      	subs	r3, #1
 800140e:	4313      	orrs	r3, r2
 8001410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d029      	beq.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001428:	d124      	bne.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800142c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	3301      	adds	r3, #1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800143c:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800143e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001442:	0f1b      	lsrs	r3, r3, #28
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800144a:	492e      	ldr	r1, [pc, #184]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	061b      	lsls	r3, r3, #24
 8001468:	431a      	orrs	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	071b      	lsls	r3, r3, #28
 800146e:	4313      	orrs	r3, r2
 8001470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147c:	2b00      	cmp	r3, #0
 800147e:	d016      	beq.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001480:	4920      	ldr	r1, [pc, #128]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	019b      	lsls	r3, r3, #6
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	3b01      	subs	r3, #1
 8001496:	041b      	lsls	r3, r3, #16
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	071b      	lsls	r3, r3, #28
 80014a8:	4313      	orrs	r3, r2
 80014aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b4:	f7ff f894 	bl	80005e0 <HAL_GetTick>
 80014b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014bc:	f7ff f890 	bl	80005e0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e09f      	b.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	2b01      	cmp	r3, #1
 80014de:	f040 8095 	bne.w	800160c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff f87a 	bl	80005e0 <HAL_GetTick>
 80014ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014ee:	e00f      	b.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80014f0:	f7ff f876 	bl	80005e0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d908      	bls.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e085      	b.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	42470068 	.word	0x42470068
 800150c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001510:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800151c:	d0e8      	beq.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800153a:	2b00      	cmp	r3, #0
 800153c:	d02b      	beq.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001542:	2b00      	cmp	r3, #0
 8001544:	d127      	bne.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	3301      	adds	r3, #1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001558:	492f      	ldr	r1, [pc, #188]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	431a      	orrs	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	3b01      	subs	r3, #1
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	4313      	orrs	r3, r2
 8001578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800157c:	4926      	ldr	r1, [pc, #152]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001584:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	3b01      	subs	r3, #1
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4313      	orrs	r3, r2
 8001592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01d      	beq.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x612>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015aa:	d118      	bne.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	0e1b      	lsrs	r3, r3, #24
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015ba:	4917      	ldr	r1, [pc, #92]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	4313      	orrs	r3, r2
 80015da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015e4:	f7fe fffc 	bl	80005e0 <HAL_GetTick>
 80015e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80015ec:	f7fe fff8 	bl	80005e0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e007      	b.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800160a:	d1ef      	bne.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	42470070 	.word	0x42470070

08001620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001624:	b0a1      	sub	sp, #132	; 0x84
 8001626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163c:	4ba0      	ldr	r3, [pc, #640]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b0c      	cmp	r3, #12
 8001646:	f200 8193 	bhi.w	8001970 <HAL_RCC_GetSysClockFreq+0x350>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <HAL_RCC_GetSysClockFreq+0x30>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	08001685 	.word	0x08001685
 8001654:	08001971 	.word	0x08001971
 8001658:	08001971 	.word	0x08001971
 800165c:	08001971 	.word	0x08001971
 8001660:	0800168b 	.word	0x0800168b
 8001664:	08001971 	.word	0x08001971
 8001668:	08001971 	.word	0x08001971
 800166c:	08001971 	.word	0x08001971
 8001670:	08001691 	.word	0x08001691
 8001674:	08001971 	.word	0x08001971
 8001678:	08001971 	.word	0x08001971
 800167c:	08001971 	.word	0x08001971
 8001680:	0800180d 	.word	0x0800180d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b8f      	ldr	r3, [pc, #572]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001686:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001688:	e175      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168a:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x2a8>)
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800168e:	e172      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001690:	4b8b      	ldr	r3, [pc, #556]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001698:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169a:	4b89      	ldr	r3, [pc, #548]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d056      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a6:	4b86      	ldr	r3, [pc, #536]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	f04f 0400 	mov.w	r4, #0
 80016b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	ea01 0103 	and.w	r1, r1, r3
 80016bc:	ea02 0204 	and.w	r2, r2, r4
 80016c0:	460b      	mov	r3, r1
 80016c2:	4614      	mov	r4, r2
 80016c4:	0160      	lsls	r0, r4, #5
 80016c6:	6678      	str	r0, [r7, #100]	; 0x64
 80016c8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016ca:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80016ce:	6678      	str	r0, [r7, #100]	; 0x64
 80016d0:	015b      	lsls	r3, r3, #5
 80016d2:	663b      	str	r3, [r7, #96]	; 0x60
 80016d4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80016d8:	1a5b      	subs	r3, r3, r1
 80016da:	eb64 0402 	sbc.w	r4, r4, r2
 80016de:	01a0      	lsls	r0, r4, #6
 80016e0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016e4:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80016e8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016ea:	0198      	lsls	r0, r3, #6
 80016ec:	65b8      	str	r0, [r7, #88]	; 0x58
 80016ee:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80016f2:	1aed      	subs	r5, r5, r3
 80016f4:	eb66 0604 	sbc.w	r6, r6, r4
 80016f8:	4633      	mov	r3, r6
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
 80016fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001700:	4628      	mov	r0, r5
 8001702:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001706:	657b      	str	r3, [r7, #84]	; 0x54
 8001708:	462b      	mov	r3, r5
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	653b      	str	r3, [r7, #80]	; 0x50
 800170e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001712:	461d      	mov	r5, r3
 8001714:	4626      	mov	r6, r4
 8001716:	186b      	adds	r3, r5, r1
 8001718:	eb46 0402 	adc.w	r4, r6, r2
 800171c:	4618      	mov	r0, r3
 800171e:	4621      	mov	r1, r4
 8001720:	460b      	mov	r3, r1
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001728:	4602      	mov	r2, r0
 800172a:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001730:	4603      	mov	r3, r0
 8001732:	025b      	lsls	r3, r3, #9
 8001734:	64bb      	str	r3, [r7, #72]	; 0x48
 8001736:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800173a:	4618      	mov	r0, r3
 800173c:	4621      	mov	r1, r4
 800173e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	f7fe fd5c 	bl	8000204 <__aeabi_uldivmod>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001752:	e04d      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001754:	4b5a      	ldr	r3, [pc, #360]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	f04f 0400 	mov.w	r4, #0
 800175e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	ea01 0103 	and.w	r1, r1, r3
 800176a:	ea02 0204 	and.w	r2, r2, r4
 800176e:	460b      	mov	r3, r1
 8001770:	4614      	mov	r4, r2
 8001772:	0160      	lsls	r0, r4, #5
 8001774:	6478      	str	r0, [r7, #68]	; 0x44
 8001776:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001778:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800177c:	6478      	str	r0, [r7, #68]	; 0x44
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	643b      	str	r3, [r7, #64]	; 0x40
 8001782:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001786:	1a5b      	subs	r3, r3, r1
 8001788:	eb64 0402 	sbc.w	r4, r4, r2
 800178c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001790:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001794:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001798:	ebba 0a03 	subs.w	sl, sl, r3
 800179c:	eb6b 0b04 	sbc.w	fp, fp, r4
 80017a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ae:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b4:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80017b8:	eb1a 0a01 	adds.w	sl, sl, r1
 80017bc:	eb4b 0b02 	adc.w	fp, fp, r2
 80017c0:	ea4f 238b 	mov.w	r3, fp, lsl #10
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
 80017ce:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
 80017d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80017d8:	4650      	mov	r0, sl
 80017da:	4659      	mov	r1, fp
 80017dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017de:	f04f 0400 	mov.w	r4, #0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4623      	mov	r3, r4
 80017e6:	f7fe fd0d 	bl	8000204 <__aeabi_uldivmod>
 80017ea:	4603      	mov	r3, r0
 80017ec:	460c      	mov	r4, r1
 80017ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001800:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800180a:	e0b4      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d054      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	ea01 0103 	and.w	r1, r1, r3
 8001838:	ea02 0204 	and.w	r2, r2, r4
 800183c:	460b      	mov	r3, r1
 800183e:	4614      	mov	r4, r2
 8001840:	0160      	lsls	r0, r4, #5
 8001842:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001846:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800184a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001850:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001854:	1a5b      	subs	r3, r3, r1
 8001856:	eb64 0402 	sbc.w	r4, r4, r2
 800185a:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800185e:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001862:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001866:	ebb8 0803 	subs.w	r8, r8, r3
 800186a:	eb69 0904 	sbc.w	r9, r9, r4
 800186e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
 800187c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001886:	eb18 0801 	adds.w	r8, r8, r1
 800188a:	eb49 0902 	adc.w	r9, r9, r2
 800188e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018a6:	4640      	mov	r0, r8
 80018a8:	4649      	mov	r1, r9
 80018aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ac:	f04f 0400 	mov.w	r4, #0
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	f7fe fca6 	bl	8000204 <__aeabi_uldivmod>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018be:	e04b      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x338>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400
 80018c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_RCC_GetSysClockFreq+0x364>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	f04f 0400 	mov.w	r4, #0
 80018d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	ea01 0103 	and.w	r1, r1, r3
 80018e2:	ea02 0204 	and.w	r2, r2, r4
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	0160      	lsls	r0, r4, #5
 80018ec:	6178      	str	r0, [r7, #20]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80018f4:	6178      	str	r0, [r7, #20]
 80018f6:	015b      	lsls	r3, r3, #5
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	eb64 0402 	sbc.w	r4, r4, r2
 8001904:	01a6      	lsls	r6, r4, #6
 8001906:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800190a:	019d      	lsls	r5, r3, #6
 800190c:	1aed      	subs	r5, r5, r3
 800190e:	eb66 0604 	sbc.w	r6, r6, r4
 8001912:	00f3      	lsls	r3, r6, #3
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	00eb      	lsls	r3, r5, #3
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001926:	186d      	adds	r5, r5, r1
 8001928:	eb46 0602 	adc.w	r6, r6, r2
 800192c:	02b3      	lsls	r3, r6, #10
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	02ab      	lsls	r3, r5, #10
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001940:	4628      	mov	r0, r5
 8001942:	4631      	mov	r1, r6
 8001944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001946:	f04f 0400 	mov.w	r4, #0
 800194a:	461a      	mov	r2, r3
 800194c:	4623      	mov	r3, r4
 800194e:	f7fe fc59 	bl	8000204 <__aeabi_uldivmod>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_RCC_GetSysClockFreq+0x364>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0f1b      	lsrs	r3, r3, #28
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001964:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetSysClockFreq+0x368>)
 8001972:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001978:	4618      	mov	r0, r3
 800197a:	3784      	adds	r7, #132	; 0x84
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400

0800198c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8083 	beq.w	8001aac <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019a6:	4b95      	ldr	r3, [pc, #596]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d019      	beq.n	80019e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019b2:	4b92      	ldr	r3, [pc, #584]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019be:	4b8f      	ldr	r3, [pc, #572]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019cc:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d112      	bne.n	80019fe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d8:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d05b      	beq.n	8001aaa <HAL_RCC_OscConfig+0x11e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d157      	bne.n	8001aaa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e216      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x8a>
 8001a08:	4a7c      	ldr	r2, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e01d      	b.n	8001a52 <HAL_RCC_OscConfig+0xc6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0xae>
 8001a20:	4a76      	ldr	r2, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0xc6>
 8001a3a:	4a70      	ldr	r2, [pc, #448]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4a6d      	ldr	r2, [pc, #436]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a48:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d013      	beq.n	8001a82 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7fe fdc1 	bl	80005e0 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a62:	f7fe fdbd 	bl	80005e0 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	; 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1db      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0xd6>
 8001a80:	e014      	b.n	8001aac <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7fe fdad 	bl	80005e0 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8a:	f7fe fda9 	bl	80005e0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	; 0x64
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e1c7      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0xfe>
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d06f      	beq.n	8001b98 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d017      	beq.n	8001af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001adc:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	d11c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae8:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d116      	bne.n	8001b22 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af4:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_OscConfig+0x180>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e18f      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	493b      	ldr	r1, [pc, #236]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b20:	e03a      	b.n	8001b98 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d020      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7fe fd56 	bl	80005e0 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b38:	f7fe fd52 	bl	80005e0 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e170      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
 8001b6a:	e015      	b.n	8001b98 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7fe fd35 	bl	80005e0 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7fe fd31 	bl	80005e0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e14f      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d037      	beq.n	8001c14 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d016      	beq.n	8001bda <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x278>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7fe fd15 	bl	80005e0 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7fe fd11 	bl	80005e0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e12f      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x22e>
 8001bd8:	e01c      	b.n	8001c14 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_RCC_OscConfig+0x278>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7fe fcfe 	bl	80005e0 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be6:	e00f      	b.n	8001c08 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be8:	f7fe fcfa 	bl	80005e0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d908      	bls.n	8001c08 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e118      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	42470000 	.word	0x42470000
 8001c04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e9      	bne.n	8001be8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8097 	beq.w	8001d50 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b83      	ldr	r3, [pc, #524]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4a7f      	ldr	r2, [pc, #508]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001c38:	4b7e      	ldr	r3, [pc, #504]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b7c      	ldr	r3, [pc, #496]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d118      	bne.n	8001c90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4a76      	ldr	r2, [pc, #472]	; (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe fcb9 	bl	80005e0 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7fe fcb5 	bl	80005e0 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0d3      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b6c      	ldr	r3, [pc, #432]	; (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x31a>
 8001c98:	4a66      	ldr	r2, [pc, #408]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001c9a:	4b66      	ldr	r3, [pc, #408]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	e01c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x354>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x33c>
 8001cae:	4a61      	ldr	r2, [pc, #388]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001cb0:	4b60      	ldr	r3, [pc, #384]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cba:	4a5e      	ldr	r2, [pc, #376]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x354>
 8001cc8:	4a5a      	ldr	r2, [pc, #360]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001cca:	4b5a      	ldr	r3, [pc, #360]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001cd6:	4b57      	ldr	r3, [pc, #348]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f023 0304 	bic.w	r3, r3, #4
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d015      	beq.n	8001d14 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7fe fc7a 	bl	80005e0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7fe fc76 	bl	80005e0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e092      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ee      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x364>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe fc64 	bl	80005e0 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7fe fc60 	bl	80005e0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e07c      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ee      	bne.n	8001d1c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d068      	beq.n	8001e2a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d060      	beq.n	8001e26 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d145      	bne.n	8001df8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCC_OscConfig+0x4b0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7fe fc35 	bl	80005e0 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe fc31 	bl	80005e0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e04f      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	4926      	ldr	r1, [pc, #152]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	019b      	lsls	r3, r3, #6
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	3b01      	subs	r3, #1
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	071b      	lsls	r3, r3, #28
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_RCC_OscConfig+0x4b0>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fc06 	bl	80005e0 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fc02 	bl	80005e0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e020      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x44c>
 8001df6:	e018      	b.n	8001e2a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_RCC_OscConfig+0x4b0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fbef 	bl	80005e0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe fbeb 	bl	80005e0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e009      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_OscConfig+0x4a8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x47a>
 8001e24:	e001      	b.n	8001e2a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	42470060 	.word	0x42470060

08001e40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e083      	b.n	8001f5a <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7f5b      	ldrb	r3, [r3, #29]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f001 ffa0 	bl	8003da8 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	22ca      	movs	r2, #202	; 0xca
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2253      	movs	r2, #83	; 0x53
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fba8 	bl	80025d4 <RTC_EnterInitMode>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	22ff      	movs	r2, #255	; 0xff
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2204      	movs	r2, #4
 8001e96:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e05e      	b.n	8001f5a <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	6891      	ldr	r1, [r2, #8]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6850      	ldr	r0, [r2, #4]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6912      	ldr	r2, [r2, #16]
 8001ec2:	4310      	orrs	r0, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6952      	ldr	r2, [r2, #20]
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68d2      	ldr	r2, [r2, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6911      	ldr	r1, [r2, #16]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	68d2      	ldr	r2, [r2, #12]
 8001ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fb3a 	bl	8002584 <HAL_RTC_WaitForSynchro>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2204      	movs	r2, #4
 8001f22:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e018      	b.n	8001f5a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6992      	ldr	r2, [r2, #24]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	22ff      	movs	r2, #255	; 0xff
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f62:	b590      	push	{r4, r7, lr}
 8001f64:	b087      	sub	sp, #28
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	7f1b      	ldrb	r3, [r3, #28]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_RTC_SetTime+0x1c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0b2      	b.n	80020e4 <HAL_RTC_SetTime+0x182>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2202      	movs	r2, #2
 8001f88:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d126      	bne.n	8001fde <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fb3f 	bl	800262c <RTC_ByteToBcd2>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fb38 	bl	800262c <RTC_ByteToBcd2>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fc0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb30 	bl	800262c <RTC_ByteToBcd2>
 8001fcc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	78db      	ldrb	r3, [r3, #3]
 8001fd6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e020      	b.n	8002020 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fb39 	bl	8002668 <RTC_Bcd2ToByte>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e002      	b.n	8002002 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800200e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002014:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	78db      	ldrb	r3, [r3, #3]
 800201a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	22ca      	movs	r2, #202	; 0xca
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2253      	movs	r2, #83	; 0x53
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 facf 	bl	80025d4 <RTC_EnterInitMode>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	22ff      	movs	r2, #255	; 0xff
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2204      	movs	r2, #4
 8002048:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e047      	b.n	80020e4 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800205e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002062:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	6892      	ldr	r2, [r2, #8]
 800206e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002072:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	6891      	ldr	r1, [r2, #8]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	68d0      	ldr	r0, [r2, #12]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	6912      	ldr	r2, [r2, #16]
 8002086:	4302      	orrs	r2, r0
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209a:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d111      	bne.n	80020ce <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fa6a 	bl	8002584 <HAL_RTC_WaitForSynchro>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2204      	movs	r2, #4
 80020c2:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00a      	b.n	80020e4 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 80020e2:	2300      	movs	r3, #0
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd90      	pop	{r4, r7, pc}

080020ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	7f1b      	ldrb	r3, [r3, #28]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_RTC_SetDate+0x1c>
 8002104:	2302      	movs	r3, #2
 8002106:	e094      	b.n	8002232 <HAL_RTC_SetDate+0x146>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2202      	movs	r2, #2
 8002112:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <HAL_RTC_SetDate+0x4c>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	f023 0310 	bic.w	r3, r3, #16
 800212e:	b2db      	uxtb	r3, r3
 8002130:	330a      	adds	r3, #10
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11c      	bne.n	8002178 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fa72 	bl	800262c <RTC_ByteToBcd2>
 8002148:	4603      	mov	r3, r0
 800214a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fa6b 	bl	800262c <RTC_ByteToBcd2>
 8002156:	4603      	mov	r3, r0
 8002158:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800215a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	789b      	ldrb	r3, [r3, #2]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fa63 	bl	800262c <RTC_ByteToBcd2>
 8002166:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002168:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e00e      	b.n	8002196 <HAL_RTC_SetDate+0xaa>
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(datetmpreg));
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002184:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800218a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	22ca      	movs	r2, #202	; 0xca
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2253      	movs	r2, #83	; 0x53
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa14 	bl	80025d4 <RTC_EnterInitMode>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	22ff      	movs	r2, #255	; 0xff
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2204      	movs	r2, #4
 80021be:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e033      	b.n	8002232 <HAL_RTC_SetDate+0x146>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021d8:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	68d2      	ldr	r2, [r2, #12]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e8:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f9c3 	bl	8002584 <HAL_RTC_WaitForSynchro>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_RTC_SetDate+0x130>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2204      	movs	r2, #4
 8002210:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00a      	b.n	8002232 <HAL_RTC_SetDate+0x146>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	22ff      	movs	r2, #255	; 0xff
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 8002230:	2300      	movs	r3, #0
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
	...

0800223c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002250:	4ba1      	ldr	r3, [pc, #644]	; (80024d8 <HAL_RTC_SetAlarm_IT+0x29c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4aa1      	ldr	r2, [pc, #644]	; (80024dc <HAL_RTC_SetAlarm_IT+0x2a0>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	7f1b      	ldrb	r3, [r3, #28]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_RTC_SetAlarm_IT+0x36>
 800226e:	2302      	movs	r3, #2
 8002270:	e12e      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x294>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2202      	movs	r2, #2
 800227c:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d137      	bne.n	80022f4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f9c5 	bl	800262c <RTC_ByteToBcd2>
 80022a2:	4603      	mov	r3, r0
 80022a4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f9be 	bl	800262c <RTC_ByteToBcd2>
 80022b0:	4603      	mov	r3, r0
 80022b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022b4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	789b      	ldrb	r3, [r3, #2]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f9b6 	bl	800262c <RTC_ByteToBcd2>
 80022c0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022c2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	78db      	ldrb	r3, [r3, #3]
 80022ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022cc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f9a8 	bl	800262c <RTC_ByteToBcd2>
 80022dc:	4603      	mov	r3, r0
 80022de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e040      	b.n	8002376 <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f9ae 	bl	8002668 <RTC_Bcd2ToByte>
 800230c:	4603      	mov	r3, r0
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	e002      	b.n	8002318 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d108      	bne.n	8002332 <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f99e 	bl	8002668 <RTC_Bcd2ToByte>
 800232c:	4603      	mov	r3, r0
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	e007      	b.n	8002342 <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f995 	bl	8002668 <RTC_Bcd2ToByte>
 800233e:	4603      	mov	r3, r0
 8002340:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800234e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002354:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	78db      	ldrb	r3, [r3, #3]
 800235a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800235c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002364:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002366:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800236c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002372:	4313      	orrs	r3, r2
 8002374:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	22ca      	movs	r2, #202	; 0xca
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2253      	movs	r2, #83	; 0x53
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d141      	bne.n	8002420 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	6892      	ldr	r2, [r2, #8]
 80023a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023aa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	68d2      	ldr	r2, [r2, #12]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80023bc:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	617a      	str	r2, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	22ff      	movs	r2, #255	; 0xff
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2203      	movs	r2, #3
 80023d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e077      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0e7      	beq.n	80023be <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	6892      	ldr	r2, [r2, #8]
 8002408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	e040      	b.n	80024a2 <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800242e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	68d2      	ldr	r2, [r2, #12]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002440:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	617a      	str	r2, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2203      	movs	r2, #3
 8002458:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e035      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0e7      	beq.n	8002442 <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	6892      	ldr	r2, [r2, #8]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	6892      	ldr	r2, [r2, #8]
 800249c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80024a2:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3724      	adds	r7, #36	; 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	20000014 	.word	0x20000014
 80024dc:	10624dd3 	.word	0x10624dd3
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f831 	bl	8002570 <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	68d2      	ldr	r2, [r2, #12]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800251e:	60da      	str	r2, [r3, #12]
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00b      	beq.n	8002554 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f8b1 	bl	80026a4 <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	68d2      	ldr	r2, [r2, #12]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002552:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RTC_AlarmIRQHandler+0x88>)
 8002556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800255a:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	775a      	strb	r2, [r3, #29]
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800259e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025a0:	f7fe f81e 	bl	80005e0 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025a6:	e009      	b.n	80025bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025a8:	f7fe f81a 	bl	80005e0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b6:	d901      	bls.n	80025bc <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e007      	b.n	80025cc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0ee      	beq.n	80025a8 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d119      	bne.n	8002622 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025f8:	f7fd fff2 	bl	80005e0 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025fe:	e009      	b.n	8002614 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002600:	f7fd ffee 	bl	80005e0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260e:	d901      	bls.n	8002614 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e007      	b.n	8002624 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ee      	beq.n	8002600 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 800263a:	e005      	b.n	8002648 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3301      	adds	r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	3b0a      	subs	r3, #10
 8002646:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	2b09      	cmp	r3, #9
 800264c:	d8f6      	bhi.n	800263c <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	b2da      	uxtb	r2, r3
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	4313      	orrs	r3, r2
 800265a:	b2db      	uxtb	r3, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	b2da      	uxtb	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4413      	add	r3, r2
 8002696:	b2db      	uxtb	r3, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e01d      	b.n	8002706 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f001 fb7e 	bl	8003de0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 f904 	bl	8002904 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}  
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa10 	bl	8002b48 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_TIM_PWM_Start+0x60>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_TIM_PWM_Start+0x2c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_TIM_PWM_Start+0x64>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_TIM_PWM_Start+0x30>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_TIM_PWM_Start+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
} 
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40010000 	.word	0x40010000
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800278e:	2302      	movs	r3, #2
 8002790:	e0b4      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2202      	movs	r2, #2
 800279e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	f200 809f 	bhi.w	80028e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	080028e9 	.word	0x080028e9
 80027b8:	080028e9 	.word	0x080028e9
 80027bc:	080028e9 	.word	0x080028e9
 80027c0:	08002825 	.word	0x08002825
 80027c4:	080028e9 	.word	0x080028e9
 80027c8:	080028e9 	.word	0x080028e9
 80027cc:	080028e9 	.word	0x080028e9
 80027d0:	08002867 	.word	0x08002867
 80027d4:	080028e9 	.word	0x080028e9
 80027d8:	080028e9 	.word	0x080028e9
 80027dc:	080028e9 	.word	0x080028e9
 80027e0:	080028a7 	.word	0x080028a7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f9d0 	bl	8002b90 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	6992      	ldr	r2, [r2, #24]
 80027fa:	f042 0208 	orr.w	r2, r2, #8
 80027fe:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	6992      	ldr	r2, [r2, #24]
 800280a:	f022 0204 	bic.w	r2, r2, #4
 800280e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	6991      	ldr	r1, [r2, #24]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	6912      	ldr	r2, [r2, #16]
 800281e:	430a      	orrs	r2, r1
 8002820:	619a      	str	r2, [r3, #24]
    }
    break;
 8002822:	e062      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f914 	bl	8002a58 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	6992      	ldr	r2, [r2, #24]
 800283a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6992      	ldr	r2, [r2, #24]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	6991      	ldr	r1, [r2, #24]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	6912      	ldr	r2, [r2, #16]
 800285e:	0212      	lsls	r2, r2, #8
 8002860:	430a      	orrs	r2, r1
 8002862:	619a      	str	r2, [r3, #24]
    }
    break;
 8002864:	e041      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fa03 	bl	8002c78 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	69d2      	ldr	r2, [r2, #28]
 800287c:	f042 0208 	orr.w	r2, r2, #8
 8002880:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	69d2      	ldr	r2, [r2, #28]
 800288c:	f022 0204 	bic.w	r2, r2, #4
 8002890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	69d1      	ldr	r1, [r2, #28]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	6912      	ldr	r2, [r2, #16]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	61da      	str	r2, [r3, #28]
    }
    break;
 80028a4:	e021      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fa5b 	bl	8002d68 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	69d2      	ldr	r2, [r2, #28]
 80028bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	69d2      	ldr	r2, [r2, #28]
 80028cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	69d1      	ldr	r1, [r2, #28]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	6912      	ldr	r2, [r2, #16]
 80028e0:	0212      	lsls	r2, r2, #8
 80028e2:	430a      	orrs	r2, r1
 80028e4:	61da      	str	r2, [r3, #28]
    }
    break;
 80028e6:	e000      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80028e8:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <TIM_Base_SetConfig+0x128>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <TIM_Base_SetConfig+0x44>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d00f      	beq.n	8002948 <TIM_Base_SetConfig+0x44>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <TIM_Base_SetConfig+0x12c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00b      	beq.n	8002948 <TIM_Base_SetConfig+0x44>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <TIM_Base_SetConfig+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <TIM_Base_SetConfig+0x44>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <TIM_Base_SetConfig+0x134>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_Base_SetConfig+0x44>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3e      	ldr	r2, [pc, #248]	; (8002a3c <TIM_Base_SetConfig+0x138>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <TIM_Base_SetConfig+0x48>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <TIM_Base_SetConfig+0x4a>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <TIM_Base_SetConfig+0x128>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d02b      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d027      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <TIM_Base_SetConfig+0x12c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d023      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a2d      	ldr	r2, [pc, #180]	; (8002a34 <TIM_Base_SetConfig+0x130>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01f      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <TIM_Base_SetConfig+0x134>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d01b      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <TIM_Base_SetConfig+0x138>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d017      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <TIM_Base_SetConfig+0x13c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <TIM_Base_SetConfig+0x140>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00f      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <TIM_Base_SetConfig+0x144>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <TIM_Base_SetConfig+0x148>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <TIM_Base_SetConfig+0x14c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <TIM_Base_SetConfig+0x150>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <TIM_Base_SetConfig+0xc4>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <TIM_Base_SetConfig+0xc6>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <TIM_Base_SetConfig+0x128>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_Base_SetConfig+0x102>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <TIM_Base_SetConfig+0x138>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <TIM_Base_SetConfig+0x106>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <TIM_Base_SetConfig+0x108>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40010400 	.word	0x40010400
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800
 8002a4c:	40001800 	.word	0x40001800
 8002a50:	40001c00 	.word	0x40001c00
 8002a54:	40002000 	.word	0x40002000

08002a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f023 0210 	bic.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f023 0320 	bic.w	r3, r3, #32
 8002aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <TIM_OC2_SetConfig+0xe8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_OC2_SetConfig+0x74>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <TIM_OC2_SetConfig+0xec>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <TIM_OC2_SetConfig+0x78>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <TIM_OC2_SetConfig+0x7a>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d021      	beq.n	8002b1a <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af0:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	621a      	str	r2, [r3, #32]
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40010400 	.word	0x40010400

08002b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0201 	bic.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f023 0302 	bic.w	r3, r3, #2
 8002be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <TIM_OC1_SetConfig+0xe0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_OC1_SetConfig+0x70>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <TIM_OC1_SetConfig+0xe4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <TIM_OC1_SetConfig+0x74>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <TIM_OC1_SetConfig+0x76>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01e      	beq.n	8002c48 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 0308 	bic.w	r3, r3, #8
 8002c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0304 	bic.w	r3, r3, #4
 8002c22:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
} 
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40010400 	.word	0x40010400

08002c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a20      	ldr	r2, [pc, #128]	; (8002d60 <TIM_OC3_SetConfig+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_OC3_SetConfig+0x72>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <TIM_OC3_SetConfig+0xec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <TIM_OC3_SetConfig+0x76>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <TIM_OC3_SetConfig+0x78>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d021      	beq.n	8002d38 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d0e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40010000 	.word	0x40010000
 8002d64:	40010400 	.word	0x40010400

08002d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002daa:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	031b      	lsls	r3, r3, #12
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <TIM_OC4_SetConfig+0xb8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_OC4_SetConfig+0x74>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <TIM_OC4_SetConfig+0xbc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <TIM_OC4_SetConfig+0x78>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <TIM_OC4_SetConfig+0x7a>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	019b      	lsls	r3, r3, #6
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	621a      	str	r2, [r3, #32]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e032      	b.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	6852      	ldr	r2, [r2, #4]
 8002e5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e5e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	6851      	ldr	r1, [r2, #4]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e80:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	6891      	ldr	r1, [r2, #8]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	6852      	ldr	r2, [r2, #4]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
} 
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e044      	b.n	8002f58 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e03f      	b.n	8002ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f001 f838 	bl	8004000 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	68d2      	ldr	r2, [r2, #12]
 8002fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f829 	bl	8003000 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6912      	ldr	r2, [r2, #16]
 8002fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	6952      	ldr	r2, [r2, #20]
 8002fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fcc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	68d2      	ldr	r2, [r2, #12]
 8002fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fdc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800303c:	f023 030c 	bic.w	r3, r3, #12
 8003040:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4313      	orrs	r3, r2
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003074:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	f040 80e4 	bne.w	800325c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4aab      	ldr	r2, [pc, #684]	; (8003348 <UART_SetConfig+0x348>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <UART_SetConfig+0xa8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4aaa      	ldr	r2, [pc, #680]	; (800334c <UART_SetConfig+0x34c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d16c      	bne.n	8003182 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	f7fd ff7a 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009a      	lsls	r2, r3, #2
 80030ba:	441a      	add	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	4aa2      	ldr	r2, [pc, #648]	; (8003350 <UART_SetConfig+0x350>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	011d      	lsls	r5, r3, #4
 80030d0:	f7fd ff68 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009a      	lsls	r2, r3, #2
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80030ea:	f7fd ff5b 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 80030ee:	4602      	mov	r2, r0
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	4a92      	ldr	r2, [pc, #584]	; (8003350 <UART_SetConfig+0x350>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2264      	movs	r2, #100	; 0x64
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	1af3      	subs	r3, r6, r3
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	3332      	adds	r3, #50	; 0x32
 8003118:	4a8d      	ldr	r2, [pc, #564]	; (8003350 <UART_SetConfig+0x350>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003126:	441d      	add	r5, r3
 8003128:	f7fd ff3c 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 800312c:	4602      	mov	r2, r0
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009a      	lsls	r2, r3, #2
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003142:	f7fd ff2f 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 8003146:	4602      	mov	r2, r0
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	4a7c      	ldr	r2, [pc, #496]	; (8003350 <UART_SetConfig+0x350>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2264      	movs	r2, #100	; 0x64
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	1af3      	subs	r3, r6, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	3332      	adds	r3, #50	; 0x32
 8003170:	4a77      	ldr	r2, [pc, #476]	; (8003350 <UART_SetConfig+0x350>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	442b      	add	r3, r5
 800317e:	60a3      	str	r3, [r4, #8]
 8003180:	e154      	b.n	800342c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681c      	ldr	r4, [r3, #0]
 8003186:	f7fd fef9 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 800318a:	4602      	mov	r2, r0
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	4a6b      	ldr	r2, [pc, #428]	; (8003350 <UART_SetConfig+0x350>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	011d      	lsls	r5, r3, #4
 80031aa:	f7fd fee7 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80031c4:	f7fd feda 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	441a      	add	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <UART_SetConfig+0x350>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	2264      	movs	r2, #100	; 0x64
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	1af3      	subs	r3, r6, r3
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	4a57      	ldr	r2, [pc, #348]	; (8003350 <UART_SetConfig+0x350>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003200:	441d      	add	r5, r3
 8003202:	f7fd febb 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 8003206:	4602      	mov	r2, r0
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fbb2 f6f3 	udiv	r6, r2, r3
 800321c:	f7fd feae 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 8003220:	4602      	mov	r2, r0
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009a      	lsls	r2, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	4a46      	ldr	r2, [pc, #280]	; (8003350 <UART_SetConfig+0x350>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	2264      	movs	r2, #100	; 0x64
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	1af3      	subs	r3, r6, r3
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	3332      	adds	r3, #50	; 0x32
 800324a:	4a41      	ldr	r2, [pc, #260]	; (8003350 <UART_SetConfig+0x350>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	442b      	add	r3, r5
 8003258:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800325a:	e0e7      	b.n	800342c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a39      	ldr	r2, [pc, #228]	; (8003348 <UART_SetConfig+0x348>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <UART_SetConfig+0x270>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a38      	ldr	r2, [pc, #224]	; (800334c <UART_SetConfig+0x34c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d171      	bne.n	8003354 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681c      	ldr	r4, [r3, #0]
 8003274:	f7fd fe96 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 8003278:	4602      	mov	r2, r0
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009a      	lsls	r2, r3, #2
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	4a30      	ldr	r2, [pc, #192]	; (8003350 <UART_SetConfig+0x350>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	011d      	lsls	r5, r3, #4
 8003298:	f7fd fe84 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 800329c:	4602      	mov	r2, r0
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	009a      	lsls	r2, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80032b2:	f7fd fe77 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009a      	lsls	r2, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	4a20      	ldr	r2, [pc, #128]	; (8003350 <UART_SetConfig+0x350>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2264      	movs	r2, #100	; 0x64
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	1af3      	subs	r3, r6, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <UART_SetConfig+0x350>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	441d      	add	r5, r3
 80032ee:	f7fd fe59 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009a      	lsls	r2, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fbb2 f6f3 	udiv	r6, r2, r3
 8003308:	f7fd fe4c 	bl	8000fa4 <HAL_RCC_GetPCLK2Freq>
 800330c:	4602      	mov	r2, r0
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009a      	lsls	r2, r3, #2
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <UART_SetConfig+0x350>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2264      	movs	r2, #100	; 0x64
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	1af3      	subs	r3, r6, r3
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	3332      	adds	r3, #50	; 0x32
 8003336:	4a06      	ldr	r2, [pc, #24]	; (8003350 <UART_SetConfig+0x350>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	442b      	add	r3, r5
 8003344:	60a3      	str	r3, [r4, #8]
 8003346:	e071      	b.n	800342c <UART_SetConfig+0x42c>
 8003348:	40011000 	.word	0x40011000
 800334c:	40011400 	.word	0x40011400
 8003350:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681c      	ldr	r4, [r3, #0]
 8003358:	f7fd fe10 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 800335c:	4602      	mov	r2, r0
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009a      	lsls	r2, r3, #2
 8003366:	441a      	add	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	4a30      	ldr	r2, [pc, #192]	; (8003434 <UART_SetConfig+0x434>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	011d      	lsls	r5, r3, #4
 800337c:	f7fd fdfe 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 8003380:	4602      	mov	r2, r0
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	441a      	add	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	fbb2 f6f3 	udiv	r6, r2, r3
 8003396:	f7fd fdf1 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 800339a:	4602      	mov	r2, r0
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009a      	lsls	r2, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	4a20      	ldr	r2, [pc, #128]	; (8003434 <UART_SetConfig+0x434>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2264      	movs	r2, #100	; 0x64
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	1af3      	subs	r3, r6, r3
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	3332      	adds	r3, #50	; 0x32
 80033c4:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <UART_SetConfig+0x434>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d0:	441d      	add	r5, r3
 80033d2:	f7fd fdd3 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80033ec:	f7fd fdc6 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <UART_SetConfig+0x434>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2264      	movs	r2, #100	; 0x64
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	1af3      	subs	r3, r6, r3
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a06      	ldr	r2, [pc, #24]	; (8003434 <UART_SetConfig+0x434>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	442b      	add	r3, r5
 8003428:	60a3      	str	r3, [r4, #8]
}
 800342a:	e7ff      	b.n	800342c <UART_SetConfig+0x42c>
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003434:	51eb851f 	.word	0x51eb851f

08003438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t testcounter = 32;
 800343e:	2320      	movs	r3, #32
 8003440:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003442:	f7fd f867 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003446:	f000 f867 	bl	8003518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800344a:	f000 fb7b 	bl	8003b44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800344e:	f000 fb4f 	bl	8003af0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003452:	f000 f8f1 	bl	8003638 <MX_I2C1_Init>
  MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 8003456:	2000      	movs	r0, #0
 8003458:	f000 fa62 	bl	8003920 <MX_TIM4_Init>
  MX_TIM3_Init(0);
 800345c:	2000      	movs	r0, #0
 800345e:	f000 fa01 	bl	8003864 <MX_TIM3_Init>
  MX_TIM8_Init(0);
 8003462:	2000      	movs	r0, #0
 8003464:	f000 faba 	bl	80039dc <MX_TIM8_Init>
  MX_TIM2_Init(0);
 8003468:	2000      	movs	r0, #0
 800346a:	f000 f99f 	bl	80037ac <MX_TIM2_Init>
  MX_RTC_Init();
 800346e:	f000 f911 	bl	8003694 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003472:	2201      	movs	r2, #1
 8003474:	2120      	movs	r1, #32
 8003476:	4822      	ldr	r0, [pc, #136]	; (8003500 <main+0xc8>)
 8003478:	f7fd fb74 	bl	8000b64 <HAL_GPIO_WritePin>
  previousA = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800347c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003480:	481f      	ldr	r0, [pc, #124]	; (8003500 <main+0xc8>)
 8003482:	f7fd fb57 	bl	8000b34 <HAL_GPIO_ReadPin>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <main+0xcc>)
 800348c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */
  //Set time, data and alarm
  	//1) Set time
  	myTime.Hours = 12;
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <main+0xd0>)
 8003490:	220c      	movs	r2, #12
 8003492:	701a      	strb	r2, [r3, #0]
  	myTime.Minutes = 59;
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <main+0xd0>)
 8003496:	223b      	movs	r2, #59	; 0x3b
 8003498:	705a      	strb	r2, [r3, #1]
  	myTime.Seconds = 45;
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <main+0xd0>)
 800349c:	222d      	movs	r2, #45	; 0x2d
 800349e:	709a      	strb	r2, [r3, #2]
  	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80034a0:	2200      	movs	r2, #0
 80034a2:	4919      	ldr	r1, [pc, #100]	; (8003508 <main+0xd0>)
 80034a4:	4819      	ldr	r0, [pc, #100]	; (800350c <main+0xd4>)
 80034a6:	f7fe fd5c 	bl	8001f62 <HAL_RTC_SetTime>
  	//2) Set date
  	myDate.Date = 6;
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <main+0xd8>)
 80034ac:	2206      	movs	r2, #6
 80034ae:	709a      	strb	r2, [r3, #2]
  	myDate.Month = RTC_MONTH_DECEMBER;
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <main+0xd8>)
 80034b2:	2212      	movs	r2, #18
 80034b4:	705a      	strb	r2, [r3, #1]
  	myDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80034b6:	4b16      	ldr	r3, [pc, #88]	; (8003510 <main+0xd8>)
 80034b8:	2204      	movs	r2, #4
 80034ba:	701a      	strb	r2, [r3, #0]
  	myDate.Year = 18;
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <main+0xd8>)
 80034be:	2212      	movs	r2, #18
 80034c0:	70da      	strb	r2, [r3, #3]
  	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 80034c2:	2200      	movs	r2, #0
 80034c4:	4912      	ldr	r1, [pc, #72]	; (8003510 <main+0xd8>)
 80034c6:	4811      	ldr	r0, [pc, #68]	; (800350c <main+0xd4>)
 80034c8:	f7fe fe10 	bl	80020ec <HAL_RTC_SetDate>
//	set_RGB(75,0,0);
//	HAL_Delay(1000);
//	set_RGB(100,0,0);
//	HAL_Delay(1000);

	switch (*pflag) {	 		// Interrupt triggers menu display and enables navigation
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <main+0xdc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d007      	beq.n	80034e6 <main+0xae>
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d009      	beq.n	80034ee <main+0xb6>
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10b      	bne.n	80034f6 <main+0xbe>
	case 1:
		// TODO start countdown LCD illuminance timer
		// TODO start menu navigation
		testcounter = testcounter + 4;
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	3304      	adds	r3, #4
 80034e2:	71fb      	strb	r3, [r7, #7]
		break;
 80034e4:	e007      	b.n	80034f6 <main+0xbe>
	case 2:
		// TODO start countdown LCD illuminance timer
		// TODO start menu navigation
		testcounter++;
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	3301      	adds	r3, #1
 80034ea:	71fb      	strb	r3, [r7, #7]
		break;
 80034ec:	e003      	b.n	80034f6 <main+0xbe>
	case 3:
		// TODO start countdown LCD illuminance timer
		// TODO start menu navigation
		testcounter--;
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	71fb      	strb	r3, [r7, #7]
		break;
 80034f4:	bf00      	nop

	}
	*pflag = 0;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <main+0xdc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
	switch (*pflag) {	 		// Interrupt triggers menu display and enables navigation
 80034fe:	e7e5      	b.n	80034cc <main+0x94>
 8003500:	40020000 	.word	0x40020000
 8003504:	20000158 	.word	0x20000158
 8003508:	2000003c 	.word	0x2000003c
 800350c:	20000160 	.word	0x20000160
 8003510:	2000015c 	.word	0x2000015c
 8003514:	20000008 	.word	0x20000008

08003518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0ac      	sub	sp, #176	; 0xb0
 800351c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800351e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003522:	2234      	movs	r2, #52	; 0x34
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 febc 	bl	80042a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800352c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	225c      	movs	r2, #92	; 0x5c
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fead 	bl	80042a4 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	4a38      	ldr	r2, [pc, #224]	; (8003630 <SystemClock_Config+0x118>)
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <SystemClock_Config+0x118>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <SystemClock_Config+0x118>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	4a32      	ldr	r2, [pc, #200]	; (8003634 <SystemClock_Config+0x11c>)
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <SystemClock_Config+0x11c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <SystemClock_Config+0x11c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003586:	2306      	movs	r3, #6
 8003588:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800358a:	2301      	movs	r3, #1
 800358c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003590:	2301      	movs	r3, #1
 8003592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003596:	2310      	movs	r3, #16
 8003598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800359c:	2302      	movs	r3, #2
 800359e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 80035a8:	2310      	movs	r3, #16
 80035aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80035ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80035b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80035b6:	2304      	movs	r3, #4
 80035b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035bc:	2302      	movs	r3, #2
 80035be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe f9dd 	bl	800198c <HAL_RCC_OscConfig>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80035d8:	f000 fb6e 	bl	8003cb8 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035dc:	230f      	movs	r3, #15
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035e0:	2302      	movs	r3, #2
 80035e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035e4:	2300      	movs	r3, #0
 80035e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ec:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ee:	2300      	movs	r3, #0
 80035f0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fbd1 	bl	8000da0 <HAL_RCC_ClockConfig>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8003604:	f000 fb58 	bl	8003cb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003608:	2320      	movs	r3, #32
 800360a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800360c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fcd8 	bl	8000fcc <HAL_RCCEx_PeriphCLKConfig>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8003622:	f000 fb49 	bl	8003cb8 <Error_Handler>
  }
}
 8003626:	bf00      	nop
 8003628:	37b0      	adds	r7, #176	; 0xb0
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40007000 	.word	0x40007000

08003638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <MX_I2C1_Init+0x50>)
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <MX_I2C1_Init+0x54>)
 8003640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <MX_I2C1_Init+0x50>)
 8003644:	4a12      	ldr	r2, [pc, #72]	; (8003690 <MX_I2C1_Init+0x58>)
 8003646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <MX_I2C1_Init+0x50>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <MX_I2C1_Init+0x50>)
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <MX_I2C1_Init+0x50>)
 8003656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800365a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <MX_I2C1_Init+0x50>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <MX_I2C1_Init+0x50>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <MX_I2C1_Init+0x50>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <MX_I2C1_Init+0x50>)
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003674:	4804      	ldr	r0, [pc, #16]	; (8003688 <MX_I2C1_Init+0x50>)
 8003676:	f7fd fab3 	bl	8000be0 <HAL_I2C_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003680:	f000 fb1a 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200000c8 	.word	0x200000c8
 800368c:	40005400 	.word	0x40005400
 8003690:	000186a0 	.word	0x000186a0

08003694 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b090      	sub	sp, #64	; 0x40
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800369a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036aa:	2300      	movs	r3, #0
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80036ae:	463b      	mov	r3, r7
 80036b0:	2228      	movs	r2, #40	; 0x28
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fdf5 	bl	80042a4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <MX_RTC_Init+0x110>)
 80036bc:	4a3a      	ldr	r2, [pc, #232]	; (80037a8 <MX_RTC_Init+0x114>)
 80036be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036c0:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <MX_RTC_Init+0x110>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036c6:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <MX_RTC_Init+0x110>)
 80036c8:	227f      	movs	r2, #127	; 0x7f
 80036ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <MX_RTC_Init+0x110>)
 80036ce:	22ff      	movs	r2, #255	; 0xff
 80036d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <MX_RTC_Init+0x110>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <MX_RTC_Init+0x110>)
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <MX_RTC_Init+0x110>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036e4:	482f      	ldr	r0, [pc, #188]	; (80037a4 <MX_RTC_Init+0x110>)
 80036e6:	f7fe fbab 	bl	8001e40 <HAL_RTC_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80036f0:	f000 fae2 	bl	8003cb8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003700:	2300      	movs	r3, #0
 8003702:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003706:	2300      	movs	r3, #0
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800370e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003712:	2201      	movs	r2, #1
 8003714:	4619      	mov	r1, r3
 8003716:	4823      	ldr	r0, [pc, #140]	; (80037a4 <MX_RTC_Init+0x110>)
 8003718:	f7fe fc23 	bl	8001f62 <HAL_RTC_SetTime>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003722:	f000 fac9 	bl	8003cb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x18;
 8003738:	2318      	movs	r3, #24
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800373e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003742:	2201      	movs	r2, #1
 8003744:	4619      	mov	r1, r3
 8003746:	4817      	ldr	r0, [pc, #92]	; (80037a4 <MX_RTC_Init+0x110>)
 8003748:	f7fe fcd0 	bl	80020ec <HAL_RTC_SetDate>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003752:	f000 fab1 	bl	8003cb8 <Error_Handler>
  }
  /**Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003756:	2300      	movs	r3, #0
 8003758:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800375a:	2300      	movs	r3, #0
 800375c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800375e:	2300      	movs	r3, #0
 8003760:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003786:	463b      	mov	r3, r7
 8003788:	2201      	movs	r2, #1
 800378a:	4619      	mov	r1, r3
 800378c:	4805      	ldr	r0, [pc, #20]	; (80037a4 <MX_RTC_Init+0x110>)
 800378e:	f7fe fd55 	bl	800223c <HAL_RTC_SetAlarm_IT>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003798:	f000 fa8e 	bl	8003cb8 <Error_Handler>
  }


}
 800379c:	bf00      	nop
 800379e:	3740      	adds	r7, #64	; 0x40
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000160 	.word	0x20000160
 80037a8:	40002800 	.word	0x40002800

080037ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(int brightness)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	; 0x30
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037be:	f107 030c 	add.w	r3, r7, #12
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	611a      	str	r2, [r3, #16]
 80037ce:	615a      	str	r2, [r3, #20]
 80037d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <MX_TIM2_Init+0xb4>)
 80037d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <MX_TIM2_Init+0xb4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <MX_TIM2_Init+0xb4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <MX_TIM2_Init+0xb4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <MX_TIM2_Init+0xb4>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037f2:	481b      	ldr	r0, [pc, #108]	; (8003860 <MX_TIM2_Init+0xb4>)
 80037f4:	f7fe ff60 	bl	80026b8 <HAL_TIM_PWM_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80037fe:	f000 fa5b 	bl	8003cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800380a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800380e:	4619      	mov	r1, r3
 8003810:	4813      	ldr	r0, [pc, #76]	; (8003860 <MX_TIM2_Init+0xb4>)
 8003812:	f7ff fb09 	bl	8002e28 <HAL_TIMEx_MasterConfigSynchronization>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800381c:	f000 fa4c 	bl	8003cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003820:	2360      	movs	r3, #96	; 0x60
 8003822:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = brightness;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003830:	f107 030c 	add.w	r3, r7, #12
 8003834:	2208      	movs	r2, #8
 8003836:	4619      	mov	r1, r3
 8003838:	4809      	ldr	r0, [pc, #36]	; (8003860 <MX_TIM2_Init+0xb4>)
 800383a:	f7fe ff9d 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003844:	f000 fa38 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8003848:	2108      	movs	r1, #8
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_TIM2_Init+0xb4>)
 800384c:	f7fe ff60 	bl	8002710 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <MX_TIM2_Init+0xb4>)
 8003852:	f000 fb27 	bl	8003ea4 <HAL_TIM_MspPostInit>

}
 8003856:	bf00      	nop
 8003858:	3730      	adds	r7, #48	; 0x30
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000180 	.word	0x20000180

08003864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(int duty)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800386c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003876:	f107 030c 	add.w	r3, r7, #12
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	611a      	str	r2, [r3, #16]
 8003886:	615a      	str	r2, [r3, #20]
 8003888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <MX_TIM3_Init+0xb4>)
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <MX_TIM3_Init+0xb8>)
 800388e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <MX_TIM3_Init+0xb4>)
 8003892:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003896:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <MX_TIM3_Init+0xb4>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <MX_TIM3_Init+0xb4>)
 80038a0:	2264      	movs	r2, #100	; 0x64
 80038a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a4:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <MX_TIM3_Init+0xb4>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038aa:	481b      	ldr	r0, [pc, #108]	; (8003918 <MX_TIM3_Init+0xb4>)
 80038ac:	f7fe ff04 	bl	80026b8 <HAL_TIM_PWM_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80038b6:	f000 f9ff 	bl	8003cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038be:	2300      	movs	r3, #0
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c6:	4619      	mov	r1, r3
 80038c8:	4813      	ldr	r0, [pc, #76]	; (8003918 <MX_TIM3_Init+0xb4>)
 80038ca:	f7ff faad 	bl	8002e28 <HAL_TIMEx_MasterConfigSynchronization>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80038d4:	f000 f9f0 	bl	8003cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d8:	2360      	movs	r3, #96	; 0x60
 80038da:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	2204      	movs	r2, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4809      	ldr	r0, [pc, #36]	; (8003918 <MX_TIM3_Init+0xb4>)
 80038f2:	f7fe ff41 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80038fc:	f000 f9dc 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003900:	2104      	movs	r1, #4
 8003902:	4805      	ldr	r0, [pc, #20]	; (8003918 <MX_TIM3_Init+0xb4>)
 8003904:	f7fe ff04 	bl	8002710 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <MX_TIM3_Init+0xb4>)
 800390a:	f000 facb 	bl	8003ea4 <HAL_TIM_MspPostInit>

}
 800390e:	bf00      	nop
 8003910:	3730      	adds	r7, #48	; 0x30
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000011c 	.word	0x2000011c
 800391c:	40000400 	.word	0x40000400

08003920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(int duty)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	611a      	str	r2, [r3, #16]
 8003942:	615a      	str	r2, [r3, #20]
 8003944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <MX_TIM4_Init+0xb4>)
 8003948:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <MX_TIM4_Init+0xb8>)
 800394a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <MX_TIM4_Init+0xb4>)
 800394e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <MX_TIM4_Init+0xb4>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <MX_TIM4_Init+0xb4>)
 800395c:	2264      	movs	r2, #100	; 0x64
 800395e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003960:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <MX_TIM4_Init+0xb4>)
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003966:	481b      	ldr	r0, [pc, #108]	; (80039d4 <MX_TIM4_Init+0xb4>)
 8003968:	f7fe fea6 	bl	80026b8 <HAL_TIM_PWM_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003972:	f000 f9a1 	bl	8003cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397a:	2300      	movs	r3, #0
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800397e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003982:	4619      	mov	r1, r3
 8003984:	4813      	ldr	r0, [pc, #76]	; (80039d4 <MX_TIM4_Init+0xb4>)
 8003986:	f7ff fa4f 	bl	8002e28 <HAL_TIMEx_MasterConfigSynchronization>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8003990:	f000 f992 	bl	8003cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003994:	2360      	movs	r3, #96	; 0x60
 8003996:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	2200      	movs	r2, #0
 80039aa:	4619      	mov	r1, r3
 80039ac:	4809      	ldr	r0, [pc, #36]	; (80039d4 <MX_TIM4_Init+0xb4>)
 80039ae:	f7fe fee3 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80039b8:	f000 f97e 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80039bc:	2100      	movs	r1, #0
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <MX_TIM4_Init+0xb4>)
 80039c0:	f7fe fea6 	bl	8002710 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <MX_TIM4_Init+0xb4>)
 80039c6:	f000 fa6d 	bl	8003ea4 <HAL_TIM_MspPostInit>

}
 80039ca:	bf00      	nop
 80039cc:	3730      	adds	r7, #48	; 0x30
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2000008c 	.word	0x2000008c
 80039d8:	40000800 	.word	0x40000800

080039dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(int duty)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b092      	sub	sp, #72	; 0x48
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	615a      	str	r2, [r3, #20]
 8003a00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	611a      	str	r2, [r3, #16]
 8003a12:	615a      	str	r2, [r3, #20]
 8003a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a16:	4b34      	ldr	r3, [pc, #208]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <MX_TIM8_Init+0x110>)
 8003a1a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840;
 8003a1c:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a1e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003a22:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a2c:	2264      	movs	r2, #100	; 0x64
 8003a2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a30:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a36:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a3c:	482a      	ldr	r0, [pc, #168]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a3e:	f7fe fe3b 	bl	80026b8 <HAL_TIM_PWM_Init>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8003a48:	f000 f936 	bl	8003cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4823      	ldr	r0, [pc, #140]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a5c:	f7ff f9e4 	bl	8002e28 <HAL_TIMEx_MasterConfigSynchronization>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8003a66:	f000 f927 	bl	8003cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a6a:	2360      	movs	r3, #96	; 0x60
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = duty;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a72:	2300      	movs	r3, #0
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a76:	2300      	movs	r3, #0
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4816      	ldr	r0, [pc, #88]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003a90:	f7fe fe72 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003a9a:	f000 f90d 	bl	8003cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ab6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003abc:	f107 0308 	add.w	r3, r7, #8
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4809      	ldr	r0, [pc, #36]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003ac4:	f7ff f9f5 	bl	8002eb2 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003ace:	f000 f8f3 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	4804      	ldr	r0, [pc, #16]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003ad6:	f7fe fe1b 	bl	8002710 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003ada:	4803      	ldr	r0, [pc, #12]	; (8003ae8 <MX_TIM8_Init+0x10c>)
 8003adc:	f000 f9e2 	bl	8003ea4 <HAL_TIM_MspPostInit>

}
 8003ae0:	bf00      	nop
 8003ae2:	3748      	adds	r7, #72	; 0x48
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000050 	.word	0x20000050
 8003aec:	40010400 	.word	0x40010400

08003af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003af6:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <MX_USART2_UART_Init+0x50>)
 8003af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b16:	220c      	movs	r2, #12
 8003b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b26:	4805      	ldr	r0, [pc, #20]	; (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b28:	f7ff fa1c 	bl	8002f64 <HAL_UART_Init>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b32:	f000 f8c1 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200001bc 	.word	0x200001bc
 8003b40:	40004400 	.word	0x40004400

08003b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4a:	f107 0314 	add.w	r3, r7, #20
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	605a      	str	r2, [r3, #4]
 8003b54:	609a      	str	r2, [r3, #8]
 8003b56:	60da      	str	r2, [r3, #12]
 8003b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	4a4f      	ldr	r2, [pc, #316]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b60:	4b4e      	ldr	r3, [pc, #312]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	f043 0304 	orr.w	r3, r3, #4
 8003b68:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6a:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4a48      	ldr	r2, [pc, #288]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b7c:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b84:	6313      	str	r3, [r2, #48]	; 0x30
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4a41      	ldr	r2, [pc, #260]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b98:	4b40      	ldr	r3, [pc, #256]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	4a3a      	ldr	r2, [pc, #232]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <MX_GPIO_Init+0x158>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2160      	movs	r1, #96	; 0x60
 8003bce:	4834      	ldr	r0, [pc, #208]	; (8003ca0 <MX_GPIO_Init+0x15c>)
 8003bd0:	f7fc ffc8 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	4832      	ldr	r0, [pc, #200]	; (8003ca4 <MX_GPIO_Init+0x160>)
 8003bda:	f7fc ffc3 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003be4:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <MX_GPIO_Init+0x164>)
 8003be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	482e      	ldr	r0, [pc, #184]	; (8003cac <MX_GPIO_Init+0x168>)
 8003bf4:	f7fc fe0c 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1. BUTTON */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <MX_GPIO_Init+0x16c>)
 8003bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c00:	2302      	movs	r3, #2
 8003c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4828      	ldr	r0, [pc, #160]	; (8003cac <MX_GPIO_Init+0x168>)
 8003c0c:	f7fc fe00 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8003c10:	2360      	movs	r3, #96	; 0x60
 8003c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	481e      	ldr	r0, [pc, #120]	; (8003ca0 <MX_GPIO_Init+0x15c>)
 8003c28:	f7fc fdf2 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9. ROTARY ENCODER channel A and channel B */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <MX_GPIO_Init+0x170>)
 8003c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4817      	ldr	r0, [pc, #92]	; (8003ca0 <MX_GPIO_Init+0x15c>)
 8003c42:	f7fc fde5 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c46:	2320      	movs	r3, #32
 8003c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4811      	ldr	r0, [pc, #68]	; (8003ca4 <MX_GPIO_Init+0x160>)
 8003c5e:	f7fc fdd7 	bl	8000810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	2007      	movs	r0, #7
 8003c68:	f7fc fd9b 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003c6c:	2007      	movs	r0, #7
 8003c6e:	f7fc fdb4 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	2017      	movs	r0, #23
 8003c78:	f7fc fd93 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c7c:	2017      	movs	r0, #23
 8003c7e:	f7fc fdac 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2100      	movs	r1, #0
 8003c86:	2028      	movs	r0, #40	; 0x28
 8003c88:	f7fc fd8b 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c8c:	2028      	movs	r0, #40	; 0x28
 8003c8e:	f7fc fda4 	bl	80007da <HAL_NVIC_EnableIRQ>

}
 8003c92:	bf00      	nop
 8003c94:	3728      	adds	r7, #40	; 0x28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	10210000 	.word	0x10210000
 8003cac:	40020800 	.word	0x40020800
 8003cb0:	10110000 	.word	0x10110000
 8003cb4:	10310000 	.word	0x10310000

08003cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	4a10      	ldr	r2, [pc, #64]	; (8003d14 <HAL_MspInit+0x4c>)
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_MspInit+0x4c>)
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_MspInit+0x4c>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <HAL_MspInit+0x4c>)
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_MspInit+0x4c>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_MspInit+0x4c>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d06:	2007      	movs	r0, #7
 8003d08:	f7fc fd40 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800

08003d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_I2C_MspInit+0x84>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d12c      	bne.n	8003d94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_I2C_MspInit+0x88>)
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_I2C_MspInit+0x88>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	f043 0302 	orr.w	r3, r3, #2
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_I2C_MspInit+0x88>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d5c:	2312      	movs	r3, #18
 8003d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d60:	2301      	movs	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d64:	2303      	movs	r3, #3
 8003d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d68:	2304      	movs	r3, #4
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6c:	f107 0314 	add.w	r3, r7, #20
 8003d70:	4619      	mov	r1, r3
 8003d72:	480c      	ldr	r0, [pc, #48]	; (8003da4 <HAL_I2C_MspInit+0x8c>)
 8003d74:	f7fc fd4c 	bl	8000810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_I2C_MspInit+0x88>)
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_I2C_MspInit+0x88>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d86:	6413      	str	r3, [r2, #64]	; 0x40
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_I2C_MspInit+0x88>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d94:	bf00      	nop
 8003d96:	3728      	adds	r7, #40	; 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40005400 	.word	0x40005400
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40020400 	.word	0x40020400

08003da8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <HAL_RTC_MspInit+0x30>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10a      	bne.n	8003dd0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_RTC_MspInit+0x34>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2029      	movs	r0, #41	; 0x29
 8003dc6:	f7fc fcec 	bl	80007a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003dca:	2029      	movs	r0, #41	; 0x29
 8003dcc:	f7fc fd05 	bl	80007da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40002800 	.word	0x40002800
 8003ddc:	42470e3c 	.word	0x42470e3c

08003de0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d10e      	bne.n	8003e10 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003df8:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e0e:	e03a      	b.n	8003e86 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <HAL_TIM_PWM_MspInit+0xb8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
}
 8003e36:	e026      	b.n	8003e86 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_TIM_PWM_MspInit+0xbc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
}
 8003e5e:	e012      	b.n	8003e86 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_TIM_PWM_MspInit+0xc0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40010400 	.word	0x40010400

08003ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	; 0x30
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d11f      	bne.n	8003f06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	4a46      	ldr	r2, [pc, #280]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003ecc:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed6:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef8:	f107 031c 	add.w	r3, r7, #28
 8003efc:	4619      	mov	r1, r3
 8003efe:	483a      	ldr	r0, [pc, #232]	; (8003fe8 <HAL_TIM_MspPostInit+0x144>)
 8003f00:	f7fc fc86 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003f04:	e06a      	b.n	8003fdc <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HAL_TIM_MspPostInit+0x148>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d11e      	bne.n	8003f4e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003f16:	4b33      	ldr	r3, [pc, #204]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f40:	f107 031c 	add.w	r3, r7, #28
 8003f44:	4619      	mov	r1, r3
 8003f46:	482a      	ldr	r0, [pc, #168]	; (8003ff0 <HAL_TIM_MspPostInit+0x14c>)
 8003f48:	f7fc fc62 	bl	8000810 <HAL_GPIO_Init>
}
 8003f4c:	e046      	b.n	8003fdc <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <HAL_TIM_MspPostInit+0x150>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d11e      	bne.n	8003f96 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	4a21      	ldr	r2, [pc, #132]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	6313      	str	r3, [r2, #48]	; 0x30
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f74:	2340      	movs	r3, #64	; 0x40
 8003f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f84:	2302      	movs	r3, #2
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f88:	f107 031c 	add.w	r3, r7, #28
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4816      	ldr	r0, [pc, #88]	; (8003fe8 <HAL_TIM_MspPostInit+0x144>)
 8003f90:	f7fc fc3e 	bl	8000810 <HAL_GPIO_Init>
}
 8003f94:	e022      	b.n	8003fdc <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <HAL_TIM_MspPostInit+0x154>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d11d      	bne.n	8003fdc <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	4a0f      	ldr	r2, [pc, #60]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_TIM_MspPostInit+0x140>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd0:	f107 031c 	add.w	r3, r7, #28
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4809      	ldr	r0, [pc, #36]	; (8003ffc <HAL_TIM_MspPostInit+0x158>)
 8003fd8:	f7fc fc1a 	bl	8000810 <HAL_GPIO_Init>
}
 8003fdc:	bf00      	nop
 8003fde:	3730      	adds	r7, #48	; 0x30
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40020400 	.word	0x40020400
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40010400 	.word	0x40010400
 8003ffc:	40020800 	.word	0x40020800

08004000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <HAL_UART_MspInit+0x84>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d12b      	bne.n	800407a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_UART_MspInit+0x88>)
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <HAL_UART_MspInit+0x88>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <HAL_UART_MspInit+0x88>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	4a11      	ldr	r2, [pc, #68]	; (8004088 <HAL_UART_MspInit+0x88>)
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_UART_MspInit+0x88>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_UART_MspInit+0x88>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800405a:	230c      	movs	r3, #12
 800405c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405e:	2302      	movs	r3, #2
 8004060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004062:	2301      	movs	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004066:	2303      	movs	r3, #3
 8004068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800406a:	2307      	movs	r3, #7
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4619      	mov	r1, r3
 8004074:	4805      	ldr	r0, [pc, #20]	; (800408c <HAL_UART_MspInit+0x8c>)
 8004076:	f7fc fbcb 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800407a:	bf00      	nop
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40004400 	.word	0x40004400
 8004088:	40023800 	.word	0x40023800
 800408c:	40020000 	.word	0x40020000

08004090 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80040a2:	e7fe      	b.n	80040a2 <HardFault_Handler+0x4>

080040a4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80040a8:	e7fe      	b.n	80040a8 <MemManage_Handler+0x4>

080040aa <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80040ae:	e7fe      	b.n	80040ae <BusFault_Handler+0x4>

080040b0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80040b4:	e7fe      	b.n	80040b4 <UsageFault_Handler+0x4>

080040b6 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80040e4:	f7fc fa68 	bl	80005b8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}

080040ec <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line 1 interrupt.
 */
void EXTI1_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */
	*pflag = 1;
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <EXTI1_IRQHandler+0x18>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80040f8:	2002      	movs	r0, #2
 80040fa:	f7fc fd4d 	bl	8000b98 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000008 	.word	0x20000008

08004108 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 8004108:	b598      	push	{r3, r4, r7, lr}
 800410a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */
	*pstateA = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <EXTI9_5_IRQHandler+0x60>)
 800410e:	681c      	ldr	r4, [r3, #0]
 8004110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004114:	4815      	ldr	r0, [pc, #84]	; (800416c <EXTI9_5_IRQHandler+0x64>)
 8004116:	f7fc fd0d 	bl	8000b34 <HAL_GPIO_ReadPin>
 800411a:	4603      	mov	r3, r0
 800411c:	7023      	strb	r3, [r4, #0]
	//if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) != *pstateA){
 800411e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004122:	4812      	ldr	r0, [pc, #72]	; (800416c <EXTI9_5_IRQHandler+0x64>)
 8004124:	f7fc fd06 	bl	8000b34 <HAL_GPIO_ReadPin>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <EXTI9_5_IRQHandler+0x60>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d004      	beq.n	8004140 <EXTI9_5_IRQHandler+0x38>
		*pflag = 2;
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <EXTI9_5_IRQHandler+0x68>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2202      	movs	r2, #2
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e003      	b.n	8004148 <EXTI9_5_IRQHandler+0x40>
	} else {
		*pflag = 3;
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <EXTI9_5_IRQHandler+0x68>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2203      	movs	r2, #3
 8004146:	601a      	str	r2, [r3, #0]
	}
	*ppreviousA = *pstateA;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <EXTI9_5_IRQHandler+0x6c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a06      	ldr	r2, [pc, #24]	; (8004168 <EXTI9_5_IRQHandler+0x60>)
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	701a      	strb	r2, [r3, #0]
	  //TODO check for set flag in main (polling) and call menu function if flag is set
	 *pflag = 3;
	  }
  }*/
	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 8004154:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004158:	f7fc fd1e 	bl	8000b98 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 800415c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004160:	f7fc fd1a 	bl	8000b98 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8004164:	bf00      	nop
 8004166:	bd98      	pop	{r3, r4, r7, pc}
 8004168:	2000000c 	.word	0x2000000c
 800416c:	40020000 	.word	0x40020000
 8004170:	20000008 	.word	0x20000008
 8004174:	20000010 	.word	0x20000010

08004178 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800417c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004180:	f7fc fd0a 	bl	8000b98 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}

08004188 <RTC_Alarm_IRQHandler>:

/**
 * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
 */
void RTC_Alarm_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Alarm_IRQn 0 */

	/* USER CODE END RTC_Alarm_IRQn 0 */
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <RTC_Alarm_IRQHandler+0x10>)
 800418e:	f7fe f9a9 	bl	80024e4 <HAL_RTC_AlarmIRQHandler>
	/* USER CODE BEGIN RTC_Alarm_IRQn 1 */

	/* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000160 	.word	0x20000160

0800419c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a0:	4a16      	ldr	r2, [pc, #88]	; (80041fc <SystemInit+0x60>)
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <SystemInit+0x60>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <SystemInit+0x64>)
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <SystemInit+0x64>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <SystemInit+0x64>)
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041c2:	4a0f      	ldr	r2, [pc, #60]	; (8004200 <SystemInit+0x64>)
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <SystemInit+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <SystemInit+0x64>)
 80041d4:	4a0b      	ldr	r2, [pc, #44]	; (8004204 <SystemInit+0x68>)
 80041d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <SystemInit+0x64>)
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <SystemInit+0x64>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <SystemInit+0x64>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041ea:	4b04      	ldr	r3, [pc, #16]	; (80041fc <SystemInit+0x60>)
 80041ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041f0:	609a      	str	r2, [r3, #8]
#endif
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	e000ed00 	.word	0xe000ed00
 8004200:	40023800 	.word	0x40023800
 8004204:	24003010 	.word	0x24003010

08004208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800420c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800420e:	e003      	b.n	8004218 <LoopCopyDataInit>

08004210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004216:	3104      	adds	r1, #4

08004218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004218:	480b      	ldr	r0, [pc, #44]	; (8004248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800421c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800421e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004220:	d3f6      	bcc.n	8004210 <CopyDataInit>
  ldr  r2, =_sbss
 8004222:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004224:	e002      	b.n	800422c <LoopFillZerobss>

08004226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004228:	f842 3b04 	str.w	r3, [r2], #4

0800422c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800422e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004230:	d3f9      	bcc.n	8004226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004232:	f7ff ffb3 	bl	800419c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004236:	f000 f811 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800423a:	f7ff f8fd 	bl	8003438 <main>
  bx  lr    
 800423e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004240:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004244:	080042f4 	.word	0x080042f4
  ldr  r0, =_sdata
 8004248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800424c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8004250:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8004254:	20000228 	.word	0x20000228

08004258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004258:	e7fe      	b.n	8004258 <ADC_IRQHandler>
	...

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4e0d      	ldr	r6, [pc, #52]	; (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004262:	1ba4      	subs	r4, r4, r6
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2500      	movs	r5, #0
 8004268:	42a5      	cmp	r5, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4e0b      	ldr	r6, [pc, #44]	; (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x44>)
 8004270:	f000 f820 	bl	80042b4 <_init>
 8004274:	1ba4      	subs	r4, r4, r6
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2500      	movs	r5, #0
 800427a:	42a5      	cmp	r5, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004284:	4798      	blx	r3
 8004286:	3501      	adds	r5, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800428e:	4798      	blx	r3
 8004290:	3501      	adds	r5, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	080042ec 	.word	0x080042ec
 8004298:	080042ec 	.word	0x080042ec
 800429c:	080042ec 	.word	0x080042ec
 80042a0:	080042f0 	.word	0x080042f0

080042a4 <memset>:
 80042a4:	4402      	add	r2, r0
 80042a6:	4603      	mov	r3, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d100      	bne.n	80042ae <memset+0xa>
 80042ac:	4770      	bx	lr
 80042ae:	f803 1b01 	strb.w	r1, [r3], #1
 80042b2:	e7f9      	b.n	80042a8 <memset+0x4>

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
