
Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004328  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  20000010  08004524  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000228  08004524  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165e7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002560  00000000  00000000  00036627  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fd8  00000000  00000000  00038b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee0  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000760d  00000000  00000000  0003aa40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f47  00000000  00000000  0004204d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046f94  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043cc  00000000  00000000  00047010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080044d4 	.word	0x080044d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080044d4 	.word	0x080044d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f925 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 fce2 	bl	8003f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f93d 	bl	80007f6 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f905 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000034 	.word	0x20000034

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000034 	.word	0x20000034

080005f8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <NVIC_EnableIRQ+0x30>)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	095b      	lsrs	r3, r3, #5
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	f002 021f 	and.w	r2, r2, #31
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da0b      	bge.n	80006bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	490d      	ldr	r1, [pc, #52]	; (80006dc <NVIC_SetPriority+0x4c>)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	3b04      	subs	r3, #4
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ba:	e009      	b.n	80006d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	4908      	ldr	r1, [pc, #32]	; (80006e0 <NVIC_SetPriority+0x50>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	2201      	movs	r2, #1
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	401a      	ands	r2, r3
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072a:	2101      	movs	r1, #1
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	1e59      	subs	r1, r3, #1
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff90 	bl	8000690 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff2f 	bl	80005f8 <NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff44 	bl	8000640 <NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff37 	bl	800065c <NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e165      	b.n	8000af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8154 	bne.w	8000af2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0x4a>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b12      	cmp	r3, #18
 8000858:	d123      	bne.n	80008a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	220f      	movs	r2, #15
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	08da      	lsrs	r2, r3, #3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0203 	and.w	r2, r3, #3
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d00b      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d007      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ea:	2b11      	cmp	r3, #17
 80008ec:	d003      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d130      	bne.n	8000958 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4313      	orrs	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	f003 0201 	and.w	r2, r3, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80ae 	beq.w	8000af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4a5c      	ldr	r2, [pc, #368]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099c:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b2:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <HAL_GPIO_Init+0x300>)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <HAL_GPIO_Init+0x304>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x21a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4d      	ldr	r2, [pc, #308]	; (8000b18 <HAL_GPIO_Init+0x308>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x216>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_GPIO_Init+0x30c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x212>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4b      	ldr	r2, [pc, #300]	; (8000b20 <HAL_GPIO_Init+0x310>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x20e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4a      	ldr	r2, [pc, #296]	; (8000b24 <HAL_GPIO_Init+0x314>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x20a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <HAL_GPIO_Init+0x318>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a48      	ldr	r2, [pc, #288]	; (8000b2c <HAL_GPIO_Init+0x31c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x202>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a98:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	f67f ae96 	bls.w	800082c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b00:	bf00      	nop
 8000b02:	3724      	adds	r7, #36	; 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691a      	ldr	r2, [r3, #16]
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	041a      	lsls	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	619a      	str	r2, [r3, #24]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	405a      	eors	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	615a      	str	r2, [r3, #20]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f806 	bl	8000bec <HAL_GPIO_EXTI_Callback>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40013c00 	.word	0x40013c00

08000bec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e0c8      	b.n	8000db0 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f003 f994 	bl	8003f60 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2224      	movs	r2, #36	; 0x24
 8000c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	f022 0201 	bic.w	r2, r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c50:	f000 f9a6 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 8000c54:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	4a57      	ldr	r2, [pc, #348]	; (8000db8 <HAL_I2C_Init+0x1b4>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	0c9b      	lsrs	r3, r3, #18
 8000c60:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4952      	ldr	r1, [pc, #328]	; (8000dbc <HAL_I2C_Init+0x1b8>)
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d802      	bhi.n	8000c7e <HAL_I2C_Init+0x7a>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	e009      	b.n	8000c92 <HAL_I2C_Init+0x8e>
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c84:	fb01 f303 	mul.w	r3, r1, r3
 8000c88:	494d      	ldr	r1, [pc, #308]	; (8000dc0 <HAL_I2C_Init+0x1bc>)
 8000c8a:	fba1 1303 	umull	r1, r3, r1, r3
 8000c8e:	099b      	lsrs	r3, r3, #6
 8000c90:	3301      	adds	r3, #1
 8000c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6819      	ldr	r1, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a47      	ldr	r2, [pc, #284]	; (8000dbc <HAL_I2C_Init+0x1b8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d812      	bhi.n	8000cc8 <HAL_I2C_Init+0xc4>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d906      	bls.n	8000cc4 <HAL_I2C_Init+0xc0>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	e045      	b.n	8000d50 <HAL_I2C_Init+0x14c>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e043      	b.n	8000d50 <HAL_I2C_Init+0x14c>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10f      	bne.n	8000cf0 <HAL_I2C_Init+0xec>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf0c      	ite	eq
 8000ce8:	2301      	moveq	r3, #1
 8000cea:	2300      	movne	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	e010      	b.n	8000d12 <HAL_I2C_Init+0x10e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009a      	lsls	r2, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	bf0c      	ite	eq
 8000d0c:	2301      	moveq	r3, #1
 8000d0e:	2300      	movne	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_I2C_Init+0x116>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e01a      	b.n	8000d50 <HAL_I2C_Init+0x14c>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <HAL_I2C_Init+0x134>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d36:	e00b      	b.n	8000d50 <HAL_I2C_Init+0x14c>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	009a      	lsls	r2, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d50:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	69d1      	ldr	r1, [r2, #28]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6a12      	ldr	r2, [r2, #32]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6911      	ldr	r1, [r2, #16]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68d2      	ldr	r2, [r2, #12]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6951      	ldr	r1, [r2, #20]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	6992      	ldr	r2, [r2, #24]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	f042 0201 	orr.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	431bde83 	.word	0x431bde83
 8000dbc:	000186a0 	.word	0x000186a0
 8000dc0:	10624dd3 	.word	0x10624dd3

08000dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e0ca      	b.n	8000f6e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dd8:	4b67      	ldr	r3, [pc, #412]	; (8000f78 <HAL_RCC_ClockConfig+0x1b4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 020f 	and.w	r2, r3, #15
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d20c      	bcs.n	8000e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de6:	4b64      	ldr	r3, [pc, #400]	; (8000f78 <HAL_RCC_ClockConfig+0x1b4>)
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dee:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <HAL_RCC_ClockConfig+0x1b4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 020f 	and.w	r2, r3, #15
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d001      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e0b6      	b.n	8000f6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d020      	beq.n	8000e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e18:	4a58      	ldr	r2, [pc, #352]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e1a:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e30:	4a52      	ldr	r2, [pc, #328]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e32:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e3c:	494f      	ldr	r1, [pc, #316]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d044      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d107      	bne.n	8000e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d119      	bne.n	8000ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e07d      	b.n	8000f6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d003      	beq.n	8000e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d107      	bne.n	8000e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d109      	bne.n	8000ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e06d      	b.n	8000f6e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e065      	b.n	8000f6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ea2:	4936      	ldr	r1, [pc, #216]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000ea4:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f023 0203 	bic.w	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000eb4:	f7ff fb94 	bl	80005e0 <HAL_GetTick>
 8000eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eba:	e00a      	b.n	8000ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebc:	f7ff fb90 	bl	80005e0 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e04d      	b.n	8000f6e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 020c 	and.w	r2, r3, #12
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d1eb      	bne.n	8000ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_RCC_ClockConfig+0x1b4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 020f 	and.w	r2, r3, #15
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d90c      	bls.n	8000f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_RCC_ClockConfig+0x1b4>)
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_RCC_ClockConfig+0x1b4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 020f 	and.w	r2, r3, #15
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d001      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e030      	b.n	8000f6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f18:	4918      	ldr	r1, [pc, #96]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f36:	4911      	ldr	r1, [pc, #68]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f4a:	f000 fb7b 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8000f4e:	4601      	mov	r1, r0
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_RCC_ClockConfig+0x1b8>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_RCC_ClockConfig+0x1bc>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_RCC_ClockConfig+0x1c0>)
 8000f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff faf6 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	080044ec 	.word	0x080044ec
 8000f84:	2000000c 	.word	0x2000000c

08000f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fa4:	f7ff fff0 	bl	8000f88 <HAL_RCC_GetHCLKFreq>
 8000fa8:	4601      	mov	r1, r0
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	0a9b      	lsrs	r3, r3, #10
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	080044fc 	.word	0x080044fc

08000fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fcc:	f7ff ffdc 	bl	8000f88 <HAL_RCC_GetHCLKFreq>
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	0b5b      	lsrs	r3, r3, #13
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	080044fc 	.word	0x080044fc

08000ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d010      	beq.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001028:	496f      	ldr	r1, [pc, #444]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800102a:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800102c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001030:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	4313      	orrs	r3, r2
 800103a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001046:	2301      	movs	r3, #1
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d010      	beq.n	8001078 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001056:	4964      	ldr	r1, [pc, #400]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001058:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800105a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105e:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001066:	4313      	orrs	r3, r2
 8001068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d017      	beq.n	80010b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001084:	4958      	ldr	r1, [pc, #352]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001086:	4b58      	ldr	r3, [pc, #352]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800108c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4313      	orrs	r3, r2
 8001096:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010a2:	d101      	bne.n	80010a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d017      	beq.n	80010f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80010c0:	4949      	ldr	r1, [pc, #292]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010c2:	4b49      	ldr	r3, [pc, #292]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	4313      	orrs	r3, r2
 80010d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010de:	d101      	bne.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 808a 	beq.w	8001212 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800111a:	4a34      	ldr	r2, [pc, #208]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001126:	f7ff fa5b 	bl	80005e0 <HAL_GetTick>
 800112a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800112e:	f7ff fa57 	bl	80005e0 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e278      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800114e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001154:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d02f      	beq.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	429a      	cmp	r2, r3
 8001168:	d028      	beq.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800116c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800116e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001172:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d014      	beq.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fa25 	bl	80005e0 <HAL_GetTick>
 8001196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	e00a      	b.n	80011b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119a:	f7ff fa21 	bl	80005e0 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e240      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ee      	beq.n	800119a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011c8:	d114      	bne.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80011ca:	4907      	ldr	r1, [pc, #28]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80011dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e0:	4313      	orrs	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]
 80011e4:	e00c      	b.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000
 80011f0:	42470e40 	.word	0x42470e40
 80011f4:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011f6:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80011fe:	6093      	str	r3, [r2, #8]
 8001200:	4947      	ldr	r1, [pc, #284]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120e:	4313      	orrs	r3, r2
 8001210:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800121e:	4a41      	ldr	r2, [pc, #260]	; (8001324 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001226:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00a      	beq.n	800124a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001234:	493a      	ldr	r1, [pc, #232]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4313      	orrs	r3, r2
 8001246:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001256:	4932      	ldr	r1, [pc, #200]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	4313      	orrs	r3, r2
 8001268:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001274:	2b00      	cmp	r3, #0
 8001276:	d011      	beq.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001278:	4929      	ldr	r1, [pc, #164]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001288:	4313      	orrs	r3, r2
 800128a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001296:	d101      	bne.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001298:	2301      	movs	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80012a8:	491d      	ldr	r1, [pc, #116]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	4313      	orrs	r3, r2
 80012ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d011      	beq.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80012ca:	4915      	ldr	r1, [pc, #84]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012da:	4313      	orrs	r3, r2
 80012dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012e8:	d101      	bne.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012fc:	f040 80ff 	bne.w	80014fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001306:	f7ff f96b 	bl	80005e0 <HAL_GetTick>
 800130a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800130c:	e00e      	b.n	800132c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800130e:	f7ff f967 	bl	80005e0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d907      	bls.n	800132c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e188      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001320:	40023800 	.word	0x40023800
 8001324:	424711e0 	.word	0x424711e0
 8001328:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800132c:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ea      	bne.n	800130e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001348:	2b00      	cmp	r3, #0
 800134a:	d009      	beq.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001354:	2b00      	cmp	r3, #0
 8001356:	d028      	beq.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	2b00      	cmp	r3, #0
 800135e:	d124      	bne.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001360:	4b71      	ldr	r3, [pc, #452]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	3301      	adds	r3, #1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001378:	0e1b      	lsrs	r3, r3, #24
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001380:	4969      	ldr	r1, [pc, #420]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	019b      	lsls	r3, r3, #6
 800138c:	431a      	orrs	r2, r3
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	3b01      	subs	r3, #1
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	431a      	orrs	r2, r3
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	061b      	lsls	r3, r3, #24
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	071b      	lsls	r3, r3, #28
 80013a4:	4313      	orrs	r3, r2
 80013a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013be:	d00a      	beq.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d035      	beq.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013d4:	d130      	bne.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013d6:	4b54      	ldr	r3, [pc, #336]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	3301      	adds	r3, #1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013e8:	4b4f      	ldr	r3, [pc, #316]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ee:	0f1b      	lsrs	r3, r3, #28
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80013f6:	494c      	ldr	r1, [pc, #304]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	431a      	orrs	r2, r3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	3b01      	subs	r3, #1
 800140a:	041b      	lsls	r3, r3, #16
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	061b      	lsls	r3, r3, #24
 8001414:	431a      	orrs	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	071b      	lsls	r3, r3, #28
 800141a:	4313      	orrs	r3, r2
 800141c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001420:	4941      	ldr	r1, [pc, #260]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001428:	f023 021f 	bic.w	r2, r3, #31
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	3b01      	subs	r3, #1
 8001432:	4313      	orrs	r3, r2
 8001434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001440:	2b00      	cmp	r3, #0
 8001442:	d029      	beq.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800144c:	d124      	bne.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	3301      	adds	r3, #1
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001460:	4b31      	ldr	r3, [pc, #196]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001466:	0f1b      	lsrs	r3, r3, #28
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800146e:	492e      	ldr	r1, [pc, #184]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	085b      	lsrs	r3, r3, #1
 8001482:	3b01      	subs	r3, #1
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	061b      	lsls	r3, r3, #24
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	071b      	lsls	r3, r3, #28
 8001492:	4313      	orrs	r3, r2
 8001494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d016      	beq.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80014a4:	4920      	ldr	r1, [pc, #128]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	3b01      	subs	r3, #1
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	061b      	lsls	r3, r3, #24
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	071b      	lsls	r3, r3, #28
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff f882 	bl	80005e0 <HAL_GetTick>
 80014dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014e0:	f7ff f87e 	bl	80005e0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e09f      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	2b01      	cmp	r3, #1
 8001502:	f040 8095 	bne.w	8001630 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff f868 	bl	80005e0 <HAL_GetTick>
 8001510:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001512:	e00f      	b.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001514:	f7ff f864 	bl	80005e0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d908      	bls.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e085      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	42470068 	.word	0x42470068
 8001530:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800153c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001540:	d0e8      	beq.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800155e:	2b00      	cmp	r3, #0
 8001560:	d02b      	beq.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	2b00      	cmp	r3, #0
 8001568:	d127      	bne.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800156c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	3301      	adds	r3, #1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800157c:	492f      	ldr	r1, [pc, #188]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	019b      	lsls	r3, r3, #6
 8001588:	431a      	orrs	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	3b01      	subs	r3, #1
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	061b      	lsls	r3, r3, #24
 800159a:	4313      	orrs	r3, r2
 800159c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80015a0:	4926      	ldr	r1, [pc, #152]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	3b01      	subs	r3, #1
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	4313      	orrs	r3, r2
 80015b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d01d      	beq.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015ce:	d118      	bne.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	0e1b      	lsrs	r3, r3, #24
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015de:	4917      	ldr	r1, [pc, #92]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	3b01      	subs	r3, #1
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	431a      	orrs	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	4313      	orrs	r3, r2
 80015fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001608:	f7fe ffea 	bl	80005e0 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001610:	f7fe ffe6 	bl	80005e0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e007      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800162a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800162e:	d1ef      	bne.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3730      	adds	r7, #48	; 0x30
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	42470070 	.word	0x42470070

08001644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001648:	b0a1      	sub	sp, #132	; 0x84
 800164a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001660:	4ba0      	ldr	r3, [pc, #640]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b0c      	cmp	r3, #12
 800166a:	f200 8193 	bhi.w	8001994 <HAL_RCC_GetSysClockFreq+0x350>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <HAL_RCC_GetSysClockFreq+0x30>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016a9 	.word	0x080016a9
 8001678:	08001995 	.word	0x08001995
 800167c:	08001995 	.word	0x08001995
 8001680:	08001995 	.word	0x08001995
 8001684:	080016af 	.word	0x080016af
 8001688:	08001995 	.word	0x08001995
 800168c:	08001995 	.word	0x08001995
 8001690:	08001995 	.word	0x08001995
 8001694:	080016b5 	.word	0x080016b5
 8001698:	08001995 	.word	0x08001995
 800169c:	08001995 	.word	0x08001995
 80016a0:	08001995 	.word	0x08001995
 80016a4:	08001831 	.word	0x08001831
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a8:	4b8f      	ldr	r3, [pc, #572]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x2a4>)
 80016aa:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 80016ac:	e175      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ae:	4b8f      	ldr	r3, [pc, #572]	; (80018ec <HAL_RCC_GetSysClockFreq+0x2a8>)
 80016b0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80016b2:	e172      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b4:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016bc:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016be:	4b89      	ldr	r3, [pc, #548]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d056      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ca:	4b86      	ldr	r3, [pc, #536]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	f04f 0400 	mov.w	r4, #0
 80016d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	ea01 0103 	and.w	r1, r1, r3
 80016e0:	ea02 0204 	and.w	r2, r2, r4
 80016e4:	460b      	mov	r3, r1
 80016e6:	4614      	mov	r4, r2
 80016e8:	0160      	lsls	r0, r4, #5
 80016ea:	6678      	str	r0, [r7, #100]	; 0x64
 80016ec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016ee:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80016f2:	6678      	str	r0, [r7, #100]	; 0x64
 80016f4:	015b      	lsls	r3, r3, #5
 80016f6:	663b      	str	r3, [r7, #96]	; 0x60
 80016f8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80016fc:	1a5b      	subs	r3, r3, r1
 80016fe:	eb64 0402 	sbc.w	r4, r4, r2
 8001702:	01a0      	lsls	r0, r4, #6
 8001704:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001706:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001708:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 800170c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800170e:	0198      	lsls	r0, r3, #6
 8001710:	65b8      	str	r0, [r7, #88]	; 0x58
 8001712:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001716:	1aed      	subs	r5, r5, r3
 8001718:	eb66 0604 	sbc.w	r6, r6, r4
 800171c:	4633      	mov	r3, r6
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	657b      	str	r3, [r7, #84]	; 0x54
 8001722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001724:	4628      	mov	r0, r5
 8001726:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
 800172c:	462b      	mov	r3, r5
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	653b      	str	r3, [r7, #80]	; 0x50
 8001732:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001736:	461d      	mov	r5, r3
 8001738:	4626      	mov	r6, r4
 800173a:	186b      	adds	r3, r5, r1
 800173c:	eb46 0402 	adc.w	r4, r6, r2
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	460b      	mov	r3, r1
 8001746:	025b      	lsls	r3, r3, #9
 8001748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174c:	4602      	mov	r2, r0
 800174e:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001754:	4603      	mov	r3, r0
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
 800175a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800175e:	4618      	mov	r0, r3
 8001760:	4621      	mov	r1, r4
 8001762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001764:	f04f 0400 	mov.w	r4, #0
 8001768:	461a      	mov	r2, r3
 800176a:	4623      	mov	r3, r4
 800176c:	f7fe fd4a 	bl	8000204 <__aeabi_uldivmod>
 8001770:	4603      	mov	r3, r0
 8001772:	460c      	mov	r4, r1
 8001774:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001776:	e04d      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001778:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	099b      	lsrs	r3, r3, #6
 800177e:	f04f 0400 	mov.w	r4, #0
 8001782:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	ea01 0103 	and.w	r1, r1, r3
 800178e:	ea02 0204 	and.w	r2, r2, r4
 8001792:	460b      	mov	r3, r1
 8001794:	4614      	mov	r4, r2
 8001796:	0160      	lsls	r0, r4, #5
 8001798:	6478      	str	r0, [r7, #68]	; 0x44
 800179a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800179c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80017a0:	6478      	str	r0, [r7, #68]	; 0x44
 80017a2:	015b      	lsls	r3, r3, #5
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
 80017a6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80017aa:	1a5b      	subs	r3, r3, r1
 80017ac:	eb64 0402 	sbc.w	r4, r4, r2
 80017b0:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 80017b4:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 80017b8:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 80017bc:	ebba 0a03 	subs.w	sl, sl, r3
 80017c0:	eb6b 0b04 	sbc.w	fp, fp, r4
 80017c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017d8:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80017dc:	eb1a 0a01 	adds.w	sl, sl, r1
 80017e0:	eb4b 0b02 	adc.w	fp, fp, r2
 80017e4:	ea4f 238b 	mov.w	r3, fp, lsl #10
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
 80017f2:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
 80017f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80017fc:	4650      	mov	r0, sl
 80017fe:	4659      	mov	r1, fp
 8001800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001802:	f04f 0400 	mov.w	r4, #0
 8001806:	461a      	mov	r2, r3
 8001808:	4623      	mov	r3, r4
 800180a:	f7fe fcfb 	bl	8000204 <__aeabi_uldivmod>
 800180e:	4603      	mov	r3, r0
 8001810:	460c      	mov	r4, r1
 8001812:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001824:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800182e:	e0b4      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001830:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001838:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d054      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	f04f 0400 	mov.w	r4, #0
 8001850:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	ea01 0103 	and.w	r1, r1, r3
 800185c:	ea02 0204 	and.w	r2, r2, r4
 8001860:	460b      	mov	r3, r1
 8001862:	4614      	mov	r4, r2
 8001864:	0160      	lsls	r0, r4, #5
 8001866:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800186a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800186e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
 8001874:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001878:	1a5b      	subs	r3, r3, r1
 800187a:	eb64 0402 	sbc.w	r4, r4, r2
 800187e:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001882:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001886:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800188a:	ebb8 0803 	subs.w	r8, r8, r3
 800188e:	eb69 0904 	sbc.w	r9, r9, r4
 8001892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018aa:	eb18 0801 	adds.w	r8, r8, r1
 80018ae:	eb49 0902 	adc.w	r9, r9, r2
 80018b2:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018ca:	4640      	mov	r0, r8
 80018cc:	4649      	mov	r1, r9
 80018ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	f7fe fc94 	bl	8000204 <__aeabi_uldivmod>
 80018dc:	4603      	mov	r3, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018e2:	e04b      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x338>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x364>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	f04f 0400 	mov.w	r4, #0
 80018fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	ea01 0103 	and.w	r1, r1, r3
 8001906:	ea02 0204 	and.w	r2, r2, r4
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	0160      	lsls	r0, r4, #5
 8001910:	6178      	str	r0, [r7, #20]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001918:	6178      	str	r0, [r7, #20]
 800191a:	015b      	lsls	r3, r3, #5
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001922:	1a5b      	subs	r3, r3, r1
 8001924:	eb64 0402 	sbc.w	r4, r4, r2
 8001928:	01a6      	lsls	r6, r4, #6
 800192a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800192e:	019d      	lsls	r5, r3, #6
 8001930:	1aed      	subs	r5, r5, r3
 8001932:	eb66 0604 	sbc.w	r6, r6, r4
 8001936:	00f3      	lsls	r3, r6, #3
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	00eb      	lsls	r3, r5, #3
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800194a:	186d      	adds	r5, r5, r1
 800194c:	eb46 0602 	adc.w	r6, r6, r2
 8001950:	02b3      	lsls	r3, r6, #10
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	02ab      	lsls	r3, r5, #10
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001964:	4628      	mov	r0, r5
 8001966:	4631      	mov	r1, r6
 8001968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800196a:	f04f 0400 	mov.w	r4, #0
 800196e:	461a      	mov	r2, r3
 8001970:	4623      	mov	r3, r4
 8001972:	f7fe fc47 	bl	8000204 <__aeabi_uldivmod>
 8001976:	4603      	mov	r3, r0
 8001978:	460c      	mov	r4, r1
 800197a:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x364>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0f1b      	lsrs	r3, r3, #28
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001988:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800198a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001992:	e002      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetSysClockFreq+0x368>)
 8001996:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800199c:	4618      	mov	r0, r3
 800199e:	3784      	adds	r7, #132	; 0x84
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	00f42400 	.word	0x00f42400

080019b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8083 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ca:	4b95      	ldr	r3, [pc, #596]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d019      	beq.n	8001a0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019d6:	4b92      	ldr	r3, [pc, #584]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019e2:	4b8f      	ldr	r3, [pc, #572]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ee:	d00c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f0:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d112      	bne.n	8001a22 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fc:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a08:	d10b      	bne.n	8001a22 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4b85      	ldr	r3, [pc, #532]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d05b      	beq.n	8001ace <HAL_RCC_OscConfig+0x11e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d157      	bne.n	8001ace <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e216      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x8a>
 8001a2c:	4a7c      	ldr	r2, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e01d      	b.n	8001a76 <HAL_RCC_OscConfig+0xc6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0xae>
 8001a44:	4a76      	ldr	r2, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4a73      	ldr	r2, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a52:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0xc6>
 8001a5e:	4a70      	ldr	r2, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a60:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4a6d      	ldr	r2, [pc, #436]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d013      	beq.n	8001aa6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fdaf 	bl	80005e0 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a86:	f7fe fdab 	bl	80005e0 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1db      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a98:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0xd6>
 8001aa4:	e014      	b.n	8001ad0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7fe fd9b 	bl	80005e0 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aae:	f7fe fd97 	bl	80005e0 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b64      	cmp	r3, #100	; 0x64
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1c7      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac0:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0xfe>
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d06f      	beq.n	8001bbc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001adc:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d017      	beq.n	8001b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af4:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d11c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d116      	bne.n	8001b46 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x180>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e18f      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	493b      	ldr	r1, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b32:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b44:	e03a      	b.n	8001bbc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d020      	beq.n	8001b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4e:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7fe fd44 	bl	80005e0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7fe fd40 	bl	80005e0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e170      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4929      	ldr	r1, [pc, #164]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
 8001b8e:	e015      	b.n	8001bbc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7fe fd23 	bl	80005e0 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7fe fd1f 	bl	80005e0 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e14f      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d037      	beq.n	8001c38 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d016      	beq.n	8001bfe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7fe fd03 	bl	80005e0 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7fe fcff 	bl	80005e0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e12f      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x22e>
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7fe fcec 	bl	80005e0 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0a:	e00f      	b.n	8001c2c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fce8 	bl	80005e0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d908      	bls.n	8001c2c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e118      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	42470000 	.word	0x42470000
 8001c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4b8a      	ldr	r3, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e9      	bne.n	8001c0c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8097 	beq.w	8001d74 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4a7f      	ldr	r2, [pc, #508]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b7c      	ldr	r3, [pc, #496]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c72:	2301      	movs	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c82:	4a76      	ldr	r2, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe fca7 	bl	80005e0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7fe fca3 	bl	80005e0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0d3      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x31a>
 8001cbc:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	4b66      	ldr	r3, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	e01c      	b.n	8001d04 <HAL_RCC_OscConfig+0x354>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x33c>
 8001cd2:	4a61      	ldr	r2, [pc, #388]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cd4:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	4a5e      	ldr	r2, [pc, #376]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0x354>
 8001cec:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cee:	4b5a      	ldr	r3, [pc, #360]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf8:	4a57      	ldr	r2, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cfa:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	f023 0304 	bic.w	r3, r3, #4
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d015      	beq.n	8001d38 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7fe fc68 	bl	80005e0 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7fe fc64 	bl	80005e0 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e092      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0ee      	beq.n	8001d14 <HAL_RCC_OscConfig+0x364>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7fe fc52 	bl	80005e0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7fe fc4e 	bl	80005e0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e07c      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ee      	bne.n	8001d40 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d068      	beq.n	8001e4e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d060      	beq.n	8001e4a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d145      	bne.n	8001e1c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d90:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <HAL_RCC_OscConfig+0x4b0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7fe fc23 	bl	80005e0 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fc1f 	bl	80005e0 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e04f      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbc:	4926      	ldr	r1, [pc, #152]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	019b      	lsls	r3, r3, #6
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	041b      	lsls	r3, r3, #16
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	061b      	lsls	r3, r3, #24
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	071b      	lsls	r3, r3, #28
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCC_OscConfig+0x4b0>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe fbf4 	bl	80005e0 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fbf0 	bl	80005e0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e020      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x44c>
 8001e1a:	e018      	b.n	8001e4e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x4b0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7fe fbdd 	bl	80005e0 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7fe fbd9 	bl	80005e0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e009      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x4a8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x47a>
 8001e48:	e001      	b.n	8001e4e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	42470060 	.word	0x42470060

08001e64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e083      	b.n	8001f7e <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7f5b      	ldrb	r3, [r3, #29]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f002 f8b2 	bl	8003ff0 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	22ca      	movs	r2, #202	; 0xca
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2253      	movs	r2, #83	; 0x53
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fc54 	bl	8002750 <RTC_EnterInitMode>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	22ff      	movs	r2, #255	; 0xff
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e05e      	b.n	8001f7e <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ed2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	6891      	ldr	r1, [r2, #8]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6850      	ldr	r0, [r2, #4]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6912      	ldr	r2, [r2, #16]
 8001ee6:	4310      	orrs	r0, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6952      	ldr	r2, [r2, #20]
 8001eec:	4302      	orrs	r2, r0
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68d2      	ldr	r2, [r2, #12]
 8001efa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	6911      	ldr	r1, [r2, #16]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6892      	ldr	r2, [r2, #8]
 8001f0a:	0412      	lsls	r2, r2, #16
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	68d2      	ldr	r2, [r2, #12]
 8001f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10e      	bne.n	8001f4c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fbe6 	bl	8002700 <HAL_RTC_WaitForSynchro>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	22ff      	movs	r2, #255	; 0xff
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2204      	movs	r2, #4
 8001f46:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e018      	b.n	8001f7e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6992      	ldr	r2, [r2, #24]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	22ff      	movs	r2, #255	; 0xff
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f86:	b590      	push	{r4, r7, lr}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	7f1b      	ldrb	r3, [r3, #28]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RTC_SetTime+0x1c>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0b2      	b.n	8002108 <HAL_RTC_SetTime+0x182>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2202      	movs	r2, #2
 8001fac:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d126      	bne.n	8002002 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fbeb 	bl	80027a8 <RTC_ByteToBcd2>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	785b      	ldrb	r3, [r3, #1]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fbe4 	bl	80027a8 <RTC_ByteToBcd2>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fe4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	789b      	ldrb	r3, [r3, #2]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fbdc 	bl	80027a8 <RTC_ByteToBcd2>
 8001ff0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ff2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e020      	b.n	8002044 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fbe5 	bl	80027e4 <RTC_Bcd2ToByte>
 800201a:	4603      	mov	r3, r0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e002      	b.n	8002026 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2200      	movs	r2, #0
 8002024:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002032:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002038:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	78db      	ldrb	r3, [r3, #3]
 800203e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	22ca      	movs	r2, #202	; 0xca
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2253      	movs	r2, #83	; 0x53
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fb7b 	bl	8002750 <RTC_EnterInitMode>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	22ff      	movs	r2, #255	; 0xff
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2204      	movs	r2, #4
 800206c:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e047      	b.n	8002108 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002082:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002086:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	6892      	ldr	r2, [r2, #8]
 8002092:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002096:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	6891      	ldr	r1, [r2, #8]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	68d0      	ldr	r0, [r2, #12]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	6912      	ldr	r2, [r2, #16]
 80020aa:	4302      	orrs	r2, r0
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	68d2      	ldr	r2, [r2, #12]
 80020ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020be:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d111      	bne.n	80020f2 <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fb16 	bl	8002700 <HAL_RTC_WaitForSynchro>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	22ff      	movs	r2, #255	; 0xff
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2204      	movs	r2, #4
 80020e6:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00a      	b.n	8002108 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	22ff      	movs	r2, #255	; 0xff
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 8002106:	2300      	movs	r3, #0
  }
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}

08002110 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002142:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11a      	bne.n	80021c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fb27 	bl	80027e4 <RTC_Bcd2ToByte>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb1e 	bl	80027e4 <RTC_Bcd2ToByte>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	789b      	ldrb	r3, [r3, #2]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fb15 	bl	80027e4 <RTC_Bcd2ToByte>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	7f1b      	ldrb	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_RTC_SetDate+0x1c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e094      	b.n	8002312 <HAL_RTC_SetDate+0x146>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2202      	movs	r2, #2
 80021f2:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <HAL_RTC_SetDate+0x4c>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	f023 0310 	bic.w	r3, r3, #16
 800220e:	b2db      	uxtb	r3, r3
 8002210:	330a      	adds	r3, #10
 8002212:	b2da      	uxtb	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d11c      	bne.n	8002258 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	78db      	ldrb	r3, [r3, #3]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fac0 	bl	80027a8 <RTC_ByteToBcd2>
 8002228:	4603      	mov	r3, r0
 800222a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	785b      	ldrb	r3, [r3, #1]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fab9 	bl	80027a8 <RTC_ByteToBcd2>
 8002236:	4603      	mov	r3, r0
 8002238:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800223a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	789b      	ldrb	r3, [r3, #2]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fab1 	bl	80027a8 <RTC_ByteToBcd2>
 8002246:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002248:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e00e      	b.n	8002276 <HAL_RTC_SetDate+0xaa>
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(datetmpreg));
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	78db      	ldrb	r3, [r3, #3]
 800225c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002264:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800226a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	22ca      	movs	r2, #202	; 0xca
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2253      	movs	r2, #83	; 0x53
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fa62 	bl	8002750 <RTC_EnterInitMode>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2204      	movs	r2, #4
 800229e:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e033      	b.n	8002312 <HAL_RTC_SetDate+0x146>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022b8:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	68d2      	ldr	r2, [r2, #12]
 80022c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c8:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fa11 	bl	8002700 <HAL_RTC_WaitForSynchro>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RTC_SetDate+0x130>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2204      	movs	r2, #4
 80022f0:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e00a      	b.n	8002312 <HAL_RTC_SetDate+0x146>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	22ff      	movs	r2, #255	; 0xff
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 8002310:	2300      	movs	r3, #0
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}

0800231a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
          
  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002334:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002338:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	0b5b      	lsrs	r3, r3, #13
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11a      	bne.n	80023ae <HAL_RTC_GetDate+0x94>
  {    
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	78db      	ldrb	r3, [r3, #3]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fa31 	bl	80027e4 <RTC_Bcd2ToByte>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fa28 	bl	80027e4 <RTC_Bcd2ToByte>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	789b      	ldrb	r3, [r3, #2]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fa1f 	bl	80027e4 <RTC_Bcd2ToByte>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80023cc:	4ba1      	ldr	r3, [pc, #644]	; (8002654 <HAL_RTC_SetAlarm_IT+0x29c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4aa1      	ldr	r2, [pc, #644]	; (8002658 <HAL_RTC_SetAlarm_IT+0x2a0>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0adb      	lsrs	r3, r3, #11
 80023d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	7f1b      	ldrb	r3, [r3, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_RTC_SetAlarm_IT+0x36>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e12e      	b.n	800264c <HAL_RTC_SetAlarm_IT+0x294>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2202      	movs	r2, #2
 80023f8:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d137      	bne.n	8002470 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f9c5 	bl	80027a8 <RTC_ByteToBcd2>
 800241e:	4603      	mov	r3, r0
 8002420:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f9be 	bl	80027a8 <RTC_ByteToBcd2>
 800242c:	4603      	mov	r3, r0
 800242e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002430:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	789b      	ldrb	r3, [r3, #2]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f9b6 	bl	80027a8 <RTC_ByteToBcd2>
 800243c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800243e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	78db      	ldrb	r3, [r3, #3]
 8002446:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002448:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f9a8 	bl	80027a8 <RTC_ByteToBcd2>
 8002458:	4603      	mov	r3, r0
 800245a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800245c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002464:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800246a:	4313      	orrs	r3, r2
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e040      	b.n	80024f2 <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f9ae 	bl	80027e4 <RTC_Bcd2ToByte>
 8002488:	4603      	mov	r3, r0
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	e002      	b.n	8002494 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f99e 	bl	80027e4 <RTC_Bcd2ToByte>
 80024a8:	4603      	mov	r3, r0
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e007      	b.n	80024be <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f995 	bl	80027e4 <RTC_Bcd2ToByte>
 80024ba:	4603      	mov	r3, r0
 80024bc:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80024ca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80024d0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80024d8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80024e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80024e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	22ca      	movs	r2, #202	; 0xca
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2253      	movs	r2, #83	; 0x53
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002516:	d141      	bne.n	800259c <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002526:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002538:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1e5a      	subs	r2, r3, #1
 800253e:	617a      	str	r2, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	22ff      	movs	r2, #255	; 0xff
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2203      	movs	r2, #3
 8002550:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e077      	b.n	800264c <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0e7      	beq.n	800253a <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002588:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	6892      	ldr	r2, [r2, #8]
 8002594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	e040      	b.n	800261e <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025aa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	68d2      	ldr	r2, [r2, #12]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80025bc:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	617a      	str	r2, [r7, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2203      	movs	r2, #3
 80025d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e035      	b.n	800264c <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0e7      	beq.n	80025be <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800261c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002628:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <HAL_RTC_SetAlarm_IT+0x2a4>)
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RTC_SetAlarm_IT+0x2a4>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3724      	adds	r7, #36	; 0x24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	2000000c 	.word	0x2000000c
 8002658:	10624dd3 	.word	0x10624dd3
 800265c:	40013c00 	.word	0x40013c00

08002660 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f831 	bl	80026ec <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	68d2      	ldr	r2, [r2, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800269a:	60da      	str	r2, [r3, #12]
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f8b1 	bl	8002820 <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	68d2      	ldr	r2, [r2, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80026ce:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RTC_AlarmIRQHandler+0x88>)
 80026d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026d6:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	775a      	strb	r2, [r3, #29]
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800271a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800271c:	f7fd ff60 	bl	80005e0 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002722:	e009      	b.n	8002738 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002724:	f7fd ff5c 	bl	80005e0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002732:	d901      	bls.n	8002738 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e007      	b.n	8002748 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d119      	bne.n	800279e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f04f 32ff 	mov.w	r2, #4294967295
 8002772:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002774:	f7fd ff34 	bl	80005e0 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800277a:	e009      	b.n	8002790 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800277c:	f7fd ff30 	bl	80005e0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278a:	d901      	bls.n	8002790 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e007      	b.n	80027a0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 80027b6:	e005      	b.n	80027c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	3b0a      	subs	r3, #10
 80027c2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	d8f6      	bhi.n	80027b8 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4413      	add	r3, r2
 8002812:	b2db      	uxtb	r3, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e01d      	b.n	8002882 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f001 fbe4 	bl	8004028 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3304      	adds	r3, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f000 f904 	bl	8002a80 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}  
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fa10 	bl	8002cc4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_TIM_PWM_Start+0x60>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_TIM_PWM_Start+0x2c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <HAL_TIM_PWM_Start+0x64>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_TIM_PWM_Start+0x30>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_TIM_PWM_Start+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
} 
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800290a:	2302      	movs	r3, #2
 800290c:	e0b4      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x184>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	f200 809f 	bhi.w	8002a64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002961 	.word	0x08002961
 8002930:	08002a65 	.word	0x08002a65
 8002934:	08002a65 	.word	0x08002a65
 8002938:	08002a65 	.word	0x08002a65
 800293c:	080029a1 	.word	0x080029a1
 8002940:	08002a65 	.word	0x08002a65
 8002944:	08002a65 	.word	0x08002a65
 8002948:	08002a65 	.word	0x08002a65
 800294c:	080029e3 	.word	0x080029e3
 8002950:	08002a65 	.word	0x08002a65
 8002954:	08002a65 	.word	0x08002a65
 8002958:	08002a65 	.word	0x08002a65
 800295c:	08002a23 	.word	0x08002a23
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f9d0 	bl	8002d0c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	6992      	ldr	r2, [r2, #24]
 8002976:	f042 0208 	orr.w	r2, r2, #8
 800297a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	6992      	ldr	r2, [r2, #24]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	6991      	ldr	r1, [r2, #24]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	6912      	ldr	r2, [r2, #16]
 800299a:	430a      	orrs	r2, r1
 800299c:	619a      	str	r2, [r3, #24]
    }
    break;
 800299e:	e062      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f914 	bl	8002bd4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	6992      	ldr	r2, [r2, #24]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ba:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	6992      	ldr	r2, [r2, #24]
 80029c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	6991      	ldr	r1, [r2, #24]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	6912      	ldr	r2, [r2, #16]
 80029da:	0212      	lsls	r2, r2, #8
 80029dc:	430a      	orrs	r2, r1
 80029de:	619a      	str	r2, [r3, #24]
    }
    break;
 80029e0:	e041      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fa03 	bl	8002df4 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	69d2      	ldr	r2, [r2, #28]
 80029f8:	f042 0208 	orr.w	r2, r2, #8
 80029fc:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	69d2      	ldr	r2, [r2, #28]
 8002a08:	f022 0204 	bic.w	r2, r2, #4
 8002a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	69d1      	ldr	r1, [r2, #28]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	6912      	ldr	r2, [r2, #16]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	61da      	str	r2, [r3, #28]
    }
    break;
 8002a20:	e021      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fa5b 	bl	8002ee4 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	69d2      	ldr	r2, [r2, #28]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	69d2      	ldr	r2, [r2, #28]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	69d1      	ldr	r1, [r2, #28]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	6912      	ldr	r2, [r2, #16]
 8002a5c:	0212      	lsls	r2, r2, #8
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	61da      	str	r2, [r3, #28]
    }
    break;
 8002a62:	e000      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8002a64:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a44      	ldr	r2, [pc, #272]	; (8002ba8 <TIM_Base_SetConfig+0x128>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <TIM_Base_SetConfig+0x44>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa2:	d00f      	beq.n	8002ac4 <TIM_Base_SetConfig+0x44>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a41      	ldr	r2, [pc, #260]	; (8002bac <TIM_Base_SetConfig+0x12c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00b      	beq.n	8002ac4 <TIM_Base_SetConfig+0x44>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <TIM_Base_SetConfig+0x130>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d007      	beq.n	8002ac4 <TIM_Base_SetConfig+0x44>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	; (8002bb4 <TIM_Base_SetConfig+0x134>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <TIM_Base_SetConfig+0x44>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3e      	ldr	r2, [pc, #248]	; (8002bb8 <TIM_Base_SetConfig+0x138>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <TIM_Base_SetConfig+0x48>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <TIM_Base_SetConfig+0x4a>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a31      	ldr	r2, [pc, #196]	; (8002ba8 <TIM_Base_SetConfig+0x128>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02b      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d027      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <TIM_Base_SetConfig+0x12c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d023      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <TIM_Base_SetConfig+0x130>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01f      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <TIM_Base_SetConfig+0x134>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d01b      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <TIM_Base_SetConfig+0x138>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d017      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <TIM_Base_SetConfig+0x13c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <TIM_Base_SetConfig+0x140>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00f      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <TIM_Base_SetConfig+0x144>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <TIM_Base_SetConfig+0x148>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <TIM_Base_SetConfig+0x14c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <TIM_Base_SetConfig+0xc0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <TIM_Base_SetConfig+0x150>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <TIM_Base_SetConfig+0xc4>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <TIM_Base_SetConfig+0xc6>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <TIM_Base_SetConfig+0x128>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_Base_SetConfig+0x102>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <TIM_Base_SetConfig+0x138>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <TIM_Base_SetConfig+0x106>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <TIM_Base_SetConfig+0x108>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	615a      	str	r2, [r3, #20]
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40010000 	.word	0x40010000
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40000c00 	.word	0x40000c00
 8002bb8:	40010400 	.word	0x40010400
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800
 8002bc8:	40001800 	.word	0x40001800
 8002bcc:	40001c00 	.word	0x40001c00
 8002bd0:	40002000 	.word	0x40002000

08002bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f023 0210 	bic.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c16:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0320 	bic.w	r3, r3, #32
 8002c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <TIM_OC2_SetConfig+0xe8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_OC2_SetConfig+0x74>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <TIM_OC2_SetConfig+0xec>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <TIM_OC2_SetConfig+0x78>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <TIM_OC2_SetConfig+0x7a>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d021      	beq.n	8002c96 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f023 0201 	bic.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0302 	bic.w	r3, r3, #2
 8002d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <TIM_OC1_SetConfig+0xe0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_OC1_SetConfig+0x70>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <TIM_OC1_SetConfig+0xe4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <TIM_OC1_SetConfig+0x74>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <TIM_OC1_SetConfig+0x76>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01e      	beq.n	8002dc4 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 0308 	bic.w	r3, r3, #8
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	621a      	str	r2, [r3, #32]
} 
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40010400 	.word	0x40010400

08002df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a20      	ldr	r2, [pc, #128]	; (8002edc <TIM_OC3_SetConfig+0xe8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_OC3_SetConfig+0x72>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <TIM_OC3_SetConfig+0xec>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <TIM_OC3_SetConfig+0x76>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <TIM_OC3_SetConfig+0x78>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d021      	beq.n	8002eb4 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e8a:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f26:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <TIM_OC4_SetConfig+0xb8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_OC4_SetConfig+0x74>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <TIM_OC4_SetConfig+0xbc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <TIM_OC4_SetConfig+0x78>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <TIM_OC4_SetConfig+0x7a>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	019b      	lsls	r3, r3, #6
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40010000 	.word	0x40010000
 8002fa0:	40010400 	.word	0x40010400

08002fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e032      	b.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	6852      	ldr	r2, [r2, #4]
 8002fd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fda:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	6851      	ldr	r1, [r2, #4]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ffc:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	6891      	ldr	r1, [r2, #8]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	6852      	ldr	r2, [r2, #4]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
} 
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003046:	2302      	movs	r3, #2
 8003048:	e044      	b.n	80030d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e03f      	b.n	8003172 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f001 f89e 	bl	8004248 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003122:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f829 	bl	800317c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	6912      	ldr	r2, [r2, #16]
 8003134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	6952      	ldr	r2, [r2, #20]
 8003144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003148:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	68d2      	ldr	r2, [r2, #12]
 8003154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003158:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003196:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80031b8:	f023 030c 	bic.w	r3, r3, #12
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f0:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320c:	f040 80e4 	bne.w	80033d8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4aab      	ldr	r2, [pc, #684]	; (80034c4 <UART_SetConfig+0x348>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <UART_SetConfig+0xa8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4aaa      	ldr	r2, [pc, #680]	; (80034c8 <UART_SetConfig+0x34c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d16c      	bne.n	80032fe <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681c      	ldr	r4, [r3, #0]
 8003228:	f7fd fece 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 800322c:	4602      	mov	r2, r0
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	4aa2      	ldr	r2, [pc, #648]	; (80034cc <UART_SetConfig+0x350>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	011d      	lsls	r5, r3, #4
 800324c:	f7fd febc 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 8003250:	4602      	mov	r2, r0
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009a      	lsls	r2, r3, #2
 800325a:	441a      	add	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fbb2 f6f3 	udiv	r6, r2, r3
 8003266:	f7fd feaf 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 800326a:	4602      	mov	r2, r0
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009a      	lsls	r2, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	4a92      	ldr	r2, [pc, #584]	; (80034cc <UART_SetConfig+0x350>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2264      	movs	r2, #100	; 0x64
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	1af3      	subs	r3, r6, r3
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	3332      	adds	r3, #50	; 0x32
 8003294:	4a8d      	ldr	r2, [pc, #564]	; (80034cc <UART_SetConfig+0x350>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a2:	441d      	add	r5, r3
 80032a4:	f7fd fe90 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009a      	lsls	r2, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80032be:	f7fd fe83 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	4a7c      	ldr	r2, [pc, #496]	; (80034cc <UART_SetConfig+0x350>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2264      	movs	r2, #100	; 0x64
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	1af3      	subs	r3, r6, r3
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	3332      	adds	r3, #50	; 0x32
 80032ec:	4a77      	ldr	r2, [pc, #476]	; (80034cc <UART_SetConfig+0x350>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	442b      	add	r3, r5
 80032fa:	60a3      	str	r3, [r4, #8]
 80032fc:	e154      	b.n	80035a8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681c      	ldr	r4, [r3, #0]
 8003302:	f7fd fe4d 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 8003306:	4602      	mov	r2, r0
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	4a6b      	ldr	r2, [pc, #428]	; (80034cc <UART_SetConfig+0x350>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	011d      	lsls	r5, r3, #4
 8003326:	f7fd fe3b 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 800332a:	4602      	mov	r2, r0
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009a      	lsls	r2, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003340:	f7fd fe2e 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 8003344:	4602      	mov	r2, r0
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	009a      	lsls	r2, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	4a5c      	ldr	r2, [pc, #368]	; (80034cc <UART_SetConfig+0x350>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2264      	movs	r2, #100	; 0x64
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	1af3      	subs	r3, r6, r3
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a57      	ldr	r2, [pc, #348]	; (80034cc <UART_SetConfig+0x350>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800337c:	441d      	add	r5, r3
 800337e:	f7fd fe0f 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 8003382:	4602      	mov	r2, r0
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009a      	lsls	r2, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fbb2 f6f3 	udiv	r6, r2, r3
 8003398:	f7fd fe02 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 800339c:	4602      	mov	r2, r0
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009a      	lsls	r2, r3, #2
 80033a6:	441a      	add	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	4a46      	ldr	r2, [pc, #280]	; (80034cc <UART_SetConfig+0x350>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	2264      	movs	r2, #100	; 0x64
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	1af3      	subs	r3, r6, r3
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	3332      	adds	r3, #50	; 0x32
 80033c6:	4a41      	ldr	r2, [pc, #260]	; (80034cc <UART_SetConfig+0x350>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	442b      	add	r3, r5
 80033d4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80033d6:	e0e7      	b.n	80035a8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a39      	ldr	r2, [pc, #228]	; (80034c4 <UART_SetConfig+0x348>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <UART_SetConfig+0x270>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <UART_SetConfig+0x34c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d171      	bne.n	80034d0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681c      	ldr	r4, [r3, #0]
 80033f0:	f7fd fdea 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	4a30      	ldr	r2, [pc, #192]	; (80034cc <UART_SetConfig+0x350>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	011d      	lsls	r5, r3, #4
 8003414:	f7fd fdd8 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 8003418:	4602      	mov	r2, r0
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	441a      	add	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	fbb2 f6f3 	udiv	r6, r2, r3
 800342e:	f7fd fdcb 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 8003432:	4602      	mov	r2, r0
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	4a20      	ldr	r2, [pc, #128]	; (80034cc <UART_SetConfig+0x350>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2264      	movs	r2, #100	; 0x64
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	1af3      	subs	r3, r6, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <UART_SetConfig+0x350>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	441d      	add	r5, r3
 800346a:	f7fd fdad 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 800346e:	4602      	mov	r2, r0
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009a      	lsls	r2, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fbb2 f6f3 	udiv	r6, r2, r3
 8003484:	f7fd fda0 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 8003488:	4602      	mov	r2, r0
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <UART_SetConfig+0x350>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2264      	movs	r2, #100	; 0x64
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	1af3      	subs	r3, r6, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a06      	ldr	r2, [pc, #24]	; (80034cc <UART_SetConfig+0x350>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	442b      	add	r3, r5
 80034c0:	60a3      	str	r3, [r4, #8]
 80034c2:	e071      	b.n	80035a8 <UART_SetConfig+0x42c>
 80034c4:	40011000 	.word	0x40011000
 80034c8:	40011400 	.word	0x40011400
 80034cc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681c      	ldr	r4, [r3, #0]
 80034d4:	f7fd fd64 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009a      	lsls	r2, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	4a30      	ldr	r2, [pc, #192]	; (80035b0 <UART_SetConfig+0x434>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	011d      	lsls	r5, r3, #4
 80034f8:	f7fd fd52 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003512:	f7fd fd45 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 8003516:	4602      	mov	r2, r0
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009a      	lsls	r2, r3, #2
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <UART_SetConfig+0x434>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2264      	movs	r2, #100	; 0x64
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	1af3      	subs	r3, r6, r3
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	3332      	adds	r3, #50	; 0x32
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <UART_SetConfig+0x434>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354c:	441d      	add	r5, r3
 800354e:	f7fd fd27 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 8003552:	4602      	mov	r2, r0
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f6f3 	udiv	r6, r2, r3
 8003568:	f7fd fd1a 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 800356c:	4602      	mov	r2, r0
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009a      	lsls	r2, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <UART_SetConfig+0x434>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	2264      	movs	r2, #100	; 0x64
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	1af3      	subs	r3, r6, r3
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	3332      	adds	r3, #50	; 0x32
 8003596:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <UART_SetConfig+0x434>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	442b      	add	r3, r5
 80035a4:	60a3      	str	r3, [r4, #8]
}
 80035a6:	e7ff      	b.n	80035a8 <UART_SetConfig+0x42c>
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b0:	51eb851f 	.word	0x51eb851f

080035b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035b8:	f7fc ffac 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035bc:	f000 f8d0 	bl	8003760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035c0:	f000 fbe4 	bl	8003d8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80035c4:	f000 fbb8 	bl	8003d38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80035c8:	f000 f95a 	bl	8003880 <MX_I2C1_Init>
  MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 80035cc:	2000      	movs	r0, #0
 80035ce:	f000 facb 	bl	8003b68 <MX_TIM4_Init>
  MX_TIM3_Init(0);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f000 fa6a 	bl	8003aac <MX_TIM3_Init>
  MX_TIM8_Init(0);
 80035d8:	2000      	movs	r0, #0
 80035da:	f000 fb23 	bl	8003c24 <MX_TIM8_Init>
  MX_TIM2_Init(0);
 80035de:	2000      	movs	r0, #0
 80035e0:	f000 fa08 	bl	80039f4 <MX_TIM2_Init>
  MX_RTC_Init();
 80035e4:	f000 f97a 	bl	80038dc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // This line turns the on-board LED2 on. Only for test purpose. Delete eventually.
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80035e8:	2201      	movs	r2, #1
 80035ea:	2120      	movs	r1, #32
 80035ec:	4848      	ldr	r0, [pc, #288]	; (8003710 <main+0x15c>)
 80035ee:	f7fd fab9 	bl	8000b64 <HAL_GPIO_WritePin>

  // This line reads the state of channel A
  previousA = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80035f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035f6:	4846      	ldr	r0, [pc, #280]	; (8003710 <main+0x15c>)
 80035f8:	f7fd fa9c 	bl	8000b34 <HAL_GPIO_ReadPin>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	4b44      	ldr	r3, [pc, #272]	; (8003714 <main+0x160>)
 8003602:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  //Set time, data and alarm
  	//1) Set time
  	myTime.Hours = 12;
 8003604:	4b44      	ldr	r3, [pc, #272]	; (8003718 <main+0x164>)
 8003606:	220c      	movs	r2, #12
 8003608:	701a      	strb	r2, [r3, #0]
  	myTime.Minutes = 59;
 800360a:	4b43      	ldr	r3, [pc, #268]	; (8003718 <main+0x164>)
 800360c:	223b      	movs	r2, #59	; 0x3b
 800360e:	705a      	strb	r2, [r3, #1]
  	myTime.Seconds = 45;
 8003610:	4b41      	ldr	r3, [pc, #260]	; (8003718 <main+0x164>)
 8003612:	222d      	movs	r2, #45	; 0x2d
 8003614:	709a      	strb	r2, [r3, #2]
  	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8003616:	2200      	movs	r2, #0
 8003618:	493f      	ldr	r1, [pc, #252]	; (8003718 <main+0x164>)
 800361a:	4840      	ldr	r0, [pc, #256]	; (800371c <main+0x168>)
 800361c:	f7fe fcb3 	bl	8001f86 <HAL_RTC_SetTime>
  	//2) Set date
  	myDate.Date = 6;
 8003620:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <main+0x16c>)
 8003622:	2206      	movs	r2, #6
 8003624:	709a      	strb	r2, [r3, #2]
  	myDate.Month = RTC_MONTH_DECEMBER;
 8003626:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <main+0x16c>)
 8003628:	2212      	movs	r2, #18
 800362a:	705a      	strb	r2, [r3, #1]
  	myDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800362c:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <main+0x16c>)
 800362e:	2204      	movs	r2, #4
 8003630:	701a      	strb	r2, [r3, #0]
  	myDate.Year = 18;
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <main+0x16c>)
 8003634:	2212      	movs	r2, #18
 8003636:	70da      	strb	r2, [r3, #3]
  	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8003638:	2200      	movs	r2, #0
 800363a:	4939      	ldr	r1, [pc, #228]	; (8003720 <main+0x16c>)
 800363c:	4837      	ldr	r0, [pc, #220]	; (800371c <main+0x168>)
 800363e:	f7fe fdc5 	bl	80021cc <HAL_RTC_SetDate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 8003642:	2102      	movs	r1, #2
 8003644:	4837      	ldr	r0, [pc, #220]	; (8003724 <main+0x170>)
 8003646:	f7fd fa75 	bl	8000b34 <HAL_GPIO_ReadPin>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d103      	bne.n	8003658 <main+0xa4>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// Toggles the onboard LED "LD2" to show program is running
 8003650:	2120      	movs	r1, #32
 8003652:	482f      	ldr	r0, [pc, #188]	; (8003710 <main+0x15c>)
 8003654:	f7fd fa9f 	bl	8000b96 <HAL_GPIO_TogglePin>
	  }

	switch (*pReason) {	 		// Interrupt triggers menu display and enables navigation
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <main+0x174>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d020      	beq.n	80036a4 <main+0xf0>
 8003662:	2b03      	cmp	r3, #3
 8003664:	d02d      	beq.n	80036c2 <main+0x10e>
 8003666:	2b01      	cmp	r3, #1
 8003668:	d13a      	bne.n	80036e0 <main+0x12c>
		case 1:
			display_timer = myTime.Minutes; // Set timer to current time
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <main+0x164>)
 800366c:	785a      	ldrb	r2, [r3, #1]
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <main+0x178>)
 8003670:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Turn on LED ring on button
 8003672:	2201      	movs	r2, #1
 8003674:	2120      	movs	r1, #32
 8003676:	482e      	ldr	r0, [pc, #184]	; (8003730 <main+0x17c>)
 8003678:	f7fd fa74 	bl	8000b64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Turn on display
 800367c:	2201      	movs	r2, #1
 800367e:	2140      	movs	r1, #64	; 0x40
 8003680:	4823      	ldr	r0, [pc, #140]	; (8003710 <main+0x15c>)
 8003682:	f7fd fa6f 	bl	8000b64 <HAL_GPIO_WritePin>
			// TODO start menu navigation
			while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 8003686:	e005      	b.n	8003694 <main+0xe0>
				counter++;
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <main+0x180>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <main+0x180>)
 8003692:	701a      	strb	r2, [r3, #0]
			while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 8003694:	2102      	movs	r1, #2
 8003696:	4823      	ldr	r0, [pc, #140]	; (8003724 <main+0x170>)
 8003698:	f7fd fa4c 	bl	8000b34 <HAL_GPIO_ReadPin>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f2      	beq.n	8003688 <main+0xd4>
			}
			break;
 80036a2:	e01d      	b.n	80036e0 <main+0x12c>
		case 2:	// Channel A, CW turning direction
			display_timer = myTime.Minutes; // Set timer to current time
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <main+0x164>)
 80036a6:	785a      	ldrb	r2, [r3, #1]
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <main+0x178>)
 80036aa:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Turn on LED ring on button
 80036ac:	2201      	movs	r2, #1
 80036ae:	2120      	movs	r1, #32
 80036b0:	481f      	ldr	r0, [pc, #124]	; (8003730 <main+0x17c>)
 80036b2:	f7fd fa57 	bl	8000b64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Turn on display
 80036b6:	2201      	movs	r2, #1
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	4815      	ldr	r0, [pc, #84]	; (8003710 <main+0x15c>)
 80036bc:	f7fd fa52 	bl	8000b64 <HAL_GPIO_WritePin>
			// TODO start menu navigation

			break;
 80036c0:	e00e      	b.n	80036e0 <main+0x12c>
		case 3:	// Channel B, CCW turning direction
			display_timer = myTime.Minutes; // Set timer to current time
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <main+0x164>)
 80036c4:	785a      	ldrb	r2, [r3, #1]
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <main+0x178>)
 80036c8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Turn on LED ring on button
 80036ca:	2201      	movs	r2, #1
 80036cc:	2120      	movs	r1, #32
 80036ce:	4818      	ldr	r0, [pc, #96]	; (8003730 <main+0x17c>)
 80036d0:	f7fd fa48 	bl	8000b64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Turn on display
 80036d4:	2201      	movs	r2, #1
 80036d6:	2140      	movs	r1, #64	; 0x40
 80036d8:	480d      	ldr	r0, [pc, #52]	; (8003710 <main+0x15c>)
 80036da:	f7fd fa43 	bl	8000b64 <HAL_GPIO_WritePin>
			// TODO start menu navigation
			break;
 80036de:	bf00      	nop

	}

	*pReason = 0;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <main+0x174>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
	RTC_get_Time_and_Date();
 80036e8:	f000 f826 	bl	8003738 <RTC_get_Time_and_Date>
	if(display_timer != myTime.Minutes){
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <main+0x164>)
 80036ee:	785a      	ldrb	r2, [r3, #1]
 80036f0:	4b0e      	ldr	r3, [pc, #56]	; (800372c <main+0x178>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d0a4      	beq.n	8003642 <main+0x8e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn on LED ring on button
 80036f8:	2200      	movs	r2, #0
 80036fa:	2120      	movs	r1, #32
 80036fc:	480c      	ldr	r0, [pc, #48]	; (8003730 <main+0x17c>)
 80036fe:	f7fd fa31 	bl	8000b64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Turn on display
 8003702:	2200      	movs	r2, #0
 8003704:	2140      	movs	r1, #64	; 0x40
 8003706:	4802      	ldr	r0, [pc, #8]	; (8003710 <main+0x15c>)
 8003708:	f7fd fa2c 	bl	8000b64 <HAL_GPIO_WritePin>
	  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 800370c:	e799      	b.n	8003642 <main+0x8e>
 800370e:	bf00      	nop
 8003710:	40020000 	.word	0x40020000
 8003714:	20000154 	.word	0x20000154
 8003718:	20000038 	.word	0x20000038
 800371c:	2000015c 	.word	0x2000015c
 8003720:	20000158 	.word	0x20000158
 8003724:	40020800 	.word	0x40020800
 8003728:	20000008 	.word	0x20000008
 800372c:	2000017c 	.word	0x2000017c
 8003730:	40020400 	.word	0x40020400
 8003734:	20000030 	.word	0x20000030

08003738 <RTC_get_Time_and_Date>:



/* USER CODE BEGIN RTC_ShowTime */
void RTC_get_Time_and_Date(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
	  //1)Get time
	  HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 800373c:	2200      	movs	r2, #0
 800373e:	4905      	ldr	r1, [pc, #20]	; (8003754 <RTC_get_Time_and_Date+0x1c>)
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <RTC_get_Time_and_Date+0x20>)
 8003742:	f7fe fce5 	bl	8002110 <HAL_RTC_GetTime>
	  //2)Get data
	  HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8003746:	2200      	movs	r2, #0
 8003748:	4904      	ldr	r1, [pc, #16]	; (800375c <RTC_get_Time_and_Date+0x24>)
 800374a:	4803      	ldr	r0, [pc, #12]	; (8003758 <RTC_get_Time_and_Date+0x20>)
 800374c:	f7fe fde5 	bl	800231a <HAL_RTC_GetDate>

}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000038 	.word	0x20000038
 8003758:	2000015c 	.word	0x2000015c
 800375c:	20000158 	.word	0x20000158

08003760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0ac      	sub	sp, #176	; 0xb0
 8003764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003766:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800376a:	2234      	movs	r2, #52	; 0x34
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fea8 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003774:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	225c      	movs	r2, #92	; 0x5c
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fe99 	bl	80044c4 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4a38      	ldr	r2, [pc, #224]	; (8003878 <SystemClock_Config+0x118>)
 8003798:	4b37      	ldr	r3, [pc, #220]	; (8003878 <SystemClock_Config+0x118>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b35      	ldr	r3, [pc, #212]	; (8003878 <SystemClock_Config+0x118>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	4a32      	ldr	r2, [pc, #200]	; (800387c <SystemClock_Config+0x11c>)
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <SystemClock_Config+0x11c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <SystemClock_Config+0x11c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80037ce:	2306      	movs	r3, #6
 80037d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037d8:	2301      	movs	r3, #1
 80037da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037de:	2310      	movs	r3, #16
 80037e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037e4:	2302      	movs	r3, #2
 80037e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 80037f0:	2310      	movs	r3, #16
 80037f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80037f6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80037fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80037fe:	2304      	movs	r3, #4
 8003800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003804:	2302      	movs	r3, #2
 8003806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800380a:	2302      	movs	r3, #2
 800380c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003810:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe f8cb 	bl	80019b0 <HAL_RCC_OscConfig>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003820:	f000 fb6e 	bl	8003f00 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003824:	230f      	movs	r3, #15
 8003826:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003828:	2302      	movs	r3, #2
 800382a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800382c:	2300      	movs	r3, #0
 800382e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003834:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003836:	2300      	movs	r3, #0
 8003838:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800383a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd fabf 	bl	8000dc4 <HAL_RCC_ClockConfig>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800384c:	f000 fb58 	bl	8003f00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003850:	2320      	movs	r3, #32
 8003852:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003858:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fbc6 	bl	8000ff0 <HAL_RCCEx_PeriphCLKConfig>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800386a:	f000 fb49 	bl	8003f00 <Error_Handler>
  }
}
 800386e:	bf00      	nop
 8003870:	37b0      	adds	r7, #176	; 0xb0
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	40007000 	.word	0x40007000

08003880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <MX_I2C1_Init+0x50>)
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <MX_I2C1_Init+0x54>)
 8003888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <MX_I2C1_Init+0x50>)
 800388c:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <MX_I2C1_Init+0x58>)
 800388e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <MX_I2C1_Init+0x50>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <MX_I2C1_Init+0x50>)
 8003898:	2200      	movs	r2, #0
 800389a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <MX_I2C1_Init+0x50>)
 800389e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <MX_I2C1_Init+0x50>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <MX_I2C1_Init+0x50>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <MX_I2C1_Init+0x50>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <MX_I2C1_Init+0x50>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038bc:	4804      	ldr	r0, [pc, #16]	; (80038d0 <MX_I2C1_Init+0x50>)
 80038be:	f7fd f9a1 	bl	8000c04 <HAL_I2C_Init>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038c8:	f000 fb1a 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	200000c4 	.word	0x200000c4
 80038d4:	40005400 	.word	0x40005400
 80038d8:	000186a0 	.word	0x000186a0

080038dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b090      	sub	sp, #64	; 0x40
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80038e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	60da      	str	r2, [r3, #12]
 80038f0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80038f2:	2300      	movs	r3, #0
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80038f6:	463b      	mov	r3, r7
 80038f8:	2228      	movs	r2, #40	; 0x28
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fde1 	bl	80044c4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003902:	4b3a      	ldr	r3, [pc, #232]	; (80039ec <MX_RTC_Init+0x110>)
 8003904:	4a3a      	ldr	r2, [pc, #232]	; (80039f0 <MX_RTC_Init+0x114>)
 8003906:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003908:	4b38      	ldr	r3, [pc, #224]	; (80039ec <MX_RTC_Init+0x110>)
 800390a:	2200      	movs	r2, #0
 800390c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <MX_RTC_Init+0x110>)
 8003910:	227f      	movs	r2, #127	; 0x7f
 8003912:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003914:	4b35      	ldr	r3, [pc, #212]	; (80039ec <MX_RTC_Init+0x110>)
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <MX_RTC_Init+0x110>)
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003920:	4b32      	ldr	r3, [pc, #200]	; (80039ec <MX_RTC_Init+0x110>)
 8003922:	2200      	movs	r2, #0
 8003924:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <MX_RTC_Init+0x110>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800392c:	482f      	ldr	r0, [pc, #188]	; (80039ec <MX_RTC_Init+0x110>)
 800392e:	f7fe fa99 	bl	8001e64 <HAL_RTC_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003938:	f000 fae2 	bl	8003f00 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800393c:	2300      	movs	r3, #0
 800393e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8003942:	2300      	movs	r3, #0
 8003944:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003948:	2300      	movs	r3, #0
 800394a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800394e:	2300      	movs	r3, #0
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800395a:	2201      	movs	r2, #1
 800395c:	4619      	mov	r1, r3
 800395e:	4823      	ldr	r0, [pc, #140]	; (80039ec <MX_RTC_Init+0x110>)
 8003960:	f7fe fb11 	bl	8001f86 <HAL_RTC_SetTime>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800396a:	f000 fac9 	bl	8003f00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x18;
 8003980:	2318      	movs	r3, #24
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800398a:	2201      	movs	r2, #1
 800398c:	4619      	mov	r1, r3
 800398e:	4817      	ldr	r0, [pc, #92]	; (80039ec <MX_RTC_Init+0x110>)
 8003990:	f7fe fc1c 	bl	80021cc <HAL_RTC_SetDate>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800399a:	f000 fab1 	bl	8003f00 <Error_Handler>
  }
  /**Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800399e:	2300      	movs	r3, #0
 80039a0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80039c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80039ce:	463b      	mov	r3, r7
 80039d0:	2201      	movs	r2, #1
 80039d2:	4619      	mov	r1, r3
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_RTC_Init+0x110>)
 80039d6:	f7fe fcef 	bl	80023b8 <HAL_RTC_SetAlarm_IT>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80039e0:	f000 fa8e 	bl	8003f00 <Error_Handler>
  }


}
 80039e4:	bf00      	nop
 80039e6:	3740      	adds	r7, #64	; 0x40
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	2000015c 	.word	0x2000015c
 80039f0:	40002800 	.word	0x40002800

080039f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(int brightness)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08c      	sub	sp, #48	; 0x30
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a06:	f107 030c 	add.w	r3, r7, #12
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	60da      	str	r2, [r3, #12]
 8003a14:	611a      	str	r2, [r3, #16]
 8003a16:	615a      	str	r2, [r3, #20]
 8003a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a1a:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a3a:	481b      	ldr	r0, [pc, #108]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a3c:	f7fe fefa 	bl	8002834 <HAL_TIM_PWM_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003a46:	f000 fa5b 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a56:	4619      	mov	r1, r3
 8003a58:	4813      	ldr	r0, [pc, #76]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a5a:	f7ff faa3 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003a64:	f000 fa4c 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a68:	2360      	movs	r3, #96	; 0x60
 8003a6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = brightness;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4809      	ldr	r0, [pc, #36]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a82:	f7fe ff37 	bl	80028f4 <HAL_TIM_PWM_ConfigChannel>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003a8c:	f000 fa38 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8003a90:	2108      	movs	r1, #8
 8003a92:	4805      	ldr	r0, [pc, #20]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a94:	f7fe fefa 	bl	800288c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003a98:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <MX_TIM2_Init+0xb4>)
 8003a9a:	f000 fb27 	bl	80040ec <HAL_TIM_MspPostInit>

}
 8003a9e:	bf00      	nop
 8003aa0:	3730      	adds	r7, #48	; 0x30
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000180 	.word	0x20000180

08003aac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(int duty)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003abe:	f107 030c 	add.w	r3, r7, #12
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	60da      	str	r2, [r3, #12]
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	615a      	str	r2, [r3, #20]
 8003ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003ad4:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <MX_TIM3_Init+0xb8>)
 8003ad6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8003ad8:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003ada:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003ade:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003ae8:	2264      	movs	r2, #100	; 0x64
 8003aea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003af2:	481b      	ldr	r0, [pc, #108]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003af4:	f7fe fe9e 	bl	8002834 <HAL_TIM_PWM_Init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003afe:	f000 f9ff 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4813      	ldr	r0, [pc, #76]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003b12:	f7ff fa47 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8003b1c:	f000 f9f0 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b20:	2360      	movs	r3, #96	; 0x60
 8003b22:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b30:	f107 030c 	add.w	r3, r7, #12
 8003b34:	2204      	movs	r2, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4809      	ldr	r0, [pc, #36]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003b3a:	f7fe fedb 	bl	80028f4 <HAL_TIM_PWM_ConfigChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003b44:	f000 f9dc 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003b48:	2104      	movs	r1, #4
 8003b4a:	4805      	ldr	r0, [pc, #20]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003b4c:	f7fe fe9e 	bl	800288c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b50:	4803      	ldr	r0, [pc, #12]	; (8003b60 <MX_TIM3_Init+0xb4>)
 8003b52:	f000 facb 	bl	80040ec <HAL_TIM_MspPostInit>

}
 8003b56:	bf00      	nop
 8003b58:	3730      	adds	r7, #48	; 0x30
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000118 	.word	0x20000118
 8003b64:	40000400 	.word	0x40000400

08003b68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(int duty)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	; 0x30
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7a:	f107 030c 	add.w	r3, r7, #12
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	611a      	str	r2, [r3, #16]
 8003b8a:	615a      	str	r2, [r3, #20]
 8003b8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003b90:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <MX_TIM4_Init+0xb8>)
 8003b92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003b96:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003b9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003ba4:	2264      	movs	r2, #100	; 0x64
 8003ba6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003bae:	481b      	ldr	r0, [pc, #108]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003bb0:	f7fe fe40 	bl	8002834 <HAL_TIM_PWM_Init>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003bba:	f000 f9a1 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4813      	ldr	r0, [pc, #76]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003bce:	f7ff f9e9 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8003bd8:	f000 f992 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bdc:	2360      	movs	r3, #96	; 0x60
 8003bde:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bec:	f107 030c 	add.w	r3, r7, #12
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4809      	ldr	r0, [pc, #36]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003bf6:	f7fe fe7d 	bl	80028f4 <HAL_TIM_PWM_ConfigChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003c00:	f000 f97e 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8003c04:	2100      	movs	r1, #0
 8003c06:	4805      	ldr	r0, [pc, #20]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003c08:	f7fe fe40 	bl	800288c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003c0c:	4803      	ldr	r0, [pc, #12]	; (8003c1c <MX_TIM4_Init+0xb4>)
 8003c0e:	f000 fa6d 	bl	80040ec <HAL_TIM_MspPostInit>

}
 8003c12:	bf00      	nop
 8003c14:	3730      	adds	r7, #48	; 0x30
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000088 	.word	0x20000088
 8003c20:	40000800 	.word	0x40000800

08003c24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(int duty)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b092      	sub	sp, #72	; 0x48
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	611a      	str	r2, [r3, #16]
 8003c46:	615a      	str	r2, [r3, #20]
 8003c48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	615a      	str	r2, [r3, #20]
 8003c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003c5e:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003c60:	4a34      	ldr	r2, [pc, #208]	; (8003d34 <MX_TIM8_Init+0x110>)
 8003c62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840;
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003c66:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003c6a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8003c72:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003c74:	2264      	movs	r2, #100	; 0x64
 8003c76:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c78:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c7e:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003c84:	482a      	ldr	r0, [pc, #168]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003c86:	f7fe fdd5 	bl	8002834 <HAL_TIM_PWM_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8003c90:	f000 f936 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c94:	2300      	movs	r3, #0
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4823      	ldr	r0, [pc, #140]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003ca4:	f7ff f97e 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8003cae:	f000 f927 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cb2:	2360      	movs	r3, #96	; 0x60
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = duty;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4816      	ldr	r0, [pc, #88]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003cd8:	f7fe fe0c 	bl	80028f4 <HAL_TIM_PWM_ConfigChannel>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003ce2:	f000 f90d 	bl	8003f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cfe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003d04:	f107 0308 	add.w	r3, r7, #8
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4809      	ldr	r0, [pc, #36]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003d0c:	f7ff f98f 	bl	800302e <HAL_TIMEx_ConfigBreakDeadTime>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003d16:	f000 f8f3 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8003d1a:	2104      	movs	r1, #4
 8003d1c:	4804      	ldr	r0, [pc, #16]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003d1e:	f7fe fdb5 	bl	800288c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003d22:	4803      	ldr	r0, [pc, #12]	; (8003d30 <MX_TIM8_Init+0x10c>)
 8003d24:	f000 f9e2 	bl	80040ec <HAL_TIM_MspPostInit>

}
 8003d28:	bf00      	nop
 8003d2a:	3748      	adds	r7, #72	; 0x48
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	2000004c 	.word	0x2000004c
 8003d34:	40010400 	.word	0x40010400

08003d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <MX_USART2_UART_Init+0x50>)
 8003d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d5e:	220c      	movs	r2, #12
 8003d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d6e:	4805      	ldr	r0, [pc, #20]	; (8003d84 <MX_USART2_UART_Init+0x4c>)
 8003d70:	f7ff f9b6 	bl	80030e0 <HAL_UART_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d7a:	f000 f8c1 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200001bc 	.word	0x200001bc
 8003d88:	40004400 	.word	0x40004400

08003d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d92:	f107 0314 	add.w	r3, r7, #20
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	4a4f      	ldr	r2, [pc, #316]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003da8:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30
 8003db2:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	4a48      	ldr	r2, [pc, #288]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003dc4:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dce:	4b45      	ldr	r3, [pc, #276]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	4a41      	ldr	r2, [pc, #260]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003de0:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dea:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	4a3a      	ldr	r2, [pc, #232]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f043 0302 	orr.w	r3, r3, #2
 8003e04:	6313      	str	r3, [r2, #48]	; 0x30
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <MX_GPIO_Init+0x158>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003e12:	2200      	movs	r2, #0
 8003e14:	2160      	movs	r1, #96	; 0x60
 8003e16:	4834      	ldr	r0, [pc, #208]	; (8003ee8 <MX_GPIO_Init+0x15c>)
 8003e18:	f7fc fea4 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2120      	movs	r1, #32
 8003e20:	4832      	ldr	r0, [pc, #200]	; (8003eec <MX_GPIO_Init+0x160>)
 8003e22:	f7fc fe9f 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin.  */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e2c:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <MX_GPIO_Init+0x164>)
 8003e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4619      	mov	r1, r3
 8003e3a:	482e      	ldr	r0, [pc, #184]	; (8003ef4 <MX_GPIO_Init+0x168>)
 8003e3c:	f7fc fce8 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1. BUTTON */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e40:	2302      	movs	r3, #2
 8003e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <MX_GPIO_Init+0x16c>)
 8003e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	4619      	mov	r1, r3
 8003e52:	4828      	ldr	r0, [pc, #160]	; (8003ef4 <MX_GPIO_Init+0x168>)
 8003e54:	f7fc fcdc 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8003e58:	2360      	movs	r3, #96	; 0x60
 8003e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e64:	2300      	movs	r3, #0
 8003e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	481e      	ldr	r0, [pc, #120]	; (8003ee8 <MX_GPIO_Init+0x15c>)
 8003e70:	f7fc fcce 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9. ROTARY ENCODER channel A and channel B */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e7a:	4b20      	ldr	r3, [pc, #128]	; (8003efc <MX_GPIO_Init+0x170>)
 8003e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	4817      	ldr	r0, [pc, #92]	; (8003ee8 <MX_GPIO_Init+0x15c>)
 8003e8a:	f7fc fcc1 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4811      	ldr	r0, [pc, #68]	; (8003eec <MX_GPIO_Init+0x160>)
 8003ea6:	f7fc fcb3 	bl	8000810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2100      	movs	r1, #0
 8003eae:	2007      	movs	r0, #7
 8003eb0:	f7fc fc77 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003eb4:	2007      	movs	r0, #7
 8003eb6:	f7fc fc90 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	2017      	movs	r0, #23
 8003ec0:	f7fc fc6f 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ec4:	2017      	movs	r0, #23
 8003ec6:	f7fc fc88 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2100      	movs	r1, #0
 8003ece:	2028      	movs	r0, #40	; 0x28
 8003ed0:	f7fc fc67 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ed4:	2028      	movs	r0, #40	; 0x28
 8003ed6:	f7fc fc80 	bl	80007da <HAL_NVIC_EnableIRQ>

}
 8003eda:	bf00      	nop
 8003edc:	3728      	adds	r7, #40	; 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	10210000 	.word	0x10210000
 8003ef4:	40020800 	.word	0x40020800
 8003ef8:	10110000 	.word	0x10110000
 8003efc:	10310000 	.word	0x10310000

08003f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_MspInit+0x4c>)
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_MspInit+0x4c>)
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f24:	6453      	str	r3, [r2, #68]	; 0x44
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_MspInit+0x4c>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <HAL_MspInit+0x4c>)
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_MspInit+0x4c>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_MspInit+0x4c>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f4e:	2007      	movs	r0, #7
 8003f50:	f7fc fc1c 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40023800 	.word	0x40023800

08003f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 0314 	add.w	r3, r7, #20
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_I2C_MspInit+0x84>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d12c      	bne.n	8003fdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_I2C_MspInit+0x88>)
 8003f88:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <HAL_I2C_MspInit+0x88>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	6313      	str	r3, [r2, #48]	; 0x30
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <HAL_I2C_MspInit+0x88>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fa4:	2312      	movs	r3, #18
 8003fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480c      	ldr	r0, [pc, #48]	; (8003fec <HAL_I2C_MspInit+0x8c>)
 8003fbc:	f7fc fc28 	bl	8000810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <HAL_I2C_MspInit+0x88>)
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_I2C_MspInit+0x88>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fce:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_I2C_MspInit+0x88>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003fdc:	bf00      	nop
 8003fde:	3728      	adds	r7, #40	; 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40005400 	.word	0x40005400
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40020400 	.word	0x40020400

08003ff0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <HAL_RTC_MspInit+0x30>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10a      	bne.n	8004018 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_RTC_MspInit+0x34>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004008:	2200      	movs	r2, #0
 800400a:	2100      	movs	r1, #0
 800400c:	2029      	movs	r0, #41	; 0x29
 800400e:	f7fc fbc8 	bl	80007a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004012:	2029      	movs	r0, #41	; 0x29
 8004014:	f7fc fbe1 	bl	80007da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40002800 	.word	0x40002800
 8004024:	42470e3c 	.word	0x42470e3c

08004028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 8004040:	4b26      	ldr	r3, [pc, #152]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004056:	e03a      	b.n	80040ce <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <HAL_TIM_PWM_MspInit+0xb8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10e      	bne.n	8004080 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]
}
 800407e:	e026      	b.n	80040ce <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_TIM_PWM_MspInit+0xbc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	4a13      	ldr	r2, [pc, #76]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6413      	str	r3, [r2, #64]	; 0x40
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	e012      	b.n	80040ce <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_TIM_PWM_MspInit+0xc0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10d      	bne.n	80040ce <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	6453      	str	r3, [r2, #68]	; 0x44
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_TIM_PWM_MspInit+0xb4>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40010400 	.word	0x40010400

080040ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08c      	sub	sp, #48	; 0x30
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 031c 	add.w	r3, r7, #28
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d11f      	bne.n	800414e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	4a46      	ldr	r2, [pc, #280]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 8004114:	4b45      	ldr	r3, [pc, #276]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	6313      	str	r3, [r2, #48]	; 0x30
 800411e:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800412a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800412e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004130:	2302      	movs	r3, #2
 8004132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004138:	2300      	movs	r3, #0
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800413c:	2301      	movs	r3, #1
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004140:	f107 031c 	add.w	r3, r7, #28
 8004144:	4619      	mov	r1, r3
 8004146:	483a      	ldr	r0, [pc, #232]	; (8004230 <HAL_TIM_MspPostInit+0x144>)
 8004148:	f7fc fb62 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800414c:	e06a      	b.n	8004224 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a38      	ldr	r2, [pc, #224]	; (8004234 <HAL_TIM_MspPostInit+0x148>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d11e      	bne.n	8004196 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6313      	str	r3, [r2, #48]	; 0x30
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004178:	2302      	movs	r3, #2
 800417a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004180:	2300      	movs	r3, #0
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004184:	2302      	movs	r3, #2
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004188:	f107 031c 	add.w	r3, r7, #28
 800418c:	4619      	mov	r1, r3
 800418e:	482a      	ldr	r0, [pc, #168]	; (8004238 <HAL_TIM_MspPostInit+0x14c>)
 8004190:	f7fc fb3e 	bl	8000810 <HAL_GPIO_Init>
}
 8004194:	e046      	b.n	8004224 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a28      	ldr	r2, [pc, #160]	; (800423c <HAL_TIM_MspPostInit+0x150>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d11e      	bne.n	80041de <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	4a21      	ldr	r2, [pc, #132]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	6313      	str	r3, [r2, #48]	; 0x30
 80041b0:	4b1e      	ldr	r3, [pc, #120]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041bc:	2340      	movs	r3, #64	; 0x40
 80041be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c0:	2302      	movs	r3, #2
 80041c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041cc:	2302      	movs	r3, #2
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d0:	f107 031c 	add.w	r3, r7, #28
 80041d4:	4619      	mov	r1, r3
 80041d6:	4816      	ldr	r0, [pc, #88]	; (8004230 <HAL_TIM_MspPostInit+0x144>)
 80041d8:	f7fc fb1a 	bl	8000810 <HAL_GPIO_Init>
}
 80041dc:	e022      	b.n	8004224 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a17      	ldr	r2, [pc, #92]	; (8004240 <HAL_TIM_MspPostInit+0x154>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d11d      	bne.n	8004224 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	4a0f      	ldr	r2, [pc, #60]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f043 0304 	orr.w	r3, r3, #4
 80041f6:	6313      	str	r3, [r2, #48]	; 0x30
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_TIM_MspPostInit+0x140>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004208:	2302      	movs	r3, #2
 800420a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004210:	2300      	movs	r3, #0
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004214:	2303      	movs	r3, #3
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004218:	f107 031c 	add.w	r3, r7, #28
 800421c:	4619      	mov	r1, r3
 800421e:	4809      	ldr	r0, [pc, #36]	; (8004244 <HAL_TIM_MspPostInit+0x158>)
 8004220:	f7fc faf6 	bl	8000810 <HAL_GPIO_Init>
}
 8004224:	bf00      	nop
 8004226:	3730      	adds	r7, #48	; 0x30
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	40020400 	.word	0x40020400
 8004234:	40000400 	.word	0x40000400
 8004238:	40020000 	.word	0x40020000
 800423c:	40000800 	.word	0x40000800
 8004240:	40010400 	.word	0x40010400
 8004244:	40020800 	.word	0x40020800

08004248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_UART_MspInit+0x84>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12b      	bne.n	80042c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_UART_MspInit+0x88>)
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_UART_MspInit+0x88>)
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004278:	6413      	str	r3, [r2, #64]	; 0x40
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_UART_MspInit+0x88>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <HAL_UART_MspInit+0x88>)
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_UART_MspInit+0x88>)
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <HAL_UART_MspInit+0x88>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80042a2:	230c      	movs	r3, #12
 80042a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a6:	2302      	movs	r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ae:	2303      	movs	r3, #3
 80042b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042b2:	2307      	movs	r3, #7
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b6:	f107 0314 	add.w	r3, r7, #20
 80042ba:	4619      	mov	r1, r3
 80042bc:	4805      	ldr	r0, [pc, #20]	; (80042d4 <HAL_UART_MspInit+0x8c>)
 80042be:	f7fc faa7 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042c2:	bf00      	nop
 80042c4:	3728      	adds	r7, #40	; 0x28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40004400 	.word	0x40004400
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40020000 	.word	0x40020000

080042d8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80042e6:	b480      	push	{r7}
 80042e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80042ea:	e7fe      	b.n	80042ea <HardFault_Handler+0x4>

080042ec <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80042f0:	e7fe      	b.n	80042f0 <MemManage_Handler+0x4>

080042f2 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80042f6:	e7fe      	b.n	80042f6 <BusFault_Handler+0x4>

080042f8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80042fc:	e7fe      	b.n	80042fc <UsageFault_Handler+0x4>

080042fe <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800432c:	f7fc f944 	bl	80005b8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8004330:	bf00      	nop
 8004332:	bd80      	pop	{r7, pc}

08004334 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line 1 interrupt.
 */
void EXTI1_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */
	*pReason = 1;
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <EXTI1_IRQHandler+0x18>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004340:	2002      	movs	r0, #2
 8004342:	f7fc fc3b 	bl	8000bbc <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000008 	.word	0x20000008

08004350 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <EXTI9_5_IRQHandler+0x40>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <EXTI9_5_IRQHandler+0x18>
		*pReason = 2;
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <EXTI9_5_IRQHandler+0x44>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2202      	movs	r2, #2
 8004366:	601a      	str	r2, [r3, #0]
	}

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <EXTI9_5_IRQHandler+0x40>)
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <EXTI9_5_IRQHandler+0x2c>
		*pReason = 3;
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <EXTI9_5_IRQHandler+0x44>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2203      	movs	r2, #3
 800437a:	601a      	str	r2, [r3, #0]
	  //TODO check for set flag in main (polling) and call menu function if flag is set
	 *pReason = 3;
	  }
  }*/
	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 800437c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004380:	f7fc fc1c 	bl	8000bbc <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 8004384:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004388:	f7fc fc18 	bl	8000bbc <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40013c00 	.word	0x40013c00
 8004394:	20000008 	.word	0x20000008

08004398 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800439c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80043a0:	f7fc fc0c 	bl	8000bbc <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 80043a4:	bf00      	nop
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <RTC_Alarm_IRQHandler>:

/**
 * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
 */
void RTC_Alarm_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Alarm_IRQn 0 */

	/* USER CODE END RTC_Alarm_IRQn 0 */
	HAL_RTC_AlarmIRQHandler(&hrtc);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <RTC_Alarm_IRQHandler+0x10>)
 80043ae:	f7fe f957 	bl	8002660 <HAL_RTC_AlarmIRQHandler>
	/* USER CODE BEGIN RTC_Alarm_IRQn 1 */

	/* USER CODE END RTC_Alarm_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000015c 	.word	0x2000015c

080043bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <SystemInit+0x60>)
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <SystemInit+0x60>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80043d0:	4a13      	ldr	r2, [pc, #76]	; (8004420 <SystemInit+0x64>)
 80043d2:	4b13      	ldr	r3, [pc, #76]	; (8004420 <SystemInit+0x64>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <SystemInit+0x64>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80043e2:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <SystemInit+0x64>)
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <SystemInit+0x64>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <SystemInit+0x64>)
 80043f4:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <SystemInit+0x68>)
 80043f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <SystemInit+0x64>)
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <SystemInit+0x64>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <SystemInit+0x64>)
 8004406:	2200      	movs	r2, #0
 8004408:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <SystemInit+0x60>)
 800440c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004410:	609a      	str	r2, [r3, #8]
#endif
}
 8004412:	bf00      	nop
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000ed00 	.word	0xe000ed00
 8004420:	40023800 	.word	0x40023800
 8004424:	24003010 	.word	0x24003010

08004428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004460 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800442c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800442e:	e003      	b.n	8004438 <LoopCopyDataInit>

08004430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004436:	3104      	adds	r1, #4

08004438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004438:	480b      	ldr	r0, [pc, #44]	; (8004468 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800443c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800443e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004440:	d3f6      	bcc.n	8004430 <CopyDataInit>
  ldr  r2, =_sbss
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004444:	e002      	b.n	800444c <LoopFillZerobss>

08004446 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004448:	f842 3b04 	str.w	r3, [r2], #4

0800444c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800444e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004450:	d3f9      	bcc.n	8004446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004452:	f7ff ffb3 	bl	80043bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004456:	f000 f811 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800445a:	f7ff f8ab 	bl	80035b4 <main>
  bx  lr    
 800445e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004460:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004464:	08004514 	.word	0x08004514
  ldr  r0, =_sdata
 8004468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800446c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8004470:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8004474:	20000228 	.word	0x20000228

08004478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004478:	e7fe      	b.n	8004478 <ADC_IRQHandler>
	...

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4e0d      	ldr	r6, [pc, #52]	; (80044b4 <__libc_init_array+0x38>)
 8004480:	4c0d      	ldr	r4, [pc, #52]	; (80044b8 <__libc_init_array+0x3c>)
 8004482:	1ba4      	subs	r4, r4, r6
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	2500      	movs	r5, #0
 8004488:	42a5      	cmp	r5, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	4e0b      	ldr	r6, [pc, #44]	; (80044bc <__libc_init_array+0x40>)
 800448e:	4c0c      	ldr	r4, [pc, #48]	; (80044c0 <__libc_init_array+0x44>)
 8004490:	f000 f820 	bl	80044d4 <_init>
 8004494:	1ba4      	subs	r4, r4, r6
 8004496:	10a4      	asrs	r4, r4, #2
 8004498:	2500      	movs	r5, #0
 800449a:	42a5      	cmp	r5, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a4:	4798      	blx	r3
 80044a6:	3501      	adds	r5, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ae:	4798      	blx	r3
 80044b0:	3501      	adds	r5, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	0800450c 	.word	0x0800450c
 80044b8:	0800450c 	.word	0x0800450c
 80044bc:	0800450c 	.word	0x0800450c
 80044c0:	08004510 	.word	0x08004510

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
