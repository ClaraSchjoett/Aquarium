
Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08006080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000264  20000084  08006104  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e8  08006104  000202e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017936  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000027a0  00000000  00000000  000379ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010c8  00000000  00000000  0003a190  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fa0  00000000  00000000  0003b258  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007c67  00000000  00000000  0003c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000051c4  00000000  00000000  00043e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00049023  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a14  00000000  00000000  000490a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fdc 	.word	0x08005fdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08005fdc 	.word	0x08005fdc

08000210 <menu_print_cursor>:
/* User Code begin here
 * Brief	display the arrow on the chosen row
 * data		r0 contains the chosen row
*/
menu_print_cursor:
	PUSH	{lr}
 8000210:	b500      	push	{lr}
	cmp		r0, #1					//Switch case 1,2,3,4
 8000212:	2801      	cmp	r0, #1
	BEQ		case_1					// Compare r0 with the rows and jump if it's equal
 8000214:	d005      	beq.n	8000222 <case_1>
	cmp		r0, #2
 8000216:	2802      	cmp	r0, #2
	BEQ		case_2
 8000218:	d02d      	beq.n	8000276 <case_2>
	cmp		r0, #3
 800021a:	2803      	cmp	r0, #3
	BEQ		case_3
 800021c:	d055      	beq.n	80002ca <case_3>
	cmp		r0, #4
 800021e:	2804      	cmp	r0, #4
	BEQ		case_4
 8000220:	d07d      	beq.n	800031e <case_4>

08000222 <case_1>:

case_1:								// The row 1 is chosen.
	MOV		r0, #2					// Be to sure, delete on every row the arrow "->", which
 8000222:	f04f 0002 	mov.w	r0, #2
	MOV		r1, #2					// won't be displayed. Then rewrite the arrow
 8000226:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c		// on the chosen row.
 800022a:	f003 fe7d 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 800022e:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 8000232:	f003 fec9 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #3
 8000236:	f04f 0003 	mov.w	r0, #3
	MOV		r1, #2
 800023a:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 800023e:	f003 fe73 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 8000242:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 8000246:	f003 febf 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #4
 800024a:	f04f 0004 	mov.w	r0, #4
	MOV		r1, #2
 800024e:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 8000252:	f003 fe69 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 8000256:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 800025a:	f003 feb5 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #1				//move the cursor to row 1
 800025e:	f04f 0001 	mov.w	r0, #1
	MOV		r1, #2
 8000262:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 8000266:	f003 fe5f 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, my_arrow		//display the arrow
 800026a:	f04f 0000 	mov.w	r0, #0
	BL		lcd_send_string
 800026e:	f003 fe47 	bl	8003f00 <lcd_send_string>

	BL end
 8000272:	f000 f87e 	bl	8000372 <end>

08000276 <case_2>:

case_2:							// The row 2 is chosen.
	MOV		r0, #1
 8000276:	f04f 0001 	mov.w	r0, #1
	MOV		r1, #2
 800027a:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 800027e:	f003 fe53 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 8000282:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 8000286:	f003 fe9f 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #3
 800028a:	f04f 0003 	mov.w	r0, #3
	MOV		r1, #2
 800028e:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 8000292:	f003 fe49 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 8000296:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 800029a:	f003 fe95 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #4
 800029e:	f04f 0004 	mov.w	r0, #4
	MOV		r1, #2
 80002a2:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 80002a6:	f003 fe3f 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 80002aa:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 80002ae:	f003 fe8b 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #2					//move the cursor to row 2
 80002b2:	f04f 0002 	mov.w	r0, #2
	MOV		r1, #2
 80002b6:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 80002ba:	f003 fe35 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, my_arrow			//display the arrow
 80002be:	f04f 0000 	mov.w	r0, #0
	BL		lcd_send_string
 80002c2:	f003 fe1d 	bl	8003f00 <lcd_send_string>

	BL end
 80002c6:	f000 f854 	bl	8000372 <end>

080002ca <case_3>:

case_3:								// The row 3 is chosen.
	MOV		r0, #1
 80002ca:	f04f 0001 	mov.w	r0, #1
	MOV		r1, #2
 80002ce:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 80002d2:	f003 fe29 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 80002d6:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 80002da:	f003 fe75 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #2
 80002de:	f04f 0002 	mov.w	r0, #2
	MOV		r1, #2
 80002e2:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 80002e6:	f003 fe1f 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 80002ea:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 80002ee:	f003 fe6b 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #4
 80002f2:	f04f 0004 	mov.w	r0, #4
	MOV		r1, #2
 80002f6:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 80002fa:	f003 fe15 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 80002fe:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 8000302:	f003 fe61 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #3					//move the cursor to row 3
 8000306:	f04f 0003 	mov.w	r0, #3
	MOV		r1, #2
 800030a:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 800030e:	f003 fe0b 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, my_arrow			//display the arrow
 8000312:	f04f 0000 	mov.w	r0, #0
	BL		lcd_send_string
 8000316:	f003 fdf3 	bl	8003f00 <lcd_send_string>

	BL end
 800031a:	f000 f82a 	bl	8000372 <end>

0800031e <case_4>:

case_4:								// The row 4 is chosen.
	MOV		r0, #1
 800031e:	f04f 0001 	mov.w	r0, #1
	MOV		r1, #2
 8000322:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 8000326:	f003 fdff 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 800032a:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 800032e:	f003 fe4b 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #2
 8000332:	f04f 0002 	mov.w	r0, #2
	MOV		r1, #2
 8000336:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 800033a:	f003 fdf5 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 800033e:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 8000342:	f003 fe41 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #3
 8000346:	f04f 0003 	mov.w	r0, #3
	MOV		r1, #2
 800034a:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 800034e:	f003 fdeb 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, #2
 8000352:	f04f 0002 	mov.w	r0, #2
	BL		delete_some_chars
 8000356:	f003 fe37 	bl	8003fc8 <delete_some_chars>

	MOV		r0, #4					//move the cursor to row 4
 800035a:	f04f 0004 	mov.w	r0, #4
	MOV		r1, #2
 800035e:	f04f 0102 	mov.w	r1, #2
	BL		cursor_jumpto_r_c
 8000362:	f003 fde1 	bl	8003f28 <cursor_jumpto_r_c>
	MOV		r0, my_arrow			//display the arrow
 8000366:	f04f 0000 	mov.w	r0, #0
	BL		lcd_send_string
 800036a:	f003 fdc9 	bl	8003f00 <lcd_send_string>


	BL end
 800036e:	f000 f800 	bl	8000372 <end>

08000372 <end>:
 8000372:	bf00      	nop

end:
.align
	POP	{pc}
 8000374:	bd00      	pop	{pc}
 8000376:	bf00      	nop
	...

08000380 <memchr>:
 8000380:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000384:	2a10      	cmp	r2, #16
 8000386:	db2b      	blt.n	80003e0 <memchr+0x60>
 8000388:	f010 0f07 	tst.w	r0, #7
 800038c:	d008      	beq.n	80003a0 <memchr+0x20>
 800038e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000392:	3a01      	subs	r2, #1
 8000394:	428b      	cmp	r3, r1
 8000396:	d02d      	beq.n	80003f4 <memchr+0x74>
 8000398:	f010 0f07 	tst.w	r0, #7
 800039c:	b342      	cbz	r2, 80003f0 <memchr+0x70>
 800039e:	d1f6      	bne.n	800038e <memchr+0xe>
 80003a0:	b4f0      	push	{r4, r5, r6, r7}
 80003a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003aa:	f022 0407 	bic.w	r4, r2, #7
 80003ae:	f07f 0700 	mvns.w	r7, #0
 80003b2:	2300      	movs	r3, #0
 80003b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003b8:	3c08      	subs	r4, #8
 80003ba:	ea85 0501 	eor.w	r5, r5, r1
 80003be:	ea86 0601 	eor.w	r6, r6, r1
 80003c2:	fa85 f547 	uadd8	r5, r5, r7
 80003c6:	faa3 f587 	sel	r5, r3, r7
 80003ca:	fa86 f647 	uadd8	r6, r6, r7
 80003ce:	faa5 f687 	sel	r6, r5, r7
 80003d2:	b98e      	cbnz	r6, 80003f8 <memchr+0x78>
 80003d4:	d1ee      	bne.n	80003b4 <memchr+0x34>
 80003d6:	bcf0      	pop	{r4, r5, r6, r7}
 80003d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003dc:	f002 0207 	and.w	r2, r2, #7
 80003e0:	b132      	cbz	r2, 80003f0 <memchr+0x70>
 80003e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003e6:	3a01      	subs	r2, #1
 80003e8:	ea83 0301 	eor.w	r3, r3, r1
 80003ec:	b113      	cbz	r3, 80003f4 <memchr+0x74>
 80003ee:	d1f8      	bne.n	80003e2 <memchr+0x62>
 80003f0:	2000      	movs	r0, #0
 80003f2:	4770      	bx	lr
 80003f4:	3801      	subs	r0, #1
 80003f6:	4770      	bx	lr
 80003f8:	2d00      	cmp	r5, #0
 80003fa:	bf06      	itte	eq
 80003fc:	4635      	moveq	r5, r6
 80003fe:	3803      	subeq	r0, #3
 8000400:	3807      	subne	r0, #7
 8000402:	f015 0f01 	tst.w	r5, #1
 8000406:	d107      	bne.n	8000418 <memchr+0x98>
 8000408:	3001      	adds	r0, #1
 800040a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800040e:	bf02      	ittt	eq
 8000410:	3001      	addeq	r0, #1
 8000412:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000416:	3001      	addeq	r0, #1
 8000418:	bcf0      	pop	{r4, r5, r6, r7}
 800041a:	3801      	subs	r0, #1
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop

08000420 <__aeabi_uldivmod>:
 8000420:	b953      	cbnz	r3, 8000438 <__aeabi_uldivmod+0x18>
 8000422:	b94a      	cbnz	r2, 8000438 <__aeabi_uldivmod+0x18>
 8000424:	2900      	cmp	r1, #0
 8000426:	bf08      	it	eq
 8000428:	2800      	cmpeq	r0, #0
 800042a:	bf1c      	itt	ne
 800042c:	f04f 31ff 	movne.w	r1, #4294967295
 8000430:	f04f 30ff 	movne.w	r0, #4294967295
 8000434:	f000 b97a 	b.w	800072c <__aeabi_idiv0>
 8000438:	f1ad 0c08 	sub.w	ip, sp, #8
 800043c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000440:	f000 f806 	bl	8000450 <__udivmoddi4>
 8000444:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800044c:	b004      	add	sp, #16
 800044e:	4770      	bx	lr

08000450 <__udivmoddi4>:
 8000450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000454:	468c      	mov	ip, r1
 8000456:	460d      	mov	r5, r1
 8000458:	4604      	mov	r4, r0
 800045a:	9e08      	ldr	r6, [sp, #32]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d151      	bne.n	8000504 <__udivmoddi4+0xb4>
 8000460:	428a      	cmp	r2, r1
 8000462:	4617      	mov	r7, r2
 8000464:	d96d      	bls.n	8000542 <__udivmoddi4+0xf2>
 8000466:	fab2 fe82 	clz	lr, r2
 800046a:	f1be 0f00 	cmp.w	lr, #0
 800046e:	d00b      	beq.n	8000488 <__udivmoddi4+0x38>
 8000470:	f1ce 0c20 	rsb	ip, lr, #32
 8000474:	fa01 f50e 	lsl.w	r5, r1, lr
 8000478:	fa20 fc0c 	lsr.w	ip, r0, ip
 800047c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000480:	ea4c 0c05 	orr.w	ip, ip, r5
 8000484:	fa00 f40e 	lsl.w	r4, r0, lr
 8000488:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	fbbc f8fa 	udiv	r8, ip, sl
 8000492:	fa1f f987 	uxth.w	r9, r7
 8000496:	fb0a cc18 	mls	ip, sl, r8, ip
 800049a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800049e:	fb08 f309 	mul.w	r3, r8, r9
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d90a      	bls.n	80004bc <__udivmoddi4+0x6c>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80004ac:	f080 8123 	bcs.w	80006f6 <__udivmoddi4+0x2a6>
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	f240 8120 	bls.w	80006f6 <__udivmoddi4+0x2a6>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	443d      	add	r5, r7
 80004bc:	1aed      	subs	r5, r5, r3
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80004c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80004c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004cc:	fb00 f909 	mul.w	r9, r0, r9
 80004d0:	45a1      	cmp	r9, r4
 80004d2:	d909      	bls.n	80004e8 <__udivmoddi4+0x98>
 80004d4:	19e4      	adds	r4, r4, r7
 80004d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80004da:	f080 810a 	bcs.w	80006f2 <__udivmoddi4+0x2a2>
 80004de:	45a1      	cmp	r9, r4
 80004e0:	f240 8107 	bls.w	80006f2 <__udivmoddi4+0x2a2>
 80004e4:	3802      	subs	r0, #2
 80004e6:	443c      	add	r4, r7
 80004e8:	eba4 0409 	sub.w	r4, r4, r9
 80004ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f0:	2100      	movs	r1, #0
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d061      	beq.n	80005ba <__udivmoddi4+0x16a>
 80004f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80004fa:	2300      	movs	r3, #0
 80004fc:	6034      	str	r4, [r6, #0]
 80004fe:	6073      	str	r3, [r6, #4]
 8000500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000504:	428b      	cmp	r3, r1
 8000506:	d907      	bls.n	8000518 <__udivmoddi4+0xc8>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d054      	beq.n	80005b6 <__udivmoddi4+0x166>
 800050c:	2100      	movs	r1, #0
 800050e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000512:	4608      	mov	r0, r1
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	fab3 f183 	clz	r1, r3
 800051c:	2900      	cmp	r1, #0
 800051e:	f040 808e 	bne.w	800063e <__udivmoddi4+0x1ee>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d302      	bcc.n	800052c <__udivmoddi4+0xdc>
 8000526:	4282      	cmp	r2, r0
 8000528:	f200 80fa 	bhi.w	8000720 <__udivmoddi4+0x2d0>
 800052c:	1a84      	subs	r4, r0, r2
 800052e:	eb65 0503 	sbc.w	r5, r5, r3
 8000532:	2001      	movs	r0, #1
 8000534:	46ac      	mov	ip, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d03f      	beq.n	80005ba <__udivmoddi4+0x16a>
 800053a:	e886 1010 	stmia.w	r6, {r4, ip}
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	b912      	cbnz	r2, 800054a <__udivmoddi4+0xfa>
 8000544:	2701      	movs	r7, #1
 8000546:	fbb7 f7f2 	udiv	r7, r7, r2
 800054a:	fab7 fe87 	clz	lr, r7
 800054e:	f1be 0f00 	cmp.w	lr, #0
 8000552:	d134      	bne.n	80005be <__udivmoddi4+0x16e>
 8000554:	1beb      	subs	r3, r5, r7
 8000556:	0c3a      	lsrs	r2, r7, #16
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	2101      	movs	r1, #1
 800055e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000562:	0c25      	lsrs	r5, r4, #16
 8000564:	fb02 3318 	mls	r3, r2, r8, r3
 8000568:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800056c:	fb0c f308 	mul.w	r3, ip, r8
 8000570:	42ab      	cmp	r3, r5
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x134>
 8000574:	19ed      	adds	r5, r5, r7
 8000576:	f108 30ff 	add.w	r0, r8, #4294967295
 800057a:	d202      	bcs.n	8000582 <__udivmoddi4+0x132>
 800057c:	42ab      	cmp	r3, r5
 800057e:	f200 80d1 	bhi.w	8000724 <__udivmoddi4+0x2d4>
 8000582:	4680      	mov	r8, r0
 8000584:	1aed      	subs	r5, r5, r3
 8000586:	b2a3      	uxth	r3, r4
 8000588:	fbb5 f0f2 	udiv	r0, r5, r2
 800058c:	fb02 5510 	mls	r5, r2, r0, r5
 8000590:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000594:	fb0c fc00 	mul.w	ip, ip, r0
 8000598:	45a4      	cmp	ip, r4
 800059a:	d907      	bls.n	80005ac <__udivmoddi4+0x15c>
 800059c:	19e4      	adds	r4, r4, r7
 800059e:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a2:	d202      	bcs.n	80005aa <__udivmoddi4+0x15a>
 80005a4:	45a4      	cmp	ip, r4
 80005a6:	f200 80b8 	bhi.w	800071a <__udivmoddi4+0x2ca>
 80005aa:	4618      	mov	r0, r3
 80005ac:	eba4 040c 	sub.w	r4, r4, ip
 80005b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b4:	e79d      	b.n	80004f2 <__udivmoddi4+0xa2>
 80005b6:	4631      	mov	r1, r6
 80005b8:	4630      	mov	r0, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	f1ce 0420 	rsb	r4, lr, #32
 80005c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80005c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80005ca:	fa20 f804 	lsr.w	r8, r0, r4
 80005ce:	0c3a      	lsrs	r2, r7, #16
 80005d0:	fa25 f404 	lsr.w	r4, r5, r4
 80005d4:	ea48 0803 	orr.w	r8, r8, r3
 80005d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80005dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80005e0:	fb02 4411 	mls	r4, r2, r1, r4
 80005e4:	fa1f fc87 	uxth.w	ip, r7
 80005e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80005ec:	fb01 f30c 	mul.w	r3, r1, ip
 80005f0:	42ab      	cmp	r3, r5
 80005f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80005f6:	d909      	bls.n	800060c <__udivmoddi4+0x1bc>
 80005f8:	19ed      	adds	r5, r5, r7
 80005fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80005fe:	f080 808a 	bcs.w	8000716 <__udivmoddi4+0x2c6>
 8000602:	42ab      	cmp	r3, r5
 8000604:	f240 8087 	bls.w	8000716 <__udivmoddi4+0x2c6>
 8000608:	3902      	subs	r1, #2
 800060a:	443d      	add	r5, r7
 800060c:	1aeb      	subs	r3, r5, r3
 800060e:	fa1f f588 	uxth.w	r5, r8
 8000612:	fbb3 f0f2 	udiv	r0, r3, r2
 8000616:	fb02 3310 	mls	r3, r2, r0, r3
 800061a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800061e:	fb00 f30c 	mul.w	r3, r0, ip
 8000622:	42ab      	cmp	r3, r5
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x1e6>
 8000626:	19ed      	adds	r5, r5, r7
 8000628:	f100 38ff 	add.w	r8, r0, #4294967295
 800062c:	d26f      	bcs.n	800070e <__udivmoddi4+0x2be>
 800062e:	42ab      	cmp	r3, r5
 8000630:	d96d      	bls.n	800070e <__udivmoddi4+0x2be>
 8000632:	3802      	subs	r0, #2
 8000634:	443d      	add	r5, r7
 8000636:	1aeb      	subs	r3, r5, r3
 8000638:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800063c:	e78f      	b.n	800055e <__udivmoddi4+0x10e>
 800063e:	f1c1 0720 	rsb	r7, r1, #32
 8000642:	fa22 f807 	lsr.w	r8, r2, r7
 8000646:	408b      	lsls	r3, r1
 8000648:	fa05 f401 	lsl.w	r4, r5, r1
 800064c:	ea48 0303 	orr.w	r3, r8, r3
 8000650:	fa20 fe07 	lsr.w	lr, r0, r7
 8000654:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000658:	40fd      	lsrs	r5, r7
 800065a:	ea4e 0e04 	orr.w	lr, lr, r4
 800065e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000662:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000666:	fb0c 5519 	mls	r5, ip, r9, r5
 800066a:	fa1f f883 	uxth.w	r8, r3
 800066e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000672:	fb09 f408 	mul.w	r4, r9, r8
 8000676:	42ac      	cmp	r4, r5
 8000678:	fa02 f201 	lsl.w	r2, r2, r1
 800067c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000680:	d908      	bls.n	8000694 <__udivmoddi4+0x244>
 8000682:	18ed      	adds	r5, r5, r3
 8000684:	f109 30ff 	add.w	r0, r9, #4294967295
 8000688:	d243      	bcs.n	8000712 <__udivmoddi4+0x2c2>
 800068a:	42ac      	cmp	r4, r5
 800068c:	d941      	bls.n	8000712 <__udivmoddi4+0x2c2>
 800068e:	f1a9 0902 	sub.w	r9, r9, #2
 8000692:	441d      	add	r5, r3
 8000694:	1b2d      	subs	r5, r5, r4
 8000696:	fa1f fe8e 	uxth.w	lr, lr
 800069a:	fbb5 f0fc 	udiv	r0, r5, ip
 800069e:	fb0c 5510 	mls	r5, ip, r0, r5
 80006a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80006a6:	fb00 f808 	mul.w	r8, r0, r8
 80006aa:	45a0      	cmp	r8, r4
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x26e>
 80006ae:	18e4      	adds	r4, r4, r3
 80006b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80006b4:	d229      	bcs.n	800070a <__udivmoddi4+0x2ba>
 80006b6:	45a0      	cmp	r8, r4
 80006b8:	d927      	bls.n	800070a <__udivmoddi4+0x2ba>
 80006ba:	3802      	subs	r0, #2
 80006bc:	441c      	add	r4, r3
 80006be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006c2:	eba4 0408 	sub.w	r4, r4, r8
 80006c6:	fba0 8902 	umull	r8, r9, r0, r2
 80006ca:	454c      	cmp	r4, r9
 80006cc:	46c6      	mov	lr, r8
 80006ce:	464d      	mov	r5, r9
 80006d0:	d315      	bcc.n	80006fe <__udivmoddi4+0x2ae>
 80006d2:	d012      	beq.n	80006fa <__udivmoddi4+0x2aa>
 80006d4:	b156      	cbz	r6, 80006ec <__udivmoddi4+0x29c>
 80006d6:	ebba 030e 	subs.w	r3, sl, lr
 80006da:	eb64 0405 	sbc.w	r4, r4, r5
 80006de:	fa04 f707 	lsl.w	r7, r4, r7
 80006e2:	40cb      	lsrs	r3, r1
 80006e4:	431f      	orrs	r7, r3
 80006e6:	40cc      	lsrs	r4, r1
 80006e8:	6037      	str	r7, [r6, #0]
 80006ea:	6074      	str	r4, [r6, #4]
 80006ec:	2100      	movs	r1, #0
 80006ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f2:	4618      	mov	r0, r3
 80006f4:	e6f8      	b.n	80004e8 <__udivmoddi4+0x98>
 80006f6:	4690      	mov	r8, r2
 80006f8:	e6e0      	b.n	80004bc <__udivmoddi4+0x6c>
 80006fa:	45c2      	cmp	sl, r8
 80006fc:	d2ea      	bcs.n	80006d4 <__udivmoddi4+0x284>
 80006fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000702:	eb69 0503 	sbc.w	r5, r9, r3
 8000706:	3801      	subs	r0, #1
 8000708:	e7e4      	b.n	80006d4 <__udivmoddi4+0x284>
 800070a:	4628      	mov	r0, r5
 800070c:	e7d7      	b.n	80006be <__udivmoddi4+0x26e>
 800070e:	4640      	mov	r0, r8
 8000710:	e791      	b.n	8000636 <__udivmoddi4+0x1e6>
 8000712:	4681      	mov	r9, r0
 8000714:	e7be      	b.n	8000694 <__udivmoddi4+0x244>
 8000716:	4601      	mov	r1, r0
 8000718:	e778      	b.n	800060c <__udivmoddi4+0x1bc>
 800071a:	3802      	subs	r0, #2
 800071c:	443c      	add	r4, r7
 800071e:	e745      	b.n	80005ac <__udivmoddi4+0x15c>
 8000720:	4608      	mov	r0, r1
 8000722:	e708      	b.n	8000536 <__udivmoddi4+0xe6>
 8000724:	f1a8 0802 	sub.w	r8, r8, #2
 8000728:	443d      	add	r5, r7
 800072a:	e72b      	b.n	8000584 <__udivmoddi4+0x134>

0800072c <__aeabi_idiv0>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_Init+0x40>)
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_Init+0x40>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800073e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <HAL_Init+0x40>)
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_Init+0x40>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800074a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_Init+0x40>)
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_Init+0x40>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f947 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f808 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f004 fd4a 	bl	80051fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023c00 	.word	0x40023c00

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f95f 	bl	8000a56 <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f000 f927 	bl	8000a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000001c 	.word	0x2000001c
 80007cc:	20000004 	.word	0x20000004
 80007d0:	20000000 	.word	0x20000000

080007d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x20>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x24>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_IncTick+0x24>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000004 	.word	0x20000004
 80007f8:	200000d4 	.word	0x200000d4

080007fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	200000d4 	.word	0x200000d4

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff ffee 	bl	80007fc <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_Delay+0x40>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffde 	bl	80007fc <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad2      	subs	r2, r2, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d3f7      	bcc.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000004 	.word	0x20000004

08000858 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008c6:	4909      	ldr	r1, [pc, #36]	; (80008ec <NVIC_EnableIRQ+0x30>)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	095b      	lsrs	r3, r3, #5
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	f002 021f 	and.w	r2, r2, #31
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	da0b      	bge.n	800091c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	490d      	ldr	r1, [pc, #52]	; (800093c <NVIC_SetPriority+0x4c>)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 030f 	and.w	r3, r3, #15
 800090c:	3b04      	subs	r3, #4
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091a:	e009      	b.n	8000930 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <NVIC_SetPriority+0x50>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	e000e100 	.word	0xe000e100

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	2201      	movs	r2, #1
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	401a      	ands	r2, r3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098a:	2101      	movs	r1, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	1e59      	subs	r1, r3, #1
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	; 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b8:	d301      	bcc.n	80009be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00f      	b.n	80009de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <SysTick_Config+0x40>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c6:	210f      	movs	r1, #15
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f7ff ff90 	bl	80008f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SysTick_Config+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SysTick_Config+0x40>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff2f 	bl	8000858 <NVIC_SetPriorityGrouping>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff44 	bl	80008a0 <NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ff90 	bl	8000944 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff5f 	bl	80008f0 <NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff37 	bl	80008bc <NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffa2 	bl	80009a8 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	e165      	b.n	8000d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	f040 8154 	bne.w	8000d52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x4a>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d123      	bne.n	8000b02 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	691a      	ldr	r2, [r3, #16]
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	69b9      	ldr	r1, [r7, #24]
 8000afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0203 	and.w	r2, r3, #3
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d00b      	beq.n	8000b56 <HAL_GPIO_Init+0xe6>
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d007      	beq.n	8000b56 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4a:	2b11      	cmp	r3, #17
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d130      	bne.n	8000bb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	091b      	lsrs	r3, r3, #4
 8000ba2:	f003 0201 	and.w	r2, r3, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f000 80ae 	beq.w	8000d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4a5c      	ldr	r2, [pc, #368]	; (8000d6c <HAL_GPIO_Init+0x2fc>)
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <HAL_GPIO_Init+0x2fc>)
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <HAL_GPIO_Init+0x2fc>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c12:	4a57      	ldr	r2, [pc, #348]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a4e      	ldr	r2, [pc, #312]	; (8000d74 <HAL_GPIO_Init+0x304>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d025      	beq.n	8000c8a <HAL_GPIO_Init+0x21a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a4d      	ldr	r2, [pc, #308]	; (8000d78 <HAL_GPIO_Init+0x308>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d01f      	beq.n	8000c86 <HAL_GPIO_Init+0x216>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a4c      	ldr	r2, [pc, #304]	; (8000d7c <HAL_GPIO_Init+0x30c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0x212>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a4b      	ldr	r2, [pc, #300]	; (8000d80 <HAL_GPIO_Init+0x310>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0x20e>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a4a      	ldr	r2, [pc, #296]	; (8000d84 <HAL_GPIO_Init+0x314>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00d      	beq.n	8000c7a <HAL_GPIO_Init+0x20a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <HAL_GPIO_Init+0x318>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d007      	beq.n	8000c76 <HAL_GPIO_Init+0x206>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a48      	ldr	r2, [pc, #288]	; (8000d8c <HAL_GPIO_Init+0x31c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_GPIO_Init+0x202>
 8000c6e:	2306      	movs	r3, #6
 8000c70:	e00c      	b.n	8000c8c <HAL_GPIO_Init+0x21c>
 8000c72:	2307      	movs	r3, #7
 8000c74:	e00a      	b.n	8000c8c <HAL_GPIO_Init+0x21c>
 8000c76:	2305      	movs	r3, #5
 8000c78:	e008      	b.n	8000c8c <HAL_GPIO_Init+0x21c>
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x21c>
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e004      	b.n	8000c8c <HAL_GPIO_Init+0x21c>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e002      	b.n	8000c8c <HAL_GPIO_Init+0x21c>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <HAL_GPIO_Init+0x21c>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	69fa      	ldr	r2, [r7, #28]
 8000c8e:	f002 0203 	and.w	r2, r2, #3
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	4093      	lsls	r3, r2
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c9c:	4934      	ldr	r1, [pc, #208]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000caa:	4b39      	ldr	r3, [pc, #228]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cce:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cd4:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cf8:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d22:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d4c:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_GPIO_Init+0x320>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3301      	adds	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	f67f ae96 	bls.w	8000a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d60:	bf00      	nop
 8000d62:	3724      	adds	r7, #36	; 0x24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40020c00 	.word	0x40020c00
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40021400 	.word	0x40021400
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40013c00 	.word	0x40013c00

08000d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e001      	b.n	8000db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd4:	787b      	ldrb	r3, [r7, #1]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000de0:	e003      	b.n	8000dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	041a      	lsls	r2, r3, #16
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	619a      	str	r2, [r3, #24]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f806 	bl	8000e28 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40013c00 	.word	0x40013c00

08000e28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0c8      	b.n	8000fec <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f004 f9ec 	bl	800524c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2224      	movs	r2, #36	; 0x24
 8000e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e8c:	f000 fc98 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8000e90:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	4a57      	ldr	r2, [pc, #348]	; (8000ff4 <HAL_I2C_Init+0x1b4>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	0c9b      	lsrs	r3, r3, #18
 8000e9c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4952      	ldr	r1, [pc, #328]	; (8000ff8 <HAL_I2C_Init+0x1b8>)
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d802      	bhi.n	8000eba <HAL_I2C_Init+0x7a>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	e009      	b.n	8000ece <HAL_I2C_Init+0x8e>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ec0:	fb01 f303 	mul.w	r3, r1, r3
 8000ec4:	494d      	ldr	r1, [pc, #308]	; (8000ffc <HAL_I2C_Init+0x1bc>)
 8000ec6:	fba1 1303 	umull	r1, r3, r1, r3
 8000eca:	099b      	lsrs	r3, r3, #6
 8000ecc:	3301      	adds	r3, #1
 8000ece:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a47      	ldr	r2, [pc, #284]	; (8000ff8 <HAL_I2C_Init+0x1b8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d812      	bhi.n	8000f04 <HAL_I2C_Init+0xc4>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d906      	bls.n	8000f00 <HAL_I2C_Init+0xc0>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	e045      	b.n	8000f8c <HAL_I2C_Init+0x14c>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e043      	b.n	8000f8c <HAL_I2C_Init+0x14c>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <HAL_I2C_Init+0xec>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	e010      	b.n	8000f4e <HAL_I2C_Init+0x10e>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009a      	lsls	r2, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf0c      	ite	eq
 8000f48:	2301      	moveq	r3, #1
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_I2C_Init+0x116>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e01a      	b.n	8000f8c <HAL_I2C_Init+0x14c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10a      	bne.n	8000f74 <HAL_I2C_Init+0x134>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f72:	e00b      	b.n	8000f8c <HAL_I2C_Init+0x14c>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009a      	lsls	r2, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	69d1      	ldr	r1, [r2, #28]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6a12      	ldr	r2, [r2, #32]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6911      	ldr	r1, [r2, #16]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68d2      	ldr	r2, [r2, #12]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6951      	ldr	r1, [r2, #20]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6992      	ldr	r2, [r2, #24]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	431bde83 	.word	0x431bde83
 8000ff8:	000186a0 	.word	0x000186a0
 8000ffc:	10624dd3 	.word	0x10624dd3

08001000 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	461a      	mov	r2, r3
 800100c:	460b      	mov	r3, r1
 800100e:	817b      	strh	r3, [r7, #10]
 8001010:	4613      	mov	r3, r2
 8001012:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001018:	f7ff fbf0 	bl	80007fc <HAL_GetTick>
 800101c:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b20      	cmp	r3, #32
 8001028:	f040 80ee 	bne.w	8001208 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2319      	movs	r3, #25
 8001032:	2201      	movs	r2, #1
 8001034:	4977      	ldr	r1, [pc, #476]	; (8001214 <HAL_I2C_Master_Transmit+0x214>)
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 f972 	bl	8001320 <I2C_WaitOnFlagUntilTimeout>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001042:	2302      	movs	r3, #2
 8001044:	e0e1      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_I2C_Master_Transmit+0x54>
 8001050:	2302      	movs	r3, #2
 8001052:	e0da      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b01      	cmp	r3, #1
 8001068:	d007      	beq.n	800107a <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	f042 0201 	orr.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001088:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2221      	movs	r2, #33	; 0x21
 800108e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2210      	movs	r2, #16
 8001096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	893a      	ldrh	r2, [r7, #8]
 80010aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_I2C_Master_Transmit+0x218>)
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010bc:	8979      	ldrh	r1, [r7, #10]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	6a3a      	ldr	r2, [r7, #32]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 f8aa 	bl	800121c <I2C_MasterRequestWrite>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00f      	beq.n	80010ee <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d105      	bne.n	80010e2 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e093      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e08d      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001104:	e066      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	6a39      	ldr	r1, [r7, #32]
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f9c7 	bl	800149e <I2C_WaitOnTXEFlagUntilTimeout>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00f      	beq.n	8001136 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	2b04      	cmp	r3, #4
 800111c:	d109      	bne.n	8001132 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800112c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e06b      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e069      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	1c58      	adds	r0, r3, #1
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	6248      	str	r0, [r1, #36]	; 0x24
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115a:	3b01      	subs	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b04      	cmp	r3, #4
 800116e:	d119      	bne.n	80011a4 <HAL_I2C_Master_Transmit+0x1a4>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001174:	2b00      	cmp	r3, #0
 8001176:	d015      	beq.n	80011a4 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	1c58      	adds	r0, r3, #1
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	6248      	str	r0, [r1, #36]	; 0x24
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118e:	b29b      	uxth	r3, r3
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800119c:	3b01      	subs	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f000 f9b5 	bl	8001518 <I2C_WaitOnBTFFlagUntilTimeout>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00f      	beq.n	80011d4 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d109      	bne.n	80011d0 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ca:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e01c      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e01a      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d194      	bne.n	8001106 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2220      	movs	r2, #32
 80011f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001208:	2302      	movs	r3, #2
  }
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	00100002 	.word	0x00100002
 8001218:	ffff0000 	.word	0xffff0000

0800121c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af02      	add	r7, sp, #8
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	460b      	mov	r3, r1
 800122a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d006      	beq.n	8001246 <I2C_MasterRequestWrite+0x2a>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d003      	beq.n	8001246 <I2C_MasterRequestWrite+0x2a>
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001244:	d108      	bne.n	8001258 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e00b      	b.n	8001270 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	2b12      	cmp	r3, #18
 800125e:	d107      	bne.n	8001270 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800126e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f84f 	bl	8001320 <I2C_WaitOnFlagUntilTimeout>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e040      	b.n	800130e <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001294:	d107      	bne.n	80012a6 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	897a      	ldrh	r2, [r7, #10]
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	e021      	b.n	80012ea <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	897a      	ldrh	r2, [r7, #10]
 80012ac:	11d2      	asrs	r2, r2, #7
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f002 0206 	and.w	r2, r2, #6
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f062 020f 	orn	r2, r2, #15
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4915      	ldr	r1, [pc, #84]	; (8001318 <I2C_MasterRequestWrite+0xfc>)
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f87c 	bl	80013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d101      	bne.n	80012dc <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e018      	b.n	800130e <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e016      	b.n	800130e <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	897a      	ldrh	r2, [r7, #10]
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	490b      	ldr	r1, [pc, #44]	; (800131c <I2C_MasterRequestWrite+0x100>)
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f866 	bl	80013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	2b04      	cmp	r3, #4
 8001302:	d101      	bne.n	8001308 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e002      	b.n	800130e <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e000      	b.n	800130e <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	00010008 	.word	0x00010008
 800131c:	00010002 	.word	0x00010002

08001320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001330:	e01f      	b.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d01b      	beq.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001340:	f7ff fa5c 	bl	80007fc <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad2      	subs	r2, r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d910      	bls.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e023      	b.n	80013ba <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d10d      	bne.n	8001398 <I2C_WaitOnFlagUntilTimeout+0x78>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4013      	ands	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf0c      	ite	eq
 800138e:	2301      	moveq	r3, #1
 8001390:	2300      	movne	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	e00c      	b.n	80013b2 <I2C_WaitOnFlagUntilTimeout+0x92>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4013      	ands	r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bf0c      	ite	eq
 80013aa:	2301      	moveq	r3, #1
 80013ac:	2300      	movne	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d0bc      	beq.n	8001332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013d0:	e040      	b.n	8001454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d11c      	bne.n	800141c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013fa:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2204      	movs	r2, #4
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e03c      	b.n	8001496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001422:	d017      	beq.n	8001454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800142a:	f7ff f9e7 	bl	80007fc <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	1ad2      	subs	r2, r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	d90c      	bls.n	8001454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e020      	b.n	8001496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	0c1b      	lsrs	r3, r3, #16
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10c      	bne.n	8001478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	43da      	mvns	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	4013      	ands	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e00b      	b.n	8001490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4013      	ands	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf14      	ite	ne
 800148a:	2301      	movne	r3, #1
 800148c:	2300      	moveq	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d19e      	bne.n	80013d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014aa:	e029      	b.n	8001500 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f870 	bl	8001592 <I2C_IsAcknowledgeFailed>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e029      	b.n	8001510 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c2:	d01d      	beq.n	8001500 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80014ca:	f7ff f997 	bl	80007fc <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d912      	bls.n	8001500 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f043 0220 	orr.w	r2, r3, #32
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e007      	b.n	8001510 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	2b80      	cmp	r3, #128	; 0x80
 800150c:	d1ce      	bne.n	80014ac <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001524:	e029      	b.n	800157a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f833 	bl	8001592 <I2C_IsAcknowledgeFailed>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e029      	b.n	800158a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d01d      	beq.n	800157a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001544:	f7ff f95a 	bl	80007fc <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	1ad2      	subs	r2, r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	429a      	cmp	r2, r3
 8001552:	d912      	bls.n	800157a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2220      	movs	r2, #32
 800156a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e007      	b.n	800158a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b04      	cmp	r3, #4
 8001586:	d1ce      	bne.n	8001526 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d114      	bne.n	80015d4 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015b2:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2204      	movs	r2, #4
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0ca      	b.n	800178e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f8:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_RCC_ClockConfig+0x1b4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 020f 	and.w	r2, r3, #15
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d20c      	bcs.n	8001620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b64      	ldr	r3, [pc, #400]	; (8001798 <HAL_RCC_ClockConfig+0x1b4>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b62      	ldr	r3, [pc, #392]	; (8001798 <HAL_RCC_ClockConfig+0x1b4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 020f 	and.w	r2, r3, #15
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0b6      	b.n	800178e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800163a:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	4b52      	ldr	r3, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800165a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	4b4f      	ldr	r3, [pc, #316]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d044      	beq.n	8001704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07d      	b.n	800178e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06d      	b.n	800178e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e065      	b.n	800178e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4936      	ldr	r1, [pc, #216]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 0203 	bic.w	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d4:	f7ff f892 	bl	80007fc <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff f88e 	bl	80007fc <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04d      	b.n	800178e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_ClockConfig+0x1b4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 020f 	and.w	r2, r3, #15
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_RCC_ClockConfig+0x1b4>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_RCC_ClockConfig+0x1b4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 020f 	and.w	r2, r3, #15
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e030      	b.n	800178e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001738:	4918      	ldr	r1, [pc, #96]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001756:	4911      	ldr	r1, [pc, #68]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800176a:	f000 fb7b 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 800176e:	4601      	mov	r1, r0
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	fa21 f303 	lsr.w	r3, r1, r3
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001786:	2000      	movs	r0, #0
 8001788:	f7fe fff4 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08006024 	.word	0x08006024
 80017a4:	2000001c 	.word	0x2000001c

080017a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_RCC_GetHCLKFreq+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000001c 	.word	0x2000001c

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017c4:	f7ff fff0 	bl	80017a8 <HAL_RCC_GetHCLKFreq>
 80017c8:	4601      	mov	r1, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	0a9b      	lsrs	r3, r3, #10
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	08006034 	.word	0x08006034

080017e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017ec:	f7ff ffdc 	bl	80017a8 <HAL_RCC_GetHCLKFreq>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0b5b      	lsrs	r3, r3, #13
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_GetPCLK2Freq+0x24>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	08006034 	.word	0x08006034

08001810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d010      	beq.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001848:	496f      	ldr	r1, [pc, #444]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800184c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001850:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	4313      	orrs	r3, r2
 800185a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001866:	2301      	movs	r3, #1
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d010      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001876:	4964      	ldr	r1, [pc, #400]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001878:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800187a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800187e:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	4313      	orrs	r3, r2
 8001888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001894:	2301      	movs	r3, #1
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d017      	beq.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018a4:	4958      	ldr	r1, [pc, #352]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a6:	4b58      	ldr	r3, [pc, #352]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4313      	orrs	r3, r2
 80018b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018c2:	d101      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d017      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018e0:	4949      	ldr	r1, [pc, #292]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018e2:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	4313      	orrs	r3, r2
 80018f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fe:	d101      	bne.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 808a 	beq.w	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4a39      	ldr	r2, [pc, #228]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800193a:	4a34      	ldr	r2, [pc, #208]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001946:	f7fe ff59 	bl	80007fc <HAL_GetTick>
 800194a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7fe ff55 	bl	80007fc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e278      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001974:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d02f      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	429a      	cmp	r2, r3
 8001988:	d028      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001992:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d014      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80019b2:	f7fe ff23 	bl	80007fc <HAL_GetTick>
 80019b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7fe ff1f 	bl	80007fc <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e240      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ee      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019e8:	d114      	bne.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80019ea:	4907      	ldr	r1, [pc, #28]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80019fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
 8001a04:	e00c      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	42470e40 	.word	0x42470e40
 8001a14:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a16:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a1e:	6093      	str	r3, [r2, #8]
 8001a20:	4947      	ldr	r1, [pc, #284]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a3e:	4a41      	ldr	r2, [pc, #260]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a46:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00a      	beq.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a54:	493a      	ldr	r1, [pc, #232]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a56:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4313      	orrs	r3, r2
 8001a66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a76:	4932      	ldr	r1, [pc, #200]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d011      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a98:	4929      	ldr	r1, [pc, #164]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ab6:	d101      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001ac8:	491d      	ldr	r1, [pc, #116]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d011      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001aea:	4915      	ldr	r1, [pc, #84]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b08:	d101      	bne.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d005      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b1c:	f040 80ff 	bne.w	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b26:	f7fe fe69 	bl	80007fc <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b2c:	e00e      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b2e:	f7fe fe65 	bl	80007fc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d907      	bls.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e188      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b40:	40023800 	.word	0x40023800
 8001b44:	424711e0 	.word	0x424711e0
 8001b48:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b4c:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ea      	bne.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d009      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d028      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d124      	bne.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b80:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b86:	0c1b      	lsrs	r3, r3, #16
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b92:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b98:	0e1b      	lsrs	r3, r3, #24
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ba0:	4969      	ldr	r1, [pc, #420]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	019b      	lsls	r3, r3, #6
 8001bac:	431a      	orrs	r2, r3
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	041b      	lsls	r3, r3, #16
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	061b      	lsls	r3, r3, #24
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	071b      	lsls	r3, r3, #28
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bde:	d00a      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d035      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf4:	d130      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c08:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c0e:	0f1b      	lsrs	r3, r3, #28
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001c16:	494c      	ldr	r1, [pc, #304]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	085b      	lsrs	r3, r3, #1
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	061b      	lsls	r3, r3, #24
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	071b      	lsls	r3, r3, #28
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c40:	4941      	ldr	r1, [pc, #260]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c48:	f023 021f 	bic.w	r2, r3, #31
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d029      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c6c:	d124      	bne.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c80:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c86:	0f1b      	lsrs	r3, r3, #28
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001c8e:	492e      	ldr	r1, [pc, #184]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	061b      	lsls	r3, r3, #24
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	071b      	lsls	r3, r3, #28
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d016      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cc4:	4920      	ldr	r1, [pc, #128]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	019b      	lsls	r3, r3, #6
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	061b      	lsls	r3, r3, #24
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	071b      	lsls	r3, r3, #28
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7fe fd80 	bl	80007fc <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d00:	f7fe fd7c 	bl	80007fc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e09f      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f040 8095 	bne.w	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7fe fd66 	bl	80007fc <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d32:	e00f      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d34:	f7fe fd62 	bl	80007fc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d908      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e085      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	42470068 	.word	0x42470068
 8001d50:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d54:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d60:	d0e8      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d02b      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d127      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	3301      	adds	r3, #1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001d9c:	492f      	ldr	r1, [pc, #188]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	019b      	lsls	r3, r3, #6
 8001da8:	431a      	orrs	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001dc0:	4926      	ldr	r1, [pc, #152]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01d      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dee:	d118      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df6:	0e1b      	lsrs	r3, r3, #24
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001dfe:	4917      	ldr	r1, [pc, #92]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	3b01      	subs	r3, #1
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	061b      	lsls	r3, r3, #24
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e28:	f7fe fce8 	bl	80007fc <HAL_GetTick>
 8001e2c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e30:	f7fe fce4 	bl	80007fc <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e007      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e4e:	d1ef      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3730      	adds	r7, #48	; 0x30
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470070 	.word	0x42470070

08001e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e68:	b0a1      	sub	sp, #132	; 0x84
 8001e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e80:	4ba0      	ldr	r3, [pc, #640]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	f200 8193 	bhi.w	80021b4 <HAL_RCC_GetSysClockFreq+0x350>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_RCC_GetSysClockFreq+0x30>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001ec9 	.word	0x08001ec9
 8001e98:	080021b5 	.word	0x080021b5
 8001e9c:	080021b5 	.word	0x080021b5
 8001ea0:	080021b5 	.word	0x080021b5
 8001ea4:	08001ecf 	.word	0x08001ecf
 8001ea8:	080021b5 	.word	0x080021b5
 8001eac:	080021b5 	.word	0x080021b5
 8001eb0:	080021b5 	.word	0x080021b5
 8001eb4:	08001ed5 	.word	0x08001ed5
 8001eb8:	080021b5 	.word	0x080021b5
 8001ebc:	080021b5 	.word	0x080021b5
 8001ec0:	080021b5 	.word	0x080021b5
 8001ec4:	08002051 	.word	0x08002051
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001eca:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001ecc:	e175      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ece:	4b8f      	ldr	r3, [pc, #572]	; (800210c <HAL_RCC_GetSysClockFreq+0x2a8>)
 8001ed0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001ed2:	e172      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed4:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001edc:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d056      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b86      	ldr	r3, [pc, #536]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	f04f 0400 	mov.w	r4, #0
 8001ef4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	ea01 0103 	and.w	r1, r1, r3
 8001f00:	ea02 0204 	and.w	r2, r2, r4
 8001f04:	460b      	mov	r3, r1
 8001f06:	4614      	mov	r4, r2
 8001f08:	0160      	lsls	r0, r4, #5
 8001f0a:	6678      	str	r0, [r7, #100]	; 0x64
 8001f0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001f0e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001f12:	6678      	str	r0, [r7, #100]	; 0x64
 8001f14:	015b      	lsls	r3, r3, #5
 8001f16:	663b      	str	r3, [r7, #96]	; 0x60
 8001f18:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001f1c:	1a5b      	subs	r3, r3, r1
 8001f1e:	eb64 0402 	sbc.w	r4, r4, r2
 8001f22:	01a0      	lsls	r0, r4, #6
 8001f24:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001f26:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f28:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8001f2c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001f2e:	0198      	lsls	r0, r3, #6
 8001f30:	65b8      	str	r0, [r7, #88]	; 0x58
 8001f32:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001f36:	1aed      	subs	r5, r5, r3
 8001f38:	eb66 0604 	sbc.w	r6, r6, r4
 8001f3c:	4633      	mov	r3, r6
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
 8001f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f44:	4628      	mov	r0, r5
 8001f46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f4c:	462b      	mov	r3, r5
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	653b      	str	r3, [r7, #80]	; 0x50
 8001f52:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001f56:	461d      	mov	r5, r3
 8001f58:	4626      	mov	r6, r4
 8001f5a:	186b      	adds	r3, r5, r1
 8001f5c:	eb46 0402 	adc.w	r4, r6, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	4621      	mov	r1, r4
 8001f64:	460b      	mov	r3, r1
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8001f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f74:	4603      	mov	r3, r0
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f7a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4621      	mov	r1, r4
 8001f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f84:	f04f 0400 	mov.w	r4, #0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	f7fe fa48 	bl	8000420 <__aeabi_uldivmod>
 8001f90:	4603      	mov	r3, r0
 8001f92:	460c      	mov	r4, r1
 8001f94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f96:	e04d      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f98:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	f04f 0400 	mov.w	r4, #0
 8001fa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	ea01 0103 	and.w	r1, r1, r3
 8001fae:	ea02 0204 	and.w	r2, r2, r4
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	0160      	lsls	r0, r4, #5
 8001fb8:	6478      	str	r0, [r7, #68]	; 0x44
 8001fba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001fbc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001fc0:	6478      	str	r0, [r7, #68]	; 0x44
 8001fc2:	015b      	lsls	r3, r3, #5
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8001fc6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	eb64 0402 	sbc.w	r4, r4, r2
 8001fd0:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001fd4:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001fd8:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001fdc:	ebba 0a03 	subs.w	sl, sl, r3
 8001fe0:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001fe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff8:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001ffc:	eb1a 0a01 	adds.w	sl, sl, r1
 8002000:	eb4b 0b02 	adc.w	fp, fp, r2
 8002004:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200c:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
 8002012:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
 8002018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800201c:	4650      	mov	r0, sl
 800201e:	4659      	mov	r1, fp
 8002020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002022:	f04f 0400 	mov.w	r4, #0
 8002026:	461a      	mov	r2, r3
 8002028:	4623      	mov	r3, r4
 800202a:	f7fe f9f9 	bl	8000420 <__aeabi_uldivmod>
 800202e:	4603      	mov	r3, r0
 8002030:	460c      	mov	r4, r1
 8002032:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002034:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	3301      	adds	r3, #1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8002044:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800204e:	e0b4      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002058:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d054      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002066:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	f04f 0400 	mov.w	r4, #0
 8002070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	ea01 0103 	and.w	r1, r1, r3
 800207c:	ea02 0204 	and.w	r2, r2, r4
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	0160      	lsls	r0, r4, #5
 8002086:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800208a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800208e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002090:	015b      	lsls	r3, r3, #5
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
 8002094:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002098:	1a5b      	subs	r3, r3, r1
 800209a:	eb64 0402 	sbc.w	r4, r4, r2
 800209e:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80020a2:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80020a6:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80020aa:	ebb8 0803 	subs.w	r8, r8, r3
 80020ae:	eb69 0904 	sbc.w	r9, r9, r4
 80020b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
 80020c0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80020c4:	623b      	str	r3, [r7, #32]
 80020c6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020ca:	eb18 0801 	adds.w	r8, r8, r1
 80020ce:	eb49 0902 	adc.w	r9, r9, r2
 80020d2:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80020ea:	4640      	mov	r0, r8
 80020ec:	4649      	mov	r1, r9
 80020ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f0:	f04f 0400 	mov.w	r4, #0
 80020f4:	461a      	mov	r2, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	f7fe f992 	bl	8000420 <__aeabi_uldivmod>
 80020fc:	4603      	mov	r3, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002102:	e04b      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x338>
 8002104:	40023800 	.word	0x40023800
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x364>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	f04f 0400 	mov.w	r4, #0
 800211a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	ea01 0103 	and.w	r1, r1, r3
 8002126:	ea02 0204 	and.w	r2, r2, r4
 800212a:	460b      	mov	r3, r1
 800212c:	4614      	mov	r4, r2
 800212e:	0160      	lsls	r0, r4, #5
 8002130:	6178      	str	r0, [r7, #20]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002138:	6178      	str	r0, [r7, #20]
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	eb64 0402 	sbc.w	r4, r4, r2
 8002148:	01a6      	lsls	r6, r4, #6
 800214a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800214e:	019d      	lsls	r5, r3, #6
 8002150:	1aed      	subs	r5, r5, r3
 8002152:	eb66 0604 	sbc.w	r6, r6, r4
 8002156:	00f3      	lsls	r3, r6, #3
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	00eb      	lsls	r3, r5, #3
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800216a:	186d      	adds	r5, r5, r1
 800216c:	eb46 0602 	adc.w	r6, r6, r2
 8002170:	02b3      	lsls	r3, r6, #10
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	02ab      	lsls	r3, r5, #10
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002184:	4628      	mov	r0, r5
 8002186:	4631      	mov	r1, r6
 8002188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	461a      	mov	r2, r3
 8002190:	4623      	mov	r3, r4
 8002192:	f7fe f945 	bl	8000420 <__aeabi_uldivmod>
 8002196:	4603      	mov	r3, r0
 8002198:	460c      	mov	r4, r1
 800219a:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x364>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0f1b      	lsrs	r3, r3, #28
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80021a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetSysClockFreq+0x368>)
 80021b6:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3784      	adds	r7, #132	; 0x84
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	00f42400 	.word	0x00f42400

080021d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8083 	beq.w	80022f0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021ea:	4b95      	ldr	r3, [pc, #596]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d019      	beq.n	800222a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021f6:	4b92      	ldr	r3, [pc, #584]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002202:	4b8f      	ldr	r3, [pc, #572]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800220e:	d00c      	beq.n	800222a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002210:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d112      	bne.n	8002242 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221c:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002228:	d10b      	bne.n	8002242 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d05b      	beq.n	80022ee <HAL_RCC_OscConfig+0x11e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d157      	bne.n	80022ee <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e216      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x8a>
 800224c:	4a7c      	ldr	r2, [pc, #496]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800224e:	4b7c      	ldr	r3, [pc, #496]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e01d      	b.n	8002296 <HAL_RCC_OscConfig+0xc6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0xae>
 8002264:	4a76      	ldr	r2, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4a73      	ldr	r2, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e00b      	b.n	8002296 <HAL_RCC_OscConfig+0xc6>
 800227e:	4a70      	ldr	r2, [pc, #448]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4a6d      	ldr	r2, [pc, #436]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800228c:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d013      	beq.n	80022c6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe faad 	bl	80007fc <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a6:	f7fe faa9 	bl	80007fc <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1db      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0xd6>
 80022c4:	e014      	b.n	80022f0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fa99 	bl	80007fc <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ce:	f7fe fa95 	bl	80007fc <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1c7      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e0:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0xfe>
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d06f      	beq.n	80023dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	d017      	beq.n	8002338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002310:	2b08      	cmp	r3, #8
 8002312:	d105      	bne.n	8002320 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002320:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002328:	2b0c      	cmp	r3, #12
 800232a:	d11c      	bne.n	8002366 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232c:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d116      	bne.n	8002366 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002338:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x180>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e18f      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	493b      	ldr	r1, [pc, #236]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002364:	e03a      	b.n	80023dc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d020      	beq.n	80023b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_OscConfig+0x274>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fa42 	bl	80007fc <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237c:	f7fe fa3e 	bl	80007fc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e170      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4929      	ldr	r1, [pc, #164]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
 80023ae:	e015      	b.n	80023dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCC_OscConfig+0x274>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7fe fa21 	bl	80007fc <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023be:	f7fe fa1d 	bl	80007fc <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e14f      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d037      	beq.n	8002458 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_RCC_OscConfig+0x278>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe fa01 	bl	80007fc <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fe:	f7fe f9fd 	bl	80007fc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e12f      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x22e>
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_OscConfig+0x278>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe f9ea 	bl	80007fc <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe f9e6 	bl	80007fc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d908      	bls.n	800244c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e118      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b8a      	ldr	r3, [pc, #552]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e9      	bne.n	800242c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8097 	beq.w	8002594 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b83      	ldr	r3, [pc, #524]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4a7f      	ldr	r2, [pc, #508]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800247c:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b7c      	ldr	r3, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b79      	ldr	r3, [pc, #484]	; (800267c <HAL_RCC_OscConfig+0x4ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4a76      	ldr	r2, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x4ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe f9a5 	bl	80007fc <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe f9a1 	bl	80007fc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0d3      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b6c      	ldr	r3, [pc, #432]	; (800267c <HAL_RCC_OscConfig+0x4ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x31a>
 80024dc:	4a66      	ldr	r2, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x354>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x33c>
 80024f2:	4a61      	ldr	r2, [pc, #388]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 80024f4:	4b60      	ldr	r3, [pc, #384]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	4a5e      	ldr	r2, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 8002500:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x354>
 800250c:	4a5a      	ldr	r2, [pc, #360]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800250e:	4b5a      	ldr	r3, [pc, #360]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	4a57      	ldr	r2, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800251a:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe f966 	bl	80007fc <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe f962 	bl	80007fc <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e092      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ee      	beq.n	8002534 <HAL_RCC_OscConfig+0x364>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe f950 	bl	80007fc <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7fe f94c 	bl	80007fc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e07c      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002576:	4b40      	ldr	r3, [pc, #256]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d068      	beq.n	800266e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d060      	beq.n	800266a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d145      	bne.n	800263c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_RCC_OscConfig+0x4b0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe f921 	bl	80007fc <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe f91d 	bl	80007fc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e04f      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4926      	ldr	r1, [pc, #152]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	071b      	lsls	r3, r3, #28
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_RCC_OscConfig+0x4b0>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe f8f2 	bl	80007fc <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe f8ee 	bl	80007fc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e020      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x44c>
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x4b0>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe f8db 	bl	80007fc <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe f8d7 	bl	80007fc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e009      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_OscConfig+0x4a8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x47a>
 8002668:	e001      	b.n	800266e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000
 8002680:	42470060 	.word	0x42470060

08002684 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e083      	b.n	800279e <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7f5b      	ldrb	r3, [r3, #29]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f002 fe18 	bl	80052dc <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	22ca      	movs	r2, #202	; 0xca
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2253      	movs	r2, #83	; 0x53
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fc54 	bl	8002f70 <RTC_EnterInitMode>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2204      	movs	r2, #4
 80026da:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e05e      	b.n	800279e <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80026ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	6891      	ldr	r1, [r2, #8]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6850      	ldr	r0, [r2, #4]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6912      	ldr	r2, [r2, #16]
 8002706:	4310      	orrs	r0, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6952      	ldr	r2, [r2, #20]
 800270c:	4302      	orrs	r2, r0
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	6911      	ldr	r1, [r2, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6892      	ldr	r2, [r2, #8]
 800272a:	0412      	lsls	r2, r2, #16
 800272c:	430a      	orrs	r2, r1
 800272e:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fbe6 	bl	8002f20 <HAL_RTC_WaitForSynchro>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	22ff      	movs	r2, #255	; 0xff
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e018      	b.n	800279e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002776:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6992      	ldr	r2, [r2, #24]
 800278a:	430a      	orrs	r2, r1
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 800279c:	2300      	movs	r3, #0
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027a6:	b590      	push	{r4, r7, lr}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	7f1b      	ldrb	r3, [r3, #28]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_RTC_SetTime+0x1c>
 80027be:	2302      	movs	r3, #2
 80027c0:	e0b2      	b.n	8002928 <HAL_RTC_SetTime+0x182>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2202      	movs	r2, #2
 80027cc:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d126      	bne.n	8002822 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fbeb 	bl	8002fc8 <RTC_ByteToBcd2>
 80027f2:	4603      	mov	r3, r0
 80027f4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fbe4 	bl	8002fc8 <RTC_ByteToBcd2>
 8002800:	4603      	mov	r3, r0
 8002802:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002804:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	789b      	ldrb	r3, [r3, #2]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fbdc 	bl	8002fc8 <RTC_ByteToBcd2>
 8002810:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002812:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	78db      	ldrb	r3, [r3, #3]
 800281a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e020      	b.n	8002864 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fbe5 	bl	8003004 <RTC_Bcd2ToByte>
 800283a:	4603      	mov	r3, r0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e002      	b.n	8002846 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002852:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002858:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	78db      	ldrb	r3, [r3, #3]
 800285e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	22ca      	movs	r2, #202	; 0xca
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2253      	movs	r2, #83	; 0x53
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fb7b 	bl	8002f70 <RTC_EnterInitMode>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	22ff      	movs	r2, #255	; 0xff
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2204      	movs	r2, #4
 800288c:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e047      	b.n	8002928 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80028a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80028a6:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	6891      	ldr	r1, [r2, #8]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	68d0      	ldr	r0, [r2, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	6912      	ldr	r2, [r2, #16]
 80028ca:	4302      	orrs	r2, r0
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028de:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d111      	bne.n	8002912 <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fb16 	bl	8002f20 <HAL_RTC_WaitForSynchro>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2204      	movs	r2, #4
 8002906:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00a      	b.n	8002928 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	22ff      	movs	r2, #255	; 0xff
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 8002926:	2300      	movs	r3, #0
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}

08002930 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002962:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002966:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	0c1b      	lsrs	r3, r3, #16
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11a      	bne.n	80029e2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fb27 	bl	8003004 <RTC_Bcd2ToByte>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fb1e 	bl	8003004 <RTC_Bcd2ToByte>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	789b      	ldrb	r3, [r3, #2]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fb15 	bl	8003004 <RTC_Bcd2ToByte>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	7f1b      	ldrb	r3, [r3, #28]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_RTC_SetDate+0x1c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e094      	b.n	8002b32 <HAL_RTC_SetDate+0x146>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2202      	movs	r2, #2
 8002a12:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10e      	bne.n	8002a38 <HAL_RTC_SetDate+0x4c>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	330a      	adds	r3, #10
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11c      	bne.n	8002a78 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	78db      	ldrb	r3, [r3, #3]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fac0 	bl	8002fc8 <RTC_ByteToBcd2>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fab9 	bl	8002fc8 <RTC_ByteToBcd2>
 8002a56:	4603      	mov	r3, r0
 8002a58:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a5a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	789b      	ldrb	r3, [r3, #2]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fab1 	bl	8002fc8 <RTC_ByteToBcd2>
 8002a66:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a68:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e00e      	b.n	8002a96 <HAL_RTC_SetDate+0xaa>
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(datetmpreg));
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	78db      	ldrb	r3, [r3, #3]
 8002a7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a84:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a8a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	22ca      	movs	r2, #202	; 0xca
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2253      	movs	r2, #83	; 0x53
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa62 	bl	8002f70 <RTC_EnterInitMode>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2204      	movs	r2, #4
 8002abe:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e033      	b.n	8002b32 <HAL_RTC_SetDate+0x146>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ad4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ad8:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	68d2      	ldr	r2, [r2, #12]
 8002ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae8:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d111      	bne.n	8002b1c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa11 	bl	8002f20 <HAL_RTC_WaitForSynchro>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_RTC_SetDate+0x130>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e00a      	b.n	8002b32 <HAL_RTC_SetDate+0x146>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 8002b30:	2300      	movs	r3, #0
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}

08002b3a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
          
  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	0b5b      	lsrs	r3, r3, #13
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11a      	bne.n	8002bce <HAL_RTC_GetDate+0x94>
  {    
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	78db      	ldrb	r3, [r3, #3]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fa31 	bl	8003004 <RTC_Bcd2ToByte>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa28 	bl	8003004 <RTC_Bcd2ToByte>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	789b      	ldrb	r3, [r3, #2]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fa1f 	bl	8003004 <RTC_Bcd2ToByte>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002bec:	4ba1      	ldr	r3, [pc, #644]	; (8002e74 <HAL_RTC_SetAlarm_IT+0x29c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4aa1      	ldr	r2, [pc, #644]	; (8002e78 <HAL_RTC_SetAlarm_IT+0x2a0>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0adb      	lsrs	r3, r3, #11
 8002bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	7f1b      	ldrb	r3, [r3, #28]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_RTC_SetAlarm_IT+0x36>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e12e      	b.n	8002e6c <HAL_RTC_SetAlarm_IT+0x294>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2202      	movs	r2, #2
 8002c18:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d137      	bne.n	8002c90 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2200      	movs	r2, #0
 8002c32:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f9c5 	bl	8002fc8 <RTC_ByteToBcd2>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f9be 	bl	8002fc8 <RTC_ByteToBcd2>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	789b      	ldrb	r3, [r3, #2]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f9b6 	bl	8002fc8 <RTC_ByteToBcd2>
 8002c5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	78db      	ldrb	r3, [r3, #3]
 8002c66:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002c68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f9a8 	bl	8002fc8 <RTC_ByteToBcd2>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e040      	b.n	8002d12 <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f9ae 	bl	8003004 <RTC_Bcd2ToByte>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	e002      	b.n	8002cb4 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f99e 	bl	8003004 <RTC_Bcd2ToByte>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	e007      	b.n	8002cde <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f995 	bl	8003004 <RTC_Bcd2ToByte>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	785b      	ldrb	r3, [r3, #1]
 8002ce8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002cea:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002cf0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	78db      	ldrb	r3, [r3, #3]
 8002cf6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002cf8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002d08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	22ca      	movs	r2, #202	; 0xca
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2253      	movs	r2, #83	; 0x53
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d36:	d141      	bne.n	8002dbc <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	6892      	ldr	r2, [r2, #8]
 8002d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d46:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002d58:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	617a      	str	r2, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e077      	b.n	8002e6c <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0e7      	beq.n	8002d5a <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	6892      	ldr	r2, [r2, #8]
 8002da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	e040      	b.n	8002e3e <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	6892      	ldr	r2, [r2, #8]
 8002dc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dca:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002ddc:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	617a      	str	r2, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2203      	movs	r2, #3
 8002df4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e035      	b.n	8002e6c <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0e7      	beq.n	8002dde <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	6892      	ldr	r2, [r2, #8]
 8002e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e3c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e48:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e54:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3724      	adds	r7, #36	; 0x24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	2000001c 	.word	0x2000001c
 8002e78:	10624dd3 	.word	0x10624dd3
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f831 	bl	8002f0c <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	68d2      	ldr	r2, [r2, #12]
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002eba:	60da      	str	r2, [r3, #12]
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f8b1 	bl	8003040 <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	68d2      	ldr	r2, [r2, #12]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002eee:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ef6:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	775a      	strb	r2, [r3, #29]
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f3c:	f7fd fc5e 	bl	80007fc <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f42:	e009      	b.n	8002f58 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f44:	f7fd fc5a 	bl	80007fc <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f52:	d901      	bls.n	8002f58 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e007      	b.n	8002f68 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ee      	beq.n	8002f44 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f94:	f7fd fc32 	bl	80007fc <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f9a:	e009      	b.n	8002fb0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f9c:	f7fd fc2e 	bl	80007fc <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002faa:	d901      	bls.n	8002fb0 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e007      	b.n	8002fc0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ee      	beq.n	8002f9c <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 8002fd6:	e005      	b.n	8002fe4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	3b0a      	subs	r3, #10
 8002fe2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	d8f6      	bhi.n	8002fd8 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b2db      	uxtb	r3, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4413      	add	r3, r2
 8003032:	b2db      	uxtb	r3, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01d      	b.n	80030a2 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f002 f94a 	bl	8005314 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 f904 	bl	80032a0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}  
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	6839      	ldr	r1, [r7, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fa10 	bl	80034e4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_TIM_PWM_Start+0x60>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_TIM_PWM_Start+0x2c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <HAL_TIM_PWM_Start+0x64>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_PWM_Start+0x30>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_TIM_PWM_Start+0x32>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
} 
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40010000 	.word	0x40010000
 8003110:	40010400 	.word	0x40010400

08003114 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800312a:	2302      	movs	r3, #2
 800312c:	e0b4      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x184>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f200 809f 	bhi.w	8003284 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	08003181 	.word	0x08003181
 8003150:	08003285 	.word	0x08003285
 8003154:	08003285 	.word	0x08003285
 8003158:	08003285 	.word	0x08003285
 800315c:	080031c1 	.word	0x080031c1
 8003160:	08003285 	.word	0x08003285
 8003164:	08003285 	.word	0x08003285
 8003168:	08003285 	.word	0x08003285
 800316c:	08003203 	.word	0x08003203
 8003170:	08003285 	.word	0x08003285
 8003174:	08003285 	.word	0x08003285
 8003178:	08003285 	.word	0x08003285
 800317c:	08003243 	.word	0x08003243
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f9d0 	bl	800352c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	6992      	ldr	r2, [r2, #24]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	6992      	ldr	r2, [r2, #24]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	6991      	ldr	r1, [r2, #24]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	6912      	ldr	r2, [r2, #16]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
    }
    break;
 80031be:	e062      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f914 	bl	80033f4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	6992      	ldr	r2, [r2, #24]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031da:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	6992      	ldr	r2, [r2, #24]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	6991      	ldr	r1, [r2, #24]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	6912      	ldr	r2, [r2, #16]
 80031fa:	0212      	lsls	r2, r2, #8
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
    }
    break;
 8003200:	e041      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fa03 	bl	8003614 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	69d2      	ldr	r2, [r2, #28]
 8003218:	f042 0208 	orr.w	r2, r2, #8
 800321c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	69d2      	ldr	r2, [r2, #28]
 8003228:	f022 0204 	bic.w	r2, r2, #4
 800322c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	69d1      	ldr	r1, [r2, #28]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	6912      	ldr	r2, [r2, #16]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
    }
    break;
 8003240:	e021      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fa5b 	bl	8003704 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	69d2      	ldr	r2, [r2, #28]
 8003258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	69d2      	ldr	r2, [r2, #28]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	69d1      	ldr	r1, [r2, #28]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	6912      	ldr	r2, [r2, #16]
 800327c:	0212      	lsls	r2, r2, #8
 800327e:	430a      	orrs	r2, r1
 8003280:	61da      	str	r2, [r3, #28]
    }
    break;
 8003282:	e000      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8003284:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a44      	ldr	r2, [pc, #272]	; (80033c8 <TIM_Base_SetConfig+0x128>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <TIM_Base_SetConfig+0x44>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c2:	d00f      	beq.n	80032e4 <TIM_Base_SetConfig+0x44>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a41      	ldr	r2, [pc, #260]	; (80033cc <TIM_Base_SetConfig+0x12c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x44>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a40      	ldr	r2, [pc, #256]	; (80033d0 <TIM_Base_SetConfig+0x130>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x44>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3f      	ldr	r2, [pc, #252]	; (80033d4 <TIM_Base_SetConfig+0x134>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x44>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3e      	ldr	r2, [pc, #248]	; (80033d8 <TIM_Base_SetConfig+0x138>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <TIM_Base_SetConfig+0x48>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <TIM_Base_SetConfig+0x4a>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <TIM_Base_SetConfig+0x128>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d02b      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d027      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <TIM_Base_SetConfig+0x12c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d023      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <TIM_Base_SetConfig+0x130>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d01f      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a2c      	ldr	r2, [pc, #176]	; (80033d4 <TIM_Base_SetConfig+0x134>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01b      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <TIM_Base_SetConfig+0x138>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d017      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <TIM_Base_SetConfig+0x13c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <TIM_Base_SetConfig+0x140>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00f      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a28      	ldr	r2, [pc, #160]	; (80033e4 <TIM_Base_SetConfig+0x144>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <TIM_Base_SetConfig+0x148>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <TIM_Base_SetConfig+0x14c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0xc0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <TIM_Base_SetConfig+0x150>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <TIM_Base_SetConfig+0xc4>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <TIM_Base_SetConfig+0xc6>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <TIM_Base_SetConfig+0x128>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0x102>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <TIM_Base_SetConfig+0x138>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <TIM_Base_SetConfig+0x106>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <TIM_Base_SetConfig+0x108>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	615a      	str	r2, [r3, #20]
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	40001800 	.word	0x40001800
 80033ec:	40001c00 	.word	0x40001c00
 80033f0:	40002000 	.word	0x40002000

080033f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0210 	bic.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0320 	bic.w	r3, r3, #32
 800344a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a20      	ldr	r2, [pc, #128]	; (80034dc <TIM_OC2_SetConfig+0xe8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_OC2_SetConfig+0x74>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <TIM_OC2_SetConfig+0xec>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <TIM_OC2_SetConfig+0x78>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <TIM_OC2_SetConfig+0x7a>
 800346c:	2300      	movs	r3, #0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d021      	beq.n	80034b6 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40010400 	.word	0x40010400

080034e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80034f4:	2201      	movs	r2, #1
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1a      	ldr	r2, [r3, #32]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 0302 	bic.w	r3, r3, #2
 8003580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a1f      	ldr	r2, [pc, #124]	; (800360c <TIM_OC1_SetConfig+0xe0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_OC1_SetConfig+0x70>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <TIM_OC1_SetConfig+0xe4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <TIM_OC1_SetConfig+0x74>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <TIM_OC1_SetConfig+0x76>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01e      	beq.n	80035e4 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f023 0308 	bic.w	r3, r3, #8
 80035ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
} 
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40010400 	.word	0x40010400

08003614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a20      	ldr	r2, [pc, #128]	; (80036fc <TIM_OC3_SetConfig+0xe8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d003      	beq.n	8003686 <TIM_OC3_SetConfig+0x72>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <TIM_OC3_SetConfig+0xec>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <TIM_OC3_SetConfig+0x76>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <TIM_OC3_SetConfig+0x78>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d021      	beq.n	80036d4 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036aa:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010400 	.word	0x40010400

08003704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003746:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800375a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a14      	ldr	r2, [pc, #80]	; (80037bc <TIM_OC4_SetConfig+0xb8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_OC4_SetConfig+0x74>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <TIM_OC4_SetConfig+0xbc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <TIM_OC4_SetConfig+0x78>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <TIM_OC4_SetConfig+0x7a>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003788:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	019b      	lsls	r3, r3, #6
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40010400 	.word	0x40010400

080037c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d8:	2302      	movs	r3, #2
 80037da:	e032      	b.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	6852      	ldr	r2, [r2, #4]
 80037f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037fa:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	6851      	ldr	r1, [r2, #4]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800381c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	6891      	ldr	r1, [r2, #8]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	6852      	ldr	r2, [r2, #4]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
} 
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003866:	2302      	movs	r3, #2
 8003868:	e044      	b.n	80038f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e03f      	b.n	8003992 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f001 fe04 	bl	8005534 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003942:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f829 	bl	800399c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6912      	ldr	r2, [r2, #16]
 8003954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	6952      	ldr	r2, [r2, #20]
 8003964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003968:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	68d2      	ldr	r2, [r2, #12]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039d8:	f023 030c 	bic.w	r3, r3, #12
 80039dc:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a10:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2c:	f040 80e4 	bne.w	8003bf8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4aab      	ldr	r2, [pc, #684]	; (8003ce4 <UART_SetConfig+0x348>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <UART_SetConfig+0xa8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4aaa      	ldr	r2, [pc, #680]	; (8003ce8 <UART_SetConfig+0x34c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d16c      	bne.n	8003b1e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681c      	ldr	r4, [r3, #0]
 8003a48:	f7fd fece 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009a      	lsls	r2, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	4aa2      	ldr	r2, [pc, #648]	; (8003cec <UART_SetConfig+0x350>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	011d      	lsls	r5, r3, #4
 8003a6c:	f7fd febc 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009a      	lsls	r2, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a86:	f7fd feaf 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	009a      	lsls	r2, r3, #2
 8003a94:	441a      	add	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	4a92      	ldr	r2, [pc, #584]	; (8003cec <UART_SetConfig+0x350>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2264      	movs	r2, #100	; 0x64
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	1af3      	subs	r3, r6, r3
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	3332      	adds	r3, #50	; 0x32
 8003ab4:	4a8d      	ldr	r2, [pc, #564]	; (8003cec <UART_SetConfig+0x350>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ac2:	441d      	add	r5, r3
 8003ac4:	f7fd fe90 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ade:	f7fd fe83 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	4a7c      	ldr	r2, [pc, #496]	; (8003cec <UART_SetConfig+0x350>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2264      	movs	r2, #100	; 0x64
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	1af3      	subs	r3, r6, r3
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a77      	ldr	r2, [pc, #476]	; (8003cec <UART_SetConfig+0x350>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	442b      	add	r3, r5
 8003b1a:	60a3      	str	r3, [r4, #8]
 8003b1c:	e154      	b.n	8003dc8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681c      	ldr	r4, [r3, #0]
 8003b22:	f7fd fe4d 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003b26:	4602      	mov	r2, r0
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	4a6b      	ldr	r2, [pc, #428]	; (8003cec <UART_SetConfig+0x350>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	011d      	lsls	r5, r3, #4
 8003b46:	f7fd fe3b 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b60:	f7fd fe2e 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009a      	lsls	r2, r3, #2
 8003b6e:	441a      	add	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <UART_SetConfig+0x350>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2264      	movs	r2, #100	; 0x64
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	1af3      	subs	r3, r6, r3
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a57      	ldr	r2, [pc, #348]	; (8003cec <UART_SetConfig+0x350>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b9c:	441d      	add	r5, r3
 8003b9e:	f7fd fe0f 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009a      	lsls	r2, r3, #2
 8003bac:	441a      	add	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bb8:	f7fd fe02 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	4a46      	ldr	r2, [pc, #280]	; (8003cec <UART_SetConfig+0x350>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	2264      	movs	r2, #100	; 0x64
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	1af3      	subs	r3, r6, r3
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	3332      	adds	r3, #50	; 0x32
 8003be6:	4a41      	ldr	r2, [pc, #260]	; (8003cec <UART_SetConfig+0x350>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	442b      	add	r3, r5
 8003bf4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003bf6:	e0e7      	b.n	8003dc8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <UART_SetConfig+0x348>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <UART_SetConfig+0x270>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <UART_SetConfig+0x34c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d171      	bne.n	8003cf0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681c      	ldr	r4, [r3, #0]
 8003c10:	f7fd fdea 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009a      	lsls	r2, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	4a30      	ldr	r2, [pc, #192]	; (8003cec <UART_SetConfig+0x350>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	011d      	lsls	r5, r3, #4
 8003c34:	f7fd fdd8 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009a      	lsls	r2, r3, #2
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c4e:	f7fd fdcb 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <UART_SetConfig+0x350>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2264      	movs	r2, #100	; 0x64
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	1af3      	subs	r3, r6, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <UART_SetConfig+0x350>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	441d      	add	r5, r3
 8003c8a:	f7fd fdad 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009a      	lsls	r2, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ca4:	f7fd fda0 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009a      	lsls	r2, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <UART_SetConfig+0x350>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	2264      	movs	r2, #100	; 0x64
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	1af3      	subs	r3, r6, r3
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	3332      	adds	r3, #50	; 0x32
 8003cd2:	4a06      	ldr	r2, [pc, #24]	; (8003cec <UART_SetConfig+0x350>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	442b      	add	r3, r5
 8003ce0:	60a3      	str	r3, [r4, #8]
 8003ce2:	e071      	b.n	8003dc8 <UART_SetConfig+0x42c>
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40011400 	.word	0x40011400
 8003cec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681c      	ldr	r4, [r3, #0]
 8003cf4:	f7fd fd64 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009a      	lsls	r2, r3, #2
 8003d02:	441a      	add	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	4a30      	ldr	r2, [pc, #192]	; (8003dd0 <UART_SetConfig+0x434>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	011d      	lsls	r5, r3, #4
 8003d18:	f7fd fd52 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009a      	lsls	r2, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d32:	f7fd fd45 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009a      	lsls	r2, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <UART_SetConfig+0x434>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2264      	movs	r2, #100	; 0x64
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	1af3      	subs	r3, r6, r3
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	3332      	adds	r3, #50	; 0x32
 8003d60:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <UART_SetConfig+0x434>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6c:	441d      	add	r5, r3
 8003d6e:	f7fd fd27 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009a      	lsls	r2, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d88:	f7fd fd1a 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009a      	lsls	r2, r3, #2
 8003d96:	441a      	add	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <UART_SetConfig+0x434>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2264      	movs	r2, #100	; 0x64
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	1af3      	subs	r3, r6, r3
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	3332      	adds	r3, #50	; 0x32
 8003db6:	4a06      	ldr	r2, [pc, #24]	; (8003dd0 <UART_SetConfig+0x434>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	442b      	add	r3, r5
 8003dc4:	60a3      	str	r3, [r4, #8]
}
 8003dc6:	e7ff      	b.n	8003dc8 <UART_SetConfig+0x42c>
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	51eb851f 	.word	0x51eb851f

08003dd4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // I2C Module adress

void lcd_send_cmd (char cmd)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f023 030f 	bic.w	r3, r3, #15
 8003de4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	f043 030c 	orr.w	r3, r3, #12
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f043 0308 	orr.w	r3, r3, #8
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003e00:	7bbb      	ldrb	r3, [r7, #14]
 8003e02:	f043 030c 	orr.w	r3, r3, #12
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003e0a:	7bbb      	ldrb	r3, [r7, #14]
 8003e0c:	f043 0308 	orr.w	r3, r3, #8
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e14:	f107 0208 	add.w	r2, r7, #8
 8003e18:	2364      	movs	r3, #100	; 0x64
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	214e      	movs	r1, #78	; 0x4e
 8003e20:	4803      	ldr	r0, [pc, #12]	; (8003e30 <lcd_send_cmd+0x5c>)
 8003e22:	f7fd f8ed 	bl	8001000 <HAL_I2C_Master_Transmit>
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000164 	.word	0x20000164

08003e34 <lcd_send_data>:

void lcd_send_data (char data)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	f023 030f 	bic.w	r3, r3, #15
 8003e44:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	f043 030d 	orr.w	r3, r3, #13
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	f043 0309 	orr.w	r3, r3, #9
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e60:	7bbb      	ldrb	r3, [r7, #14]
 8003e62:	f043 030d 	orr.w	r3, r3, #13
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e6a:	7bbb      	ldrb	r3, [r7, #14]
 8003e6c:	f043 0309 	orr.w	r3, r3, #9
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e74:	f107 0208 	add.w	r2, r7, #8
 8003e78:	2364      	movs	r3, #100	; 0x64
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	214e      	movs	r1, #78	; 0x4e
 8003e80:	4803      	ldr	r0, [pc, #12]	; (8003e90 <lcd_send_data+0x5c>)
 8003e82:	f7fd f8bd 	bl	8001000 <HAL_I2C_Master_Transmit>
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000164 	.word	0x20000164

08003e94 <lcd_init>:


void lcd_init (void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8003e9e:	2064      	movs	r0, #100	; 0x64
 8003ea0:	f7fc fcb8 	bl	8000814 <HAL_Delay>
	for(i=0;i<3;i++)  //sending 3 times: select 4-bit mode
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	71fb      	strb	r3, [r7, #7]
 8003ea8:	e008      	b.n	8003ebc <lcd_init+0x28>
	{
		lcd_send_cmd(0x03);
 8003eaa:	2003      	movs	r0, #3
 8003eac:	f7ff ff92 	bl	8003dd4 <lcd_send_cmd>
		HAL_Delay(45);
 8003eb0:	202d      	movs	r0, #45	; 0x2d
 8003eb2:	f7fc fcaf 	bl	8000814 <HAL_Delay>
	for(i=0;i<3;i++)  //sending 3 times: select 4-bit mode
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	71fb      	strb	r3, [r7, #7]
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d9f3      	bls.n	8003eaa <lcd_init+0x16>
	}
	lcd_send_cmd (0x02);
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f7ff ff86 	bl	8003dd4 <lcd_send_cmd>
	HAL_Delay(100);
 8003ec8:	2064      	movs	r0, #100	; 0x64
 8003eca:	f7fc fca3 	bl	8000814 <HAL_Delay>
	lcd_send_cmd (0x28);
 8003ece:	2028      	movs	r0, #40	; 0x28
 8003ed0:	f7ff ff80 	bl	8003dd4 <lcd_send_cmd>
	HAL_Delay(1);
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7fc fc9d 	bl	8000814 <HAL_Delay>
	lcd_send_cmd (0x0c);
 8003eda:	200c      	movs	r0, #12
 8003edc:	f7ff ff7a 	bl	8003dd4 <lcd_send_cmd>
	HAL_Delay(1);
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f7fc fc97 	bl	8000814 <HAL_Delay>
	lcd_send_cmd (0x80);
 8003ee6:	2080      	movs	r0, #128	; 0x80
 8003ee8:	f7ff ff74 	bl	8003dd4 <lcd_send_cmd>
	HAL_Delay(1);
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7fc fc91 	bl	8000814 <HAL_Delay>
	lcd_send_cmd (0x01);
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	f7ff ff6e 	bl	8003dd4 <lcd_send_cmd>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003f08:	e006      	b.n	8003f18 <lcd_send_string+0x18>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ff8e 	bl	8003e34 <lcd_send_data>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f4      	bne.n	8003f0a <lcd_send_string+0xa>
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <cursor_jumpto_r_c>:

// Spring mit Cursor zur Reihe und Spalte
void cursor_jumpto_r_c (uint8_t row, uint8_t column)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	460a      	mov	r2, r1
 8003f32:	71fb      	strb	r3, [r7, #7]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71bb      	strb	r3, [r7, #6]
	uint8_t mycmd = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
	switch(row){
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d817      	bhi.n	8003f74 <cursor_jumpto_r_c+0x4c>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <cursor_jumpto_r_c+0x24>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f63 	.word	0x08003f63
 8003f54:	08003f69 	.word	0x08003f69
 8003f58:	08003f6f 	.word	0x08003f6f
		case 1: mycmd = 0x80;break;		// MSB=1, Bits 6-0 = AC: 1-000 0000
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	73fb      	strb	r3, [r7, #15]
 8003f60:	e008      	b.n	8003f74 <cursor_jumpto_r_c+0x4c>

		case 2: mycmd = 0xC0;break;		// 1-001 0100
 8003f62:	23c0      	movs	r3, #192	; 0xc0
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	e005      	b.n	8003f74 <cursor_jumpto_r_c+0x4c>

		case 3: mycmd = 0x94;break;		// 1-010 1000
 8003f68:	2394      	movs	r3, #148	; 0x94
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e002      	b.n	8003f74 <cursor_jumpto_r_c+0x4c>

		case 4: mycmd = 0xD4;break;		// 1-011 1100
 8003f6e:	23d4      	movs	r3, #212	; 0xd4
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	bf00      	nop
	}
	mycmd += (column-1);
 8003f74:	79ba      	ldrb	r2, [r7, #6]
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	4413      	add	r3, r2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd (mycmd);
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff26 	bl	8003dd4 <lcd_send_cmd>
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <cursor_shift_left>:

// Shift cursor einmal nach links
void cursor_shift_left(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x10);
 8003f94:	2010      	movs	r0, #16
 8003f96:	f7ff ff1d 	bl	8003dd4 <lcd_send_cmd>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <cursor_shift_left_ntime>:
	lcd_send_cmd (0x14);
}

//Shift cursor n-mal nach links
void cursor_shift_left_ntime(uint8_t number)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < number ; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e004      	b.n	8003fb8 <cursor_shift_left_ntime+0x1a>
		{
			cursor_shift_left();
 8003fae:	f7ff ffef 	bl	8003f90 <cursor_shift_left>
	for(int i = 0 ; i < number ; i++)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	79fa      	ldrb	r2, [r7, #7]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	dcf6      	bgt.n	8003fae <cursor_shift_left_ntime+0x10>
		}
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <delete_some_chars>:
	lcd_send_data (delete_me);			// Ueberschreibe mit leerem Char
	cursor_shift_left();
}

void delete_some_chars (uint8_t number)
{
 8003fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fcc:	b086      	sub	sp, #24
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	71f8      	strb	r0, [r7, #7]
 8003fd2:	4668      	mov	r0, sp
 8003fd4:	4680      	mov	r8, r0
	char delete_me[number];
 8003fd6:	79f8      	ldrb	r0, [r7, #7]
 8003fd8:	4605      	mov	r5, r0
 8003fda:	3d01      	subs	r5, #1
 8003fdc:	613d      	str	r5, [r7, #16]
 8003fde:	b2c5      	uxtb	r5, r0
 8003fe0:	f04f 0600 	mov.w	r6, #0
 8003fe4:	00f2      	lsls	r2, r6, #3
 8003fe6:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8003fea:	00e9      	lsls	r1, r5, #3
 8003fec:	b2c1      	uxtb	r1, r0
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	00d4      	lsls	r4, r2, #3
 8003ff4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003ff8:	00cb      	lsls	r3, r1, #3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	3307      	adds	r3, #7
 8003ffe:	08db      	lsrs	r3, r3, #3
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	ebad 0d03 	sub.w	sp, sp, r3
 8004006:	466b      	mov	r3, sp
 8004008:	3300      	adds	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

	for (int i=0; i<number; i++){
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e007      	b.n	8004022 <delete_some_chars+0x5a>
		delete_me[i]=' ';
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	2220      	movs	r2, #32
 800401a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<number; i++){
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3301      	adds	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	79fa      	ldrb	r2, [r7, #7]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	429a      	cmp	r2, r3
 8004028:	dcf3      	bgt.n	8004012 <delete_some_chars+0x4a>
	}
	lcd_send_string (&delete_me);		// Ueberschreibe mit leerem String
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ff67 	bl	8003f00 <lcd_send_string>
	cursor_shift_left_ntime(number);	// laufe mit dem Cursor zurueck
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ffb2 	bl	8003f9e <cursor_shift_left_ntime>
 800403a:	46c5      	mov	sp, r8
}
 800403c:	bf00      	nop
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004048 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800404c:	f7fc fb70 	bl	8000730 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8004050:	f000 fc80 	bl	8004954 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004054:	f001 f808 	bl	8005068 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8004058:	f000 ffdc 	bl	8005014 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800405c:	f000 fd0a 	bl	8004a74 <MX_I2C1_Init>
	MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 8004060:	2000      	movs	r0, #0
 8004062:	f000 feef 	bl	8004e44 <MX_TIM4_Init>
	MX_TIM3_Init(0);
 8004066:	2000      	movs	r0, #0
 8004068:	f000 fe8e 	bl	8004d88 <MX_TIM3_Init>
	MX_TIM8_Init(0);
 800406c:	2000      	movs	r0, #0
 800406e:	f000 ff47 	bl	8004f00 <MX_TIM8_Init>
	MX_TIM2_Init(0);
 8004072:	2000      	movs	r0, #0
 8004074:	f000 fe2c 	bl	8004cd0 <MX_TIM2_Init>
	MX_RTC_Init();
 8004078:	f000 fd9e 	bl	8004bb8 <MX_RTC_Init>

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	lcd_init();
 800407c:	f7ff ff0a 	bl	8003e94 <lcd_init>
	menu_print_text();
 8004080:	f000 fd26 	bl	8004ad0 <menu_print_text>
	menue_state = 1;
 8004084:	4b77      	ldr	r3, [pc, #476]	; (8004264 <main+0x21c>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

	//Set time, data and alarm
	//1) Set time
	myTime.Hours = 7;
 800408a:	4b77      	ldr	r3, [pc, #476]	; (8004268 <main+0x220>)
 800408c:	2207      	movs	r2, #7
 800408e:	701a      	strb	r2, [r3, #0]
	myTime.Minutes = 59;
 8004090:	4b75      	ldr	r3, [pc, #468]	; (8004268 <main+0x220>)
 8004092:	223b      	movs	r2, #59	; 0x3b
 8004094:	705a      	strb	r2, [r3, #1]
	myTime.Seconds = 30;
 8004096:	4b74      	ldr	r3, [pc, #464]	; (8004268 <main+0x220>)
 8004098:	221e      	movs	r2, #30
 800409a:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 800409c:	2200      	movs	r2, #0
 800409e:	4972      	ldr	r1, [pc, #456]	; (8004268 <main+0x220>)
 80040a0:	4872      	ldr	r0, [pc, #456]	; (800426c <main+0x224>)
 80040a2:	f7fe fb80 	bl	80027a6 <HAL_RTC_SetTime>
	//2) Set date
	myDate.Date = 6;
 80040a6:	4b72      	ldr	r3, [pc, #456]	; (8004270 <main+0x228>)
 80040a8:	2206      	movs	r2, #6
 80040aa:	709a      	strb	r2, [r3, #2]
	myDate.Month = RTC_MONTH_DECEMBER;
 80040ac:	4b70      	ldr	r3, [pc, #448]	; (8004270 <main+0x228>)
 80040ae:	2212      	movs	r2, #18
 80040b0:	705a      	strb	r2, [r3, #1]
	myDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80040b2:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <main+0x228>)
 80040b4:	2204      	movs	r2, #4
 80040b6:	701a      	strb	r2, [r3, #0]
	myDate.Year = 18;
 80040b8:	4b6d      	ldr	r3, [pc, #436]	; (8004270 <main+0x228>)
 80040ba:	2212      	movs	r2, #18
 80040bc:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 80040be:	2200      	movs	r2, #0
 80040c0:	496b      	ldr	r1, [pc, #428]	; (8004270 <main+0x228>)
 80040c2:	486a      	ldr	r0, [pc, #424]	; (800426c <main+0x224>)
 80040c4:	f7fe fc92 	bl	80029ec <HAL_RTC_SetDate>
	//3)Set alarm

	/* Infinite loop */
	//default times
	sunriseTime.Hours = 8;
 80040c8:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <main+0x22c>)
 80040ca:	2208      	movs	r2, #8
 80040cc:	701a      	strb	r2, [r3, #0]
	sunriseTime.Minutes = 0;
 80040ce:	4b69      	ldr	r3, [pc, #420]	; (8004274 <main+0x22c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	705a      	strb	r2, [r3, #1]

	sunsetTime.Hours = 18;
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <main+0x230>)
 80040d6:	2212      	movs	r2, #18
 80040d8:	701a      	strb	r2, [r3, #0]
	sunsetTime.Minutes = 0;
 80040da:	4b67      	ldr	r3, [pc, #412]	; (8004278 <main+0x230>)
 80040dc:	2200      	movs	r2, #0
 80040de:	705a      	strb	r2, [r3, #1]

	/* Infinite loop */
	while (1)
	{

		RTC_get_Time_and_Date();
 80040e0:	f000 fbe4 	bl	80048ac <RTC_get_Time_and_Date>
		//zeit anzeigen
		if(display_timer!=myTime.Minutes){
 80040e4:	4b60      	ldr	r3, [pc, #384]	; (8004268 <main+0x220>)
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b64      	ldr	r3, [pc, #400]	; (800427c <main+0x234>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d00e      	beq.n	8004110 <main+0xc8>
			menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 80040f2:	4b60      	ldr	r3, [pc, #384]	; (8004274 <main+0x22c>)
 80040f4:	7818      	ldrb	r0, [r3, #0]
 80040f6:	4b5f      	ldr	r3, [pc, #380]	; (8004274 <main+0x22c>)
 80040f8:	7859      	ldrb	r1, [r3, #1]
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <main+0x230>)
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <main+0x230>)
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	f000 fd0d 	bl	8004b20 <menu_print_time>
			display_timer=myTime.Minutes;
 8004106:	4b58      	ldr	r3, [pc, #352]	; (8004268 <main+0x220>)
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	461a      	mov	r2, r3
 800410c:	4b5b      	ldr	r3, [pc, #364]	; (800427c <main+0x234>)
 800410e:	601a      	str	r2, [r3, #0]
		}




		if(sunriseTime.Hours == myTime.Hours){			// Check if the current time equals the set sunrise time.
 8004110:	4b58      	ldr	r3, [pc, #352]	; (8004274 <main+0x22c>)
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	4b54      	ldr	r3, [pc, #336]	; (8004268 <main+0x220>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d108      	bne.n	800412e <main+0xe6>
			if(sunriseTime.Minutes == myTime.Minutes){
 800411c:	4b55      	ldr	r3, [pc, #340]	; (8004274 <main+0x22c>)
 800411e:	785a      	ldrb	r2, [r3, #1]
 8004120:	4b51      	ldr	r3, [pc, #324]	; (8004268 <main+0x220>)
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	429a      	cmp	r2, r3
 8004126:	d102      	bne.n	800412e <main+0xe6>
				state=1;//sunrise state
 8004128:	4b55      	ldr	r3, [pc, #340]	; (8004280 <main+0x238>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]
			}
		}
		if(sunriseTime.Hours+1 == myTime.Hours){		// Check if the current time equals the quick dim-down time.
 800412e:	4b51      	ldr	r3, [pc, #324]	; (8004274 <main+0x22c>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	3301      	adds	r3, #1
 8004134:	4a4c      	ldr	r2, [pc, #304]	; (8004268 <main+0x220>)
 8004136:	7812      	ldrb	r2, [r2, #0]
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <main+0x106>
			if(sunriseTime.Minutes == myTime.Minutes){
 800413c:	4b4d      	ldr	r3, [pc, #308]	; (8004274 <main+0x22c>)
 800413e:	785a      	ldrb	r2, [r3, #1]
 8004140:	4b49      	ldr	r3, [pc, #292]	; (8004268 <main+0x220>)
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	429a      	cmp	r2, r3
 8004146:	d102      	bne.n	800414e <main+0x106>
				state=3;
 8004148:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <main+0x238>)
 800414a:	2203      	movs	r2, #3
 800414c:	601a      	str	r2, [r3, #0]
			}
		}

		if(sunsetTime.Hours == myTime.Hours){			// Check if the current time equals the set sunset time.
 800414e:	4b4a      	ldr	r3, [pc, #296]	; (8004278 <main+0x230>)
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	4b45      	ldr	r3, [pc, #276]	; (8004268 <main+0x220>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d108      	bne.n	800416c <main+0x124>
			if(sunsetTime.Minutes == myTime.Minutes){
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <main+0x230>)
 800415c:	785a      	ldrb	r2, [r3, #1]
 800415e:	4b42      	ldr	r3, [pc, #264]	; (8004268 <main+0x220>)
 8004160:	785b      	ldrb	r3, [r3, #1]
 8004162:	429a      	cmp	r2, r3
 8004164:	d102      	bne.n	800416c <main+0x124>
				state=2;
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <main+0x238>)
 8004168:	2202      	movs	r2, #2
 800416a:	601a      	str	r2, [r3, #0]
			}
		}
		if(sunsetTime.Hours-1 == myTime.Hours){			// Check if the current time equals the quick turn-on time.
 800416c:	4b42      	ldr	r3, [pc, #264]	; (8004278 <main+0x230>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	4a3d      	ldr	r2, [pc, #244]	; (8004268 <main+0x220>)
 8004174:	7812      	ldrb	r2, [r2, #0]
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <main+0x144>
			if(sunsetTime.Minutes == myTime.Minutes){
 800417a:	4b3f      	ldr	r3, [pc, #252]	; (8004278 <main+0x230>)
 800417c:	785a      	ldrb	r2, [r3, #1]
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <main+0x220>)
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	429a      	cmp	r2, r3
 8004184:	d102      	bne.n	800418c <main+0x144>
				state=4;
 8004186:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <main+0x238>)
 8004188:	2204      	movs	r2, #4
 800418a:	601a      	str	r2, [r3, #0]
			}
		}

		switch (state) {	 		//taeglicher zyklus mit stateevent
 800418c:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <main+0x238>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3b01      	subs	r3, #1
 8004192:	2b03      	cmp	r3, #3
 8004194:	d816      	bhi.n	80041c4 <main+0x17c>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <main+0x154>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041b3 	.word	0x080041b3
 80041a4:	080041b9 	.word	0x080041b9
 80041a8:	080041bf 	.word	0x080041bf
		case 1:
			sunrise();
 80041ac:	f000 f9ca 	bl	8004544 <sunrise>
			break;
 80041b0:	e009      	b.n	80041c6 <main+0x17e>
		case 2:
			sunset();
 80041b2:	f000 fa23 	bl	80045fc <sunset>
			break;
 80041b6:	e006      	b.n	80041c6 <main+0x17e>
		case 3:
			LED_Dimm_Down();
 80041b8:	f000 faf8 	bl	80047ac <LED_Dimm_Down>
			break;
 80041bc:	e003      	b.n	80041c6 <main+0x17e>
		case 4:
			LED_Dimm_Up();
 80041be:	f000 fa9d 	bl	80046fc <LED_Dimm_Up>
			break;
 80041c2:	e000      	b.n	80041c6 <main+0x17e>
		default:

			break;
 80041c4:	bf00      	nop
		}


		//taster auslesen (positive flankentriggerung)
		button_pressed=0;
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <main+0x23c>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
		u8SampleButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80041cc:	2102      	movs	r1, #2
 80041ce:	482e      	ldr	r0, [pc, #184]	; (8004288 <main+0x240>)
 80041d0:	f7fc fde0 	bl	8000d94 <HAL_GPIO_ReadPin>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <main+0x244>)
 80041da:	701a      	strb	r2, [r3, #0]
		if((u8SampleButton != 0) && (u8SampleLastButton == 0)){
 80041dc:	4b2b      	ldr	r3, [pc, #172]	; (800428c <main+0x244>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <main+0x1aa>
 80041e4:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <main+0x248>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <main+0x1aa>
		  button_pressed=1;
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <main+0x23c>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
		}
		u8SampleLastButton = u8SampleButton;
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <main+0x244>)
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	4b26      	ldr	r3, [pc, #152]	; (8004290 <main+0x248>)
 80041f8:	701a      	strb	r2, [r3, #0]


		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==1)//wenn taste gedrueckt ledring an
 80041fa:	2102      	movs	r1, #2
 80041fc:	4822      	ldr	r0, [pc, #136]	; (8004288 <main+0x240>)
 80041fe:	f7fc fdc9 	bl	8000d94 <HAL_GPIO_ReadPin>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <main+0x1cc>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8004208:	2201      	movs	r2, #1
 800420a:	2120      	movs	r1, #32
 800420c:	4821      	ldr	r0, [pc, #132]	; (8004294 <main+0x24c>)
 800420e:	f7fc fdd9 	bl	8000dc4 <HAL_GPIO_WritePin>
 8004212:	e004      	b.n	800421e <main+0x1d6>
		}
		else//sonst aus
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8004214:	2200      	movs	r2, #0
 8004216:	2120      	movs	r1, #32
 8004218:	481e      	ldr	r0, [pc, #120]	; (8004294 <main+0x24c>)
 800421a:	f7fc fdd3 	bl	8000dc4 <HAL_GPIO_WritePin>
		}


		encoder_val=read_encoder();
 800421e:	f000 fb59 	bl	80048d4 <read_encoder>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <main+0x250>)
 8004228:	701a      	strb	r2, [r3, #0]

		//menue state machine
		switch (menue_state){ 			//Change menu state if button is pushed
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <main+0x21c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3b01      	subs	r3, #1
 8004230:	2b03      	cmp	r3, #3
 8004232:	f200 8160 	bhi.w	80044f6 <main+0x4ae>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <main+0x1f4>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800429d 	.word	0x0800429d
 8004244:	0800436f 	.word	0x0800436f
 8004248:	0800442d 	.word	0x0800442d
		case 1://running...
			if(button_pressed == GPIO_PIN_SET){
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <main+0x23c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	f040 8149 	bne.w	80044e8 <main+0x4a0>
				menue_state = 2;
 8004256:	4b03      	ldr	r3, [pc, #12]	; (8004264 <main+0x21c>)
 8004258:	2202      	movs	r2, #2
 800425a:	601a      	str	r2, [r3, #0]
				menu_print_cursor(2);
 800425c:	2002      	movs	r0, #2
 800425e:	f7fb ffd7 	bl	8000210 <menu_print_cursor>
			}
			break;
 8004262:	e141      	b.n	80044e8 <main+0x4a0>
 8004264:	20000008 	.word	0x20000008
 8004268:	200000d8 	.word	0x200000d8
 800426c:	20000220 	.word	0x20000220
 8004270:	2000021c 	.word	0x2000021c
 8004274:	200001f4 	.word	0x200001f4
 8004278:	20000208 	.word	0x20000208
 800427c:	200000b0 	.word	0x200000b0
 8004280:	200000a4 	.word	0x200000a4
 8004284:	200000a8 	.word	0x200000a8
 8004288:	40020800 	.word	0x40020800
 800428c:	200000c4 	.word	0x200000c4
 8004290:	200000c5 	.word	0x200000c5
 8004294:	40020400 	.word	0x40020400
 8004298:	200000c6 	.word	0x200000c6
		case 2://TIME
			if(button_pressed  == GPIO_PIN_SET){
 800429c:	4b98      	ldr	r3, [pc, #608]	; (8004500 <main+0x4b8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <main+0x268>
				menue_state = 3;
 80042a4:	4b97      	ldr	r3, [pc, #604]	; (8004504 <main+0x4bc>)
 80042a6:	2203      	movs	r2, #3
 80042a8:	601a      	str	r2, [r3, #0]
				menu_print_cursor(3);
 80042aa:	2003      	movs	r0, #3
 80042ac:	f7fb ffb0 	bl	8000210 <menu_print_cursor>
			}
			if(encoder_val == 1)
 80042b0:	4b95      	ldr	r3, [pc, #596]	; (8004508 <main+0x4c0>)
 80042b2:	f993 3000 	ldrsb.w	r3, [r3]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d128      	bne.n	800430c <main+0x2c4>
			{
				myTime.Minutes = myTime.Minutes+1;
 80042ba:	4b94      	ldr	r3, [pc, #592]	; (800450c <main+0x4c4>)
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	3301      	adds	r3, #1
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	4b92      	ldr	r3, [pc, #584]	; (800450c <main+0x4c4>)
 80042c4:	705a      	strb	r2, [r3, #1]
				if(myTime.Minutes >= 60)
 80042c6:	4b91      	ldr	r3, [pc, #580]	; (800450c <main+0x4c4>)
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	2b3b      	cmp	r3, #59	; 0x3b
 80042cc:	d90f      	bls.n	80042ee <main+0x2a6>
				{
					myTime.Hours = myTime.Hours+1;
 80042ce:	4b8f      	ldr	r3, [pc, #572]	; (800450c <main+0x4c4>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4b8d      	ldr	r3, [pc, #564]	; (800450c <main+0x4c4>)
 80042d8:	701a      	strb	r2, [r3, #0]
					myTime.Minutes = 0;
 80042da:	4b8c      	ldr	r3, [pc, #560]	; (800450c <main+0x4c4>)
 80042dc:	2200      	movs	r2, #0
 80042de:	705a      	strb	r2, [r3, #1]
					if(myTime.Hours >= 24)
 80042e0:	4b8a      	ldr	r3, [pc, #552]	; (800450c <main+0x4c4>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b17      	cmp	r3, #23
 80042e6:	d902      	bls.n	80042ee <main+0x2a6>
					{
						myTime.Hours = 0;
 80042e8:	4b88      	ldr	r3, [pc, #544]	; (800450c <main+0x4c4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
					}
				}
				HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80042ee:	2200      	movs	r2, #0
 80042f0:	4986      	ldr	r1, [pc, #536]	; (800450c <main+0x4c4>)
 80042f2:	4887      	ldr	r0, [pc, #540]	; (8004510 <main+0x4c8>)
 80042f4:	f7fe fa57 	bl	80027a6 <HAL_RTC_SetTime>
				menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 80042f8:	4b86      	ldr	r3, [pc, #536]	; (8004514 <main+0x4cc>)
 80042fa:	7818      	ldrb	r0, [r3, #0]
 80042fc:	4b85      	ldr	r3, [pc, #532]	; (8004514 <main+0x4cc>)
 80042fe:	7859      	ldrb	r1, [r3, #1]
 8004300:	4b85      	ldr	r3, [pc, #532]	; (8004518 <main+0x4d0>)
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	4b84      	ldr	r3, [pc, #528]	; (8004518 <main+0x4d0>)
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	f000 fc0a 	bl	8004b20 <menu_print_time>
			}
			if(encoder_val == -1)
 800430c:	4b7e      	ldr	r3, [pc, #504]	; (8004508 <main+0x4c0>)
 800430e:	f993 3000 	ldrsb.w	r3, [r3]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	f040 80e9 	bne.w	80044ec <main+0x4a4>
			{
				myTime.Minutes = myTime.Minutes-1;
 800431a:	4b7c      	ldr	r3, [pc, #496]	; (800450c <main+0x4c4>)
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	3b01      	subs	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b7a      	ldr	r3, [pc, #488]	; (800450c <main+0x4c4>)
 8004324:	705a      	strb	r2, [r3, #1]
					if(myTime.Minutes >= 60)
 8004326:	4b79      	ldr	r3, [pc, #484]	; (800450c <main+0x4c4>)
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	2b3b      	cmp	r3, #59	; 0x3b
 800432c:	d90f      	bls.n	800434e <main+0x306>
					{
						myTime.Hours = myTime.Hours-1;
 800432e:	4b77      	ldr	r3, [pc, #476]	; (800450c <main+0x4c4>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4b75      	ldr	r3, [pc, #468]	; (800450c <main+0x4c4>)
 8004338:	701a      	strb	r2, [r3, #0]
						myTime.Minutes = 59;
 800433a:	4b74      	ldr	r3, [pc, #464]	; (800450c <main+0x4c4>)
 800433c:	223b      	movs	r2, #59	; 0x3b
 800433e:	705a      	strb	r2, [r3, #1]
						if(myTime.Hours >= 24)
 8004340:	4b72      	ldr	r3, [pc, #456]	; (800450c <main+0x4c4>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b17      	cmp	r3, #23
 8004346:	d902      	bls.n	800434e <main+0x306>
						{
							myTime.Hours = 23;
 8004348:	4b70      	ldr	r3, [pc, #448]	; (800450c <main+0x4c4>)
 800434a:	2217      	movs	r2, #23
 800434c:	701a      	strb	r2, [r3, #0]
						}
					}
					HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);//myTime in RTC schreiben
 800434e:	2200      	movs	r2, #0
 8004350:	496e      	ldr	r1, [pc, #440]	; (800450c <main+0x4c4>)
 8004352:	486f      	ldr	r0, [pc, #444]	; (8004510 <main+0x4c8>)
 8004354:	f7fe fa27 	bl	80027a6 <HAL_RTC_SetTime>
					menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 8004358:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <main+0x4cc>)
 800435a:	7818      	ldrb	r0, [r3, #0]
 800435c:	4b6d      	ldr	r3, [pc, #436]	; (8004514 <main+0x4cc>)
 800435e:	7859      	ldrb	r1, [r3, #1]
 8004360:	4b6d      	ldr	r3, [pc, #436]	; (8004518 <main+0x4d0>)
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <main+0x4d0>)
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	f000 fbda 	bl	8004b20 <menu_print_time>
			}
			break;
 800436c:	e0be      	b.n	80044ec <main+0x4a4>
		case 3://SUNRISE
			if(button_pressed  == GPIO_PIN_SET){
 800436e:	4b64      	ldr	r3, [pc, #400]	; (8004500 <main+0x4b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <main+0x33a>
				menue_state = 4;
 8004376:	4b63      	ldr	r3, [pc, #396]	; (8004504 <main+0x4bc>)
 8004378:	2204      	movs	r2, #4
 800437a:	601a      	str	r2, [r3, #0]
				menu_print_cursor(4);
 800437c:	2004      	movs	r0, #4
 800437e:	f7fb ff47 	bl	8000210 <menu_print_cursor>
			}
			if(encoder_val == 1)
 8004382:	4b61      	ldr	r3, [pc, #388]	; (8004508 <main+0x4c0>)
 8004384:	f993 3000 	ldrsb.w	r3, [r3]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d123      	bne.n	80043d4 <main+0x38c>
			{
				sunriseTime.Minutes = sunriseTime.Minutes+1;
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <main+0x4cc>)
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	3301      	adds	r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	4b5f      	ldr	r3, [pc, #380]	; (8004514 <main+0x4cc>)
 8004396:	705a      	strb	r2, [r3, #1]
				if(sunriseTime.Minutes >= 60)
 8004398:	4b5e      	ldr	r3, [pc, #376]	; (8004514 <main+0x4cc>)
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b3b      	cmp	r3, #59	; 0x3b
 800439e:	d90f      	bls.n	80043c0 <main+0x378>
				{
					sunriseTime.Hours = sunriseTime.Hours+1;
 80043a0:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <main+0x4cc>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	4b5a      	ldr	r3, [pc, #360]	; (8004514 <main+0x4cc>)
 80043aa:	701a      	strb	r2, [r3, #0]
					sunriseTime.Minutes = 0;
 80043ac:	4b59      	ldr	r3, [pc, #356]	; (8004514 <main+0x4cc>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	705a      	strb	r2, [r3, #1]
					if(sunriseTime.Hours >= 24)
 80043b2:	4b58      	ldr	r3, [pc, #352]	; (8004514 <main+0x4cc>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b17      	cmp	r3, #23
 80043b8:	d902      	bls.n	80043c0 <main+0x378>
					{
						sunriseTime.Hours = 0;
 80043ba:	4b56      	ldr	r3, [pc, #344]	; (8004514 <main+0x4cc>)
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
					}
				}
				menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 80043c0:	4b54      	ldr	r3, [pc, #336]	; (8004514 <main+0x4cc>)
 80043c2:	7818      	ldrb	r0, [r3, #0]
 80043c4:	4b53      	ldr	r3, [pc, #332]	; (8004514 <main+0x4cc>)
 80043c6:	7859      	ldrb	r1, [r3, #1]
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <main+0x4d0>)
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	4b52      	ldr	r3, [pc, #328]	; (8004518 <main+0x4d0>)
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	f000 fba6 	bl	8004b20 <menu_print_time>
			}
			if(encoder_val == -1)
 80043d4:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <main+0x4c0>)
 80043d6:	f993 3000 	ldrsb.w	r3, [r3]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	f040 8087 	bne.w	80044f0 <main+0x4a8>
			{
				sunriseTime.Minutes = sunriseTime.Minutes-1;
 80043e2:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <main+0x4cc>)
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <main+0x4cc>)
 80043ec:	705a      	strb	r2, [r3, #1]
					if(sunriseTime.Minutes >= 60)
 80043ee:	4b49      	ldr	r3, [pc, #292]	; (8004514 <main+0x4cc>)
 80043f0:	785b      	ldrb	r3, [r3, #1]
 80043f2:	2b3b      	cmp	r3, #59	; 0x3b
 80043f4:	d90f      	bls.n	8004416 <main+0x3ce>
					{
						sunriseTime.Hours = sunriseTime.Hours-1;
 80043f6:	4b47      	ldr	r3, [pc, #284]	; (8004514 <main+0x4cc>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b45      	ldr	r3, [pc, #276]	; (8004514 <main+0x4cc>)
 8004400:	701a      	strb	r2, [r3, #0]
						sunriseTime.Minutes = 59;
 8004402:	4b44      	ldr	r3, [pc, #272]	; (8004514 <main+0x4cc>)
 8004404:	223b      	movs	r2, #59	; 0x3b
 8004406:	705a      	strb	r2, [r3, #1]
						if(sunriseTime.Hours >= 24)
 8004408:	4b42      	ldr	r3, [pc, #264]	; (8004514 <main+0x4cc>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b17      	cmp	r3, #23
 800440e:	d902      	bls.n	8004416 <main+0x3ce>
						{
							sunriseTime.Hours = 23;
 8004410:	4b40      	ldr	r3, [pc, #256]	; (8004514 <main+0x4cc>)
 8004412:	2217      	movs	r2, #23
 8004414:	701a      	strb	r2, [r3, #0]
						}
					}
					menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <main+0x4cc>)
 8004418:	7818      	ldrb	r0, [r3, #0]
 800441a:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <main+0x4cc>)
 800441c:	7859      	ldrb	r1, [r3, #1]
 800441e:	4b3e      	ldr	r3, [pc, #248]	; (8004518 <main+0x4d0>)
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	4b3d      	ldr	r3, [pc, #244]	; (8004518 <main+0x4d0>)
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	f000 fb7b 	bl	8004b20 <menu_print_time>
			}
			break;
 800442a:	e061      	b.n	80044f0 <main+0x4a8>
		case 4://SUNSET
			if(button_pressed  == GPIO_PIN_SET){
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <main+0x4b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <main+0x3f8>
				menue_state = 1;
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <main+0x4bc>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
				menu_print_cursor(1);
 800443a:	2001      	movs	r0, #1
 800443c:	f7fb fee8 	bl	8000210 <menu_print_cursor>
			}
			if(encoder_val == 1)
 8004440:	4b31      	ldr	r3, [pc, #196]	; (8004508 <main+0x4c0>)
 8004442:	f993 3000 	ldrsb.w	r3, [r3]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d123      	bne.n	8004492 <main+0x44a>
			{
				sunsetTime.Minutes = sunsetTime.Minutes+1;
 800444a:	4b33      	ldr	r3, [pc, #204]	; (8004518 <main+0x4d0>)
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	3301      	adds	r3, #1
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <main+0x4d0>)
 8004454:	705a      	strb	r2, [r3, #1]
				if(sunsetTime.Minutes >= 60)
 8004456:	4b30      	ldr	r3, [pc, #192]	; (8004518 <main+0x4d0>)
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	2b3b      	cmp	r3, #59	; 0x3b
 800445c:	d90f      	bls.n	800447e <main+0x436>
				{
					sunsetTime.Hours = sunsetTime.Hours+1;
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <main+0x4d0>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <main+0x4d0>)
 8004468:	701a      	strb	r2, [r3, #0]
					sunsetTime.Minutes = 0;
 800446a:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <main+0x4d0>)
 800446c:	2200      	movs	r2, #0
 800446e:	705a      	strb	r2, [r3, #1]
					if(sunsetTime.Hours >= 24)
 8004470:	4b29      	ldr	r3, [pc, #164]	; (8004518 <main+0x4d0>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b17      	cmp	r3, #23
 8004476:	d902      	bls.n	800447e <main+0x436>
					{
						sunsetTime.Hours = 0;
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <main+0x4d0>)
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
					}
				}
				menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 800447e:	4b25      	ldr	r3, [pc, #148]	; (8004514 <main+0x4cc>)
 8004480:	7818      	ldrb	r0, [r3, #0]
 8004482:	4b24      	ldr	r3, [pc, #144]	; (8004514 <main+0x4cc>)
 8004484:	7859      	ldrb	r1, [r3, #1]
 8004486:	4b24      	ldr	r3, [pc, #144]	; (8004518 <main+0x4d0>)
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <main+0x4d0>)
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	f000 fb47 	bl	8004b20 <menu_print_time>
			}
			if(encoder_val == -1)
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <main+0x4c0>)
 8004494:	f993 3000 	ldrsb.w	r3, [r3]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d12a      	bne.n	80044f4 <main+0x4ac>
			{
				sunsetTime.Minutes = sunsetTime.Minutes-1;
 800449e:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <main+0x4d0>)
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <main+0x4d0>)
 80044a8:	705a      	strb	r2, [r3, #1]
					if(sunsetTime.Minutes >= 60)
 80044aa:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <main+0x4d0>)
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b3b      	cmp	r3, #59	; 0x3b
 80044b0:	d90f      	bls.n	80044d2 <main+0x48a>
					{
						sunsetTime.Hours = sunsetTime.Hours-1;
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <main+0x4d0>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <main+0x4d0>)
 80044bc:	701a      	strb	r2, [r3, #0]
						sunsetTime.Minutes = 59;
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <main+0x4d0>)
 80044c0:	223b      	movs	r2, #59	; 0x3b
 80044c2:	705a      	strb	r2, [r3, #1]
						if(sunsetTime.Hours >= 24)
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <main+0x4d0>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b17      	cmp	r3, #23
 80044ca:	d902      	bls.n	80044d2 <main+0x48a>
						{
							sunsetTime.Hours = 23;
 80044cc:	4b12      	ldr	r3, [pc, #72]	; (8004518 <main+0x4d0>)
 80044ce:	2217      	movs	r2, #23
 80044d0:	701a      	strb	r2, [r3, #0]
						}
					}
					menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <main+0x4cc>)
 80044d4:	7818      	ldrb	r0, [r3, #0]
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <main+0x4cc>)
 80044d8:	7859      	ldrb	r1, [r3, #1]
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <main+0x4d0>)
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <main+0x4d0>)
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	f000 fb1d 	bl	8004b20 <menu_print_time>
			}
			break;
 80044e6:	e005      	b.n	80044f4 <main+0x4ac>
			break;
 80044e8:	bf00      	nop
 80044ea:	e004      	b.n	80044f6 <main+0x4ae>
			break;
 80044ec:	bf00      	nop
 80044ee:	e002      	b.n	80044f6 <main+0x4ae>
			break;
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <main+0x4ae>
			break;
 80044f4:	bf00      	nop
		}
		HAL_Delay(10);//entprellen des tasters
 80044f6:	200a      	movs	r0, #10
 80044f8:	f7fc f98c 	bl	8000814 <HAL_Delay>
		RTC_get_Time_and_Date();
 80044fc:	e5f0      	b.n	80040e0 <main+0x98>
 80044fe:	bf00      	nop
 8004500:	200000a8 	.word	0x200000a8
 8004504:	20000008 	.word	0x20000008
 8004508:	200000c6 	.word	0x200000c6
 800450c:	200000d8 	.word	0x200000d8
 8004510:	20000220 	.word	0x20000220
 8004514:	200001f4 	.word	0x200001f4
 8004518:	20000208 	.word	0x20000208

0800451c <set_RGB>:
 * @brief Function that adjusts colour of LED strip
 * @param Duty cycles of red, green and blue LEDs, respectively
 * @retval None
 */
void set_RGB(int red, int green, int blue)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
	MX_TIM4_Init(red);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fc8b 	bl	8004e44 <MX_TIM4_Init>
	MX_TIM3_Init(green);
 800452e:	68b8      	ldr	r0, [r7, #8]
 8004530:	f000 fc2a 	bl	8004d88 <MX_TIM3_Init>
	MX_TIM8_Init(blue);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fce3 	bl	8004f00 <MX_TIM8_Init>
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <sunrise>:
 * @brief Function that controls LED and fluorescent lamp to simulate sunrise
 * @param None
 * @retval None
 */
void sunrise(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);//relais fuer FL ein
 8004548:	2201      	movs	r2, #1
 800454a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800454e:	4824      	ldr	r0, [pc, #144]	; (80045e0 <sunrise+0x9c>)
 8004550:	f7fc fc38 	bl	8000dc4 <HAL_GPIO_WritePin>
	RTC_get_Time_and_Date();
 8004554:	f000 f9aa 	bl	80048ac <RTC_get_Time_and_Date>
	if((red<=1000) && (green<=1000) && (blue<=1000) && (FLbrightness<=1000))//nur dimmen wenn max helligkeit noch nicht erreicht
 8004558:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <sunrise+0xa0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004560:	dc3c      	bgt.n	80045dc <sunrise+0x98>
 8004562:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <sunrise+0xa4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800456a:	dc37      	bgt.n	80045dc <sunrise+0x98>
 800456c:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <sunrise+0xa8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004574:	dc32      	bgt.n	80045dc <sunrise+0x98>
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <sunrise+0xac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800457e:	dc2d      	bgt.n	80045dc <sunrise+0x98>
	{
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <sunrise+0xb0>)
 8004582:	789b      	ldrb	r3, [r3, #2]
 8004584:	461a      	mov	r2, r3
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <sunrise+0xb4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d026      	beq.n	80045dc <sunrise+0x98>
		{
			red=red+25;
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <sunrise+0xa0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3319      	adds	r3, #25
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <sunrise+0xa0>)
 8004596:	6013      	str	r3, [r2, #0]
			green=green+8;
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <sunrise+0xa4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	4a12      	ldr	r2, [pc, #72]	; (80045e8 <sunrise+0xa4>)
 80045a0:	6013      	str	r3, [r2, #0]
			blue=blue+1;
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <sunrise+0xa8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	4a10      	ldr	r2, [pc, #64]	; (80045ec <sunrise+0xa8>)
 80045aa:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness+25;
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <sunrise+0xac>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3319      	adds	r3, #25
 80045b2:	4a0f      	ldr	r2, [pc, #60]	; (80045f0 <sunrise+0xac>)
 80045b4:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <sunrise+0xac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fe0c 	bl	80051d8 <set_FL>
			set_RGB(red,green,blue);
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <sunrise+0xa0>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <sunrise+0xa4>)
 80045c6:	6819      	ldr	r1, [r3, #0]
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <sunrise+0xa8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	f7ff ffa5 	bl	800451c <set_RGB>
			sunrise_timer=myTime.Seconds;
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <sunrise+0xb0>)
 80045d4:	789b      	ldrb	r3, [r3, #2]
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <sunrise+0xb4>)
 80045da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80045dc:	bf00      	nop
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40020000 	.word	0x40020000
 80045e4:	200000b4 	.word	0x200000b4
 80045e8:	200000b8 	.word	0x200000b8
 80045ec:	200000bc 	.word	0x200000bc
 80045f0:	200000c0 	.word	0x200000c0
 80045f4:	200000d8 	.word	0x200000d8
 80045f8:	200000ac 	.word	0x200000ac

080045fc <sunset>:
 * @brief Function that controls LED and fluorescent lamp to simulate sunset
 * @param None
 * @retval None
 */
void sunset(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	RTC_get_Time_and_Date();
 8004600:	f000 f954 	bl	80048ac <RTC_get_Time_and_Date>
	if((red>=25) && (green>=8) && (blue>=1) && (FLbrightness>=25))//nur dimmen wenn die Led noch leuchten
 8004604:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <sunset+0xe4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b18      	cmp	r3, #24
 800460a:	dd3a      	ble.n	8004682 <sunset+0x86>
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <sunset+0xe8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b07      	cmp	r3, #7
 8004612:	dd36      	ble.n	8004682 <sunset+0x86>
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <sunset+0xec>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dd32      	ble.n	8004682 <sunset+0x86>
 800461c:	4b33      	ldr	r3, [pc, #204]	; (80046ec <sunset+0xf0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b18      	cmp	r3, #24
 8004622:	dd2e      	ble.n	8004682 <sunset+0x86>
	{
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 8004624:	4b32      	ldr	r3, [pc, #200]	; (80046f0 <sunset+0xf4>)
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	461a      	mov	r2, r3
 800462a:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <sunset+0xf8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d053      	beq.n	80046da <sunset+0xde>
		{
			red=red-25;
 8004632:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <sunset+0xe4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3b19      	subs	r3, #25
 8004638:	4a29      	ldr	r2, [pc, #164]	; (80046e0 <sunset+0xe4>)
 800463a:	6013      	str	r3, [r2, #0]
			green=green-8;
 800463c:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <sunset+0xe8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3b08      	subs	r3, #8
 8004642:	4a28      	ldr	r2, [pc, #160]	; (80046e4 <sunset+0xe8>)
 8004644:	6013      	str	r3, [r2, #0]
			blue=blue-1;
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <sunset+0xec>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <sunset+0xec>)
 800464e:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness-25;
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <sunset+0xf0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3b19      	subs	r3, #25
 8004656:	4a25      	ldr	r2, [pc, #148]	; (80046ec <sunset+0xf0>)
 8004658:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <sunset+0xf0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fdba 	bl	80051d8 <set_FL>
			set_RGB(red,green,blue);
 8004664:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <sunset+0xe4>)
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <sunset+0xe8>)
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <sunset+0xec>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	f7ff ff53 	bl	800451c <set_RGB>
			sunrise_timer=myTime.Seconds;
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <sunset+0xf4>)
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	461a      	mov	r2, r3
 800467c:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <sunset+0xf8>)
 800467e:	601a      	str	r2, [r3, #0]
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 8004680:	e02b      	b.n	80046da <sunset+0xde>
		}
	}
	else //unterlauf der variablen fuer die helligkeit abfangen
	{
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <sunset+0xf4>)
 8004684:	789b      	ldrb	r3, [r3, #2]
 8004686:	461a      	mov	r2, r3
 8004688:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <sunset+0xf8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d01e      	beq.n	80046ce <sunset+0xd2>
		{
			red=0;
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <sunset+0xe4>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
			green=0;
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <sunset+0xe8>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
			blue=0;
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <sunset+0xec>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
			FLbrightness=0;
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <sunset+0xf0>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
			set_FL(FLbrightness);
 80046a8:	4b10      	ldr	r3, [pc, #64]	; (80046ec <sunset+0xf0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fd93 	bl	80051d8 <set_FL>
			set_RGB(red,green,blue);
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <sunset+0xe4>)
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <sunset+0xe8>)
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <sunset+0xec>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f7ff ff2c 	bl	800451c <set_RGB>
			sunrise_timer=myTime.Seconds;
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <sunset+0xf4>)
 80046c6:	789b      	ldrb	r3, [r3, #2]
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <sunset+0xf8>)
 80046cc:	601a      	str	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 80046ce:	2200      	movs	r2, #0
 80046d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046d4:	4808      	ldr	r0, [pc, #32]	; (80046f8 <sunset+0xfc>)
 80046d6:	f7fc fb75 	bl	8000dc4 <HAL_GPIO_WritePin>
	}
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200000b4 	.word	0x200000b4
 80046e4:	200000b8 	.word	0x200000b8
 80046e8:	200000bc 	.word	0x200000bc
 80046ec:	200000c0 	.word	0x200000c0
 80046f0:	200000d8 	.word	0x200000d8
 80046f4:	200000ac 	.word	0x200000ac
 80046f8:	40020000 	.word	0x40020000

080046fc <LED_Dimm_Up>:
 * @brief Function that gradually turns up the LED strip
 * @param None
 * @retval None
 */
void LED_Dimm_Up(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8004700:	2201      	movs	r2, #1
 8004702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004706:	4822      	ldr	r0, [pc, #136]	; (8004790 <LED_Dimm_Up+0x94>)
 8004708:	f7fc fb5c 	bl	8000dc4 <HAL_GPIO_WritePin>
	RTC_get_Time_and_Date();
 800470c:	f000 f8ce 	bl	80048ac <RTC_get_Time_and_Date>
	if((red<=1000) && (green<=1000) && (blue<=1000))//nur dimmen wenn max helligkeit noch nicht erreicht
 8004710:	4b20      	ldr	r3, [pc, #128]	; (8004794 <LED_Dimm_Up+0x98>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004718:	dc37      	bgt.n	800478a <LED_Dimm_Up+0x8e>
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <LED_Dimm_Up+0x9c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004722:	dc32      	bgt.n	800478a <LED_Dimm_Up+0x8e>
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <LED_Dimm_Up+0xa0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800472c:	dc2d      	bgt.n	800478a <LED_Dimm_Up+0x8e>
	{
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 800472e:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <LED_Dimm_Up+0xa4>)
 8004730:	789b      	ldrb	r3, [r3, #2]
 8004732:	461a      	mov	r2, r3
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <LED_Dimm_Up+0xa8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d026      	beq.n	800478a <LED_Dimm_Up+0x8e>
		{
			red=red+50;
 800473c:	4b15      	ldr	r3, [pc, #84]	; (8004794 <LED_Dimm_Up+0x98>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3332      	adds	r3, #50	; 0x32
 8004742:	4a14      	ldr	r2, [pc, #80]	; (8004794 <LED_Dimm_Up+0x98>)
 8004744:	6013      	str	r3, [r2, #0]
			green=green+16;
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <LED_Dimm_Up+0x9c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3310      	adds	r3, #16
 800474c:	4a12      	ldr	r2, [pc, #72]	; (8004798 <LED_Dimm_Up+0x9c>)
 800474e:	6013      	str	r3, [r2, #0]
			blue=blue+2;
 8004750:	4b12      	ldr	r3, [pc, #72]	; (800479c <LED_Dimm_Up+0xa0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3302      	adds	r3, #2
 8004756:	4a11      	ldr	r2, [pc, #68]	; (800479c <LED_Dimm_Up+0xa0>)
 8004758:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness+50;
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <LED_Dimm_Up+0xac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3332      	adds	r3, #50	; 0x32
 8004760:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <LED_Dimm_Up+0xac>)
 8004762:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <LED_Dimm_Up+0xac>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fd35 	bl	80051d8 <set_FL>
			set_RGB(red,green,blue);
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <LED_Dimm_Up+0x98>)
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <LED_Dimm_Up+0x9c>)
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <LED_Dimm_Up+0xa0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f7ff fece 	bl	800451c <set_RGB>
			sunrise_timer=myTime.Seconds;
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <LED_Dimm_Up+0xa4>)
 8004782:	789b      	ldrb	r3, [r3, #2]
 8004784:	461a      	mov	r2, r3
 8004786:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <LED_Dimm_Up+0xa8>)
 8004788:	601a      	str	r2, [r3, #0]
		}
	}
}
 800478a:	bf00      	nop
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40020000 	.word	0x40020000
 8004794:	200000b4 	.word	0x200000b4
 8004798:	200000b8 	.word	0x200000b8
 800479c:	200000bc 	.word	0x200000bc
 80047a0:	200000d8 	.word	0x200000d8
 80047a4:	200000ac 	.word	0x200000ac
 80047a8:	200000c0 	.word	0x200000c0

080047ac <LED_Dimm_Down>:
 * @brief Function that gradually dims the LED strip
 * @param None
 * @retval None
 */
void LED_Dimm_Down(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
	RTC_get_Time_and_Date();
 80047b0:	f000 f87c 	bl	80048ac <RTC_get_Time_and_Date>
	if((red>=50) && (green>=16) && (blue>=2) && (FLbrightness>=25)) //nur dimmen wenn die Led noch leuchten
 80047b4:	4b36      	ldr	r3, [pc, #216]	; (8004890 <LED_Dimm_Down+0xe4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b31      	cmp	r3, #49	; 0x31
 80047ba:	dd3a      	ble.n	8004832 <LED_Dimm_Down+0x86>
 80047bc:	4b35      	ldr	r3, [pc, #212]	; (8004894 <LED_Dimm_Down+0xe8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	dd36      	ble.n	8004832 <LED_Dimm_Down+0x86>
 80047c4:	4b34      	ldr	r3, [pc, #208]	; (8004898 <LED_Dimm_Down+0xec>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	dd32      	ble.n	8004832 <LED_Dimm_Down+0x86>
 80047cc:	4b33      	ldr	r3, [pc, #204]	; (800489c <LED_Dimm_Down+0xf0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b18      	cmp	r3, #24
 80047d2:	dd2e      	ble.n	8004832 <LED_Dimm_Down+0x86>
	{
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <LED_Dimm_Down+0xf4>)
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	461a      	mov	r2, r3
 80047da:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <LED_Dimm_Down+0xf8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d053      	beq.n	800488a <LED_Dimm_Down+0xde>
		{
			red=red-50;
 80047e2:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <LED_Dimm_Down+0xe4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3b32      	subs	r3, #50	; 0x32
 80047e8:	4a29      	ldr	r2, [pc, #164]	; (8004890 <LED_Dimm_Down+0xe4>)
 80047ea:	6013      	str	r3, [r2, #0]
			green=green-16;
 80047ec:	4b29      	ldr	r3, [pc, #164]	; (8004894 <LED_Dimm_Down+0xe8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3b10      	subs	r3, #16
 80047f2:	4a28      	ldr	r2, [pc, #160]	; (8004894 <LED_Dimm_Down+0xe8>)
 80047f4:	6013      	str	r3, [r2, #0]
			blue=blue-2;
 80047f6:	4b28      	ldr	r3, [pc, #160]	; (8004898 <LED_Dimm_Down+0xec>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3b02      	subs	r3, #2
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <LED_Dimm_Down+0xec>)
 80047fe:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness-50;
 8004800:	4b26      	ldr	r3, [pc, #152]	; (800489c <LED_Dimm_Down+0xf0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3b32      	subs	r3, #50	; 0x32
 8004806:	4a25      	ldr	r2, [pc, #148]	; (800489c <LED_Dimm_Down+0xf0>)
 8004808:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <LED_Dimm_Down+0xf0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fce2 	bl	80051d8 <set_FL>
			set_RGB(red,green,blue);
 8004814:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <LED_Dimm_Down+0xe4>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <LED_Dimm_Down+0xe8>)
 800481a:	6819      	ldr	r1, [r3, #0]
 800481c:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <LED_Dimm_Down+0xec>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	f7ff fe7b 	bl	800451c <set_RGB>
			sunrise_timer=myTime.Seconds;
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <LED_Dimm_Down+0xf4>)
 8004828:	789b      	ldrb	r3, [r3, #2]
 800482a:	461a      	mov	r2, r3
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <LED_Dimm_Down+0xf8>)
 800482e:	601a      	str	r2, [r3, #0]
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 8004830:	e02b      	b.n	800488a <LED_Dimm_Down+0xde>
		}
	}
	else	//unterlauf der variablen fuer die helligkeit abfangen
	{
		if(sunrise_timer!=myTime.Seconds)//jede sekunde
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <LED_Dimm_Down+0xf4>)
 8004834:	789b      	ldrb	r3, [r3, #2]
 8004836:	461a      	mov	r2, r3
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <LED_Dimm_Down+0xf8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d01e      	beq.n	800487e <LED_Dimm_Down+0xd2>
		{
			red=0;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <LED_Dimm_Down+0xe4>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
			green=0;
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <LED_Dimm_Down+0xe8>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
			blue=0;
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <LED_Dimm_Down+0xec>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
			FLbrightness=0;
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <LED_Dimm_Down+0xf0>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
			set_FL(FLbrightness);
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <LED_Dimm_Down+0xf0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fcbb 	bl	80051d8 <set_FL>
			set_RGB(red,green,blue);
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <LED_Dimm_Down+0xe4>)
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <LED_Dimm_Down+0xe8>)
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <LED_Dimm_Down+0xec>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7ff fe54 	bl	800451c <set_RGB>
			sunrise_timer=myTime.Seconds;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <LED_Dimm_Down+0xf4>)
 8004876:	789b      	ldrb	r3, [r3, #2]
 8004878:	461a      	mov	r2, r3
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <LED_Dimm_Down+0xf8>)
 800487c:	601a      	str	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 800487e:	2200      	movs	r2, #0
 8004880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004884:	4808      	ldr	r0, [pc, #32]	; (80048a8 <LED_Dimm_Down+0xfc>)
 8004886:	f7fc fa9d 	bl	8000dc4 <HAL_GPIO_WritePin>
	}
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	200000b4 	.word	0x200000b4
 8004894:	200000b8 	.word	0x200000b8
 8004898:	200000bc 	.word	0x200000bc
 800489c:	200000c0 	.word	0x200000c0
 80048a0:	200000d8 	.word	0x200000d8
 80048a4:	200000ac 	.word	0x200000ac
 80048a8:	40020000 	.word	0x40020000

080048ac <RTC_get_Time_and_Date>:
/**
 * @brief Real Time Clock update time and date
 * @retval None
 */
void RTC_get_Time_and_Date(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
	//1)Get time
	HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80048b0:	2200      	movs	r2, #0
 80048b2:	4905      	ldr	r1, [pc, #20]	; (80048c8 <RTC_get_Time_and_Date+0x1c>)
 80048b4:	4805      	ldr	r0, [pc, #20]	; (80048cc <RTC_get_Time_and_Date+0x20>)
 80048b6:	f7fe f83b 	bl	8002930 <HAL_RTC_GetTime>
	//2)Get data
	HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 80048ba:	2200      	movs	r2, #0
 80048bc:	4904      	ldr	r1, [pc, #16]	; (80048d0 <RTC_get_Time_and_Date+0x24>)
 80048be:	4803      	ldr	r0, [pc, #12]	; (80048cc <RTC_get_Time_and_Date+0x20>)
 80048c0:	f7fe f93b 	bl	8002b3a <HAL_RTC_GetDate>
}
 80048c4:	bf00      	nop
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	200000d8 	.word	0x200000d8
 80048cc:	20000220 	.word	0x20000220
 80048d0:	2000021c 	.word	0x2000021c

080048d4 <read_encoder>:
 * @brief Read new encoder state and decide turning direction
 * @param None
 * @retval 8bit unsigned integer. 0 for no rotation, -1 for CCW rotation, 1 for CW rotation.
 */
int8_t read_encoder(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
	static int8_t enc_states[] = {0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0}; // LUT for rotation direction
	uint8_t encAB = 0x00;
 80048da:	2300      	movs	r3, #0
 80048dc:	71fb      	strb	r3, [r7, #7]
	old_AB = old_AB << 2;                   	//remember previous state on the positions bit no. 2 and 3 (bit 0 is first element)
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <read_encoder+0x74>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <read_encoder+0x74>)
 80048e8:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET){ 	// If channel A is high level, bit no. 1 is set
 80048ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ee:	4817      	ldr	r0, [pc, #92]	; (800494c <read_encoder+0x78>)
 80048f0:	f7fc fa50 	bl	8000d94 <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d103      	bne.n	8004902 <read_encoder+0x2e>
		encAB = encAB | (0x01 << 1);
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET){	// If channel B is high level, bit no. 0 is set
 8004902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004906:	4811      	ldr	r0, [pc, #68]	; (800494c <read_encoder+0x78>)
 8004908:	f7fc fa44 	bl	8000d94 <HAL_GPIO_ReadPin>
 800490c:	4603      	mov	r3, r0
 800490e:	2b01      	cmp	r3, #1
 8004910:	d103      	bne.n	800491a <read_encoder+0x46>
		encAB = encAB | (0x01 << 0);
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	71fb      	strb	r3, [r7, #7]
	}
	old_AB = (old_AB | ( encAB & 0x03 ));  		//add current state without deleting previous state
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	b25a      	sxtb	r2, r3
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <read_encoder+0x74>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b25b      	sxtb	r3, r3
 800492a:	4313      	orrs	r3, r2
 800492c:	b25b      	sxtb	r3, r3
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <read_encoder+0x74>)
 8004932:	701a      	strb	r2, [r3, #0]
	return ( enc_states[( old_AB & 0x0f )]);	//Pick out the corresponding element in the LUT
 8004934:	4b04      	ldr	r3, [pc, #16]	; (8004948 <read_encoder+0x74>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <read_encoder+0x7c>)
 800493e:	56d3      	ldrsb	r3, [r2, r3]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200000a0 	.word	0x200000a0
 800494c:	40020000 	.word	0x40020000
 8004950:	2000000c 	.word	0x2000000c

08004954 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b0ac      	sub	sp, #176	; 0xb0
 8004958:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800495a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800495e:	2234      	movs	r2, #52	; 0x34
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f000 ff06 	bl	8005774 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004968:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004978:	f107 030c 	add.w	r3, r7, #12
 800497c:	225c      	movs	r2, #92	; 0x5c
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fef7 	bl	8005774 <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <SystemClock_Config+0x118>)
 800498c:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <SystemClock_Config+0x118>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <SystemClock_Config+0x118>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <SystemClock_Config+0x11c>)
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <SystemClock_Config+0x11c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80049b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b2e      	ldr	r3, [pc, #184]	; (8004a70 <SystemClock_Config+0x11c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80049c2:	2306      	movs	r3, #6
 80049c4:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049d2:	2310      	movs	r3, #16
 80049d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049d8:	2302      	movs	r3, #2
 80049da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 16;
 80049e4:	2310      	movs	r3, #16
 80049e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80049ea:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80049ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80049f2:	2304      	movs	r3, #4
 80049f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80049f8:	2302      	movs	r3, #2
 80049fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80049fe:	2302      	movs	r3, #2
 8004a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fd fbe1 	bl	80021d0 <HAL_RCC_OscConfig>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8004a14:	f000 fbeb 	bl	80051ee <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a18:	230f      	movs	r3, #15
 8004a1a:	66bb      	str	r3, [r7, #104]	; 0x68
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a20:	2300      	movs	r3, #0
 8004a22:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a28:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	67bb      	str	r3, [r7, #120]	; 0x78

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a32:	2102      	movs	r1, #2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fc fdd5 	bl	80015e4 <HAL_RCC_ClockConfig>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <SystemClock_Config+0xf0>
	{
		Error_Handler();
 8004a40:	f000 fbd5 	bl	80051ee <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a44:	2320      	movs	r3, #32
 8004a46:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc fedc 	bl	8001810 <HAL_RCCEx_PeriphCLKConfig>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <SystemClock_Config+0x10e>
	{
		Error_Handler();
 8004a5e:	f000 fbc6 	bl	80051ee <Error_Handler>
	}
}
 8004a62:	bf00      	nop
 8004a64:	37b0      	adds	r7, #176	; 0xb0
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40007000 	.word	0x40007000

08004a74 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004a7a:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <MX_I2C1_Init+0x54>)
 8004a7c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <MX_I2C1_Init+0x58>)
 8004a82:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a96:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004aa4:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ab0:	4804      	ldr	r0, [pc, #16]	; (8004ac4 <MX_I2C1_Init+0x50>)
 8004ab2:	f7fc f9c5 	bl	8000e40 <HAL_I2C_Init>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8004abc:	f000 fb97 	bl	80051ee <Error_Handler>
	}
}
 8004ac0:	bf00      	nop
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000164 	.word	0x20000164
 8004ac8:	40005400 	.word	0x40005400
 8004acc:	000186a0 	.word	0x000186a0

08004ad0 <menu_print_text>:
 * @param None
 * @retval None
 */

void menu_print_text (void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
	cursor_jumpto_r_c(1, 5);
 8004ad4:	2105      	movs	r1, #5
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f7ff fa26 	bl	8003f28 <cursor_jumpto_r_c>
	lcd_send_string("running...");
 8004adc:	480c      	ldr	r0, [pc, #48]	; (8004b10 <menu_print_text+0x40>)
 8004ade:	f7ff fa0f 	bl	8003f00 <lcd_send_string>

	cursor_jumpto_r_c(2, 5);
 8004ae2:	2105      	movs	r1, #5
 8004ae4:	2002      	movs	r0, #2
 8004ae6:	f7ff fa1f 	bl	8003f28 <cursor_jumpto_r_c>
	lcd_send_string("TIME");
 8004aea:	480a      	ldr	r0, [pc, #40]	; (8004b14 <menu_print_text+0x44>)
 8004aec:	f7ff fa08 	bl	8003f00 <lcd_send_string>

	cursor_jumpto_r_c(3, 5);
 8004af0:	2105      	movs	r1, #5
 8004af2:	2003      	movs	r0, #3
 8004af4:	f7ff fa18 	bl	8003f28 <cursor_jumpto_r_c>
	lcd_send_string("SUNRISE");
 8004af8:	4807      	ldr	r0, [pc, #28]	; (8004b18 <menu_print_text+0x48>)
 8004afa:	f7ff fa01 	bl	8003f00 <lcd_send_string>

	cursor_jumpto_r_c(4, 5);
 8004afe:	2105      	movs	r1, #5
 8004b00:	2004      	movs	r0, #4
 8004b02:	f7ff fa11 	bl	8003f28 <cursor_jumpto_r_c>
	lcd_send_string("SUNSET");
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <menu_print_text+0x4c>)
 8004b08:	f7ff f9fa 	bl	8003f00 <lcd_send_string>
}
 8004b0c:	bf00      	nop
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	08005ff4 	.word	0x08005ff4
 8004b14:	08006000 	.word	0x08006000
 8004b18:	08006008 	.word	0x08006008
 8004b1c:	08006010 	.word	0x08006010

08004b20 <menu_print_time>:
 *  -Eingestellte Startzeit Abend (time_pm)
 *  @retval None
 */

void menu_print_time (uint8_t HoursSunrise, uint8_t MinutesSunrise,uint8_t HoursSunset, uint8_t MinutesSunset)
{
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4623      	mov	r3, r4
 8004b30:	71fb      	strb	r3, [r7, #7]
 8004b32:	4603      	mov	r3, r0
 8004b34:	71bb      	strb	r3, [r7, #6]
 8004b36:	460b      	mov	r3, r1
 8004b38:	717b      	strb	r3, [r7, #5]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	713b      	strb	r3, [r7, #4]
	char sunrise[5];
	sprintf(sunrise, "%02d:%02d",HoursSunrise,MinutesSunrise);
 8004b3e:	79fa      	ldrb	r2, [r7, #7]
 8004b40:	79bb      	ldrb	r3, [r7, #6]
 8004b42:	f107 0018 	add.w	r0, r7, #24
 8004b46:	491a      	ldr	r1, [pc, #104]	; (8004bb0 <menu_print_time+0x90>)
 8004b48:	f000 fe1c 	bl	8005784 <siprintf>
	cursor_jumpto_r_c(3, 15);
 8004b4c:	210f      	movs	r1, #15
 8004b4e:	2003      	movs	r0, #3
 8004b50:	f7ff f9ea 	bl	8003f28 <cursor_jumpto_r_c>
	//delete_some_chars(5);
	lcd_send_string(&sunrise);
 8004b54:	f107 0318 	add.w	r3, r7, #24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f9d1 	bl	8003f00 <lcd_send_string>

	char sunset[5];
	sprintf(sunset, "%02d:%02d",HoursSunset,MinutesSunset);
 8004b5e:	797a      	ldrb	r2, [r7, #5]
 8004b60:	793b      	ldrb	r3, [r7, #4]
 8004b62:	f107 0010 	add.w	r0, r7, #16
 8004b66:	4912      	ldr	r1, [pc, #72]	; (8004bb0 <menu_print_time+0x90>)
 8004b68:	f000 fe0c 	bl	8005784 <siprintf>
	cursor_jumpto_r_c(4, 15);
 8004b6c:	210f      	movs	r1, #15
 8004b6e:	2004      	movs	r0, #4
 8004b70:	f7ff f9da 	bl	8003f28 <cursor_jumpto_r_c>
	//delete_some_chars(5);
	lcd_send_string(&sunset);
 8004b74:	f107 0310 	add.w	r3, r7, #16
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff f9c1 	bl	8003f00 <lcd_send_string>


	RTC_get_Time_and_Date();
 8004b7e:	f7ff fe95 	bl	80048ac <RTC_get_Time_and_Date>

	char realtime[5];
	sprintf(realtime, "%02d:%02d",myTime.Hours,myTime.Minutes);
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <menu_print_time+0x94>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <menu_print_time+0x94>)
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	f107 0008 	add.w	r0, r7, #8
 8004b90:	4907      	ldr	r1, [pc, #28]	; (8004bb0 <menu_print_time+0x90>)
 8004b92:	f000 fdf7 	bl	8005784 <siprintf>
	cursor_jumpto_r_c(2, 15);
 8004b96:	210f      	movs	r1, #15
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f7ff f9c5 	bl	8003f28 <cursor_jumpto_r_c>
	//delete_some_chars(5);
	lcd_send_string(&realtime);
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff f9ac 	bl	8003f00 <lcd_send_string>
}
 8004ba8:	bf00      	nop
 8004baa:	3724      	adds	r7, #36	; 0x24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd90      	pop	{r4, r7, pc}
 8004bb0:	08006018 	.word	0x08006018
 8004bb4:	200000d8 	.word	0x200000d8

08004bb8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b090      	sub	sp, #64	; 0x40
 8004bbc:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef sTime = {0};
 8004bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8004bce:	2300      	movs	r3, #0
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = {0};
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	2228      	movs	r2, #40	; 0x28
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fdcb 	bl	8005774 <memset>

	/**Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8004bde:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004be0:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <MX_RTC_Init+0x114>)
 8004be2:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004be4:	4b38      	ldr	r3, [pc, #224]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004bec:	227f      	movs	r2, #127	; 0x7f
 8004bee:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8004bf0:	4b35      	ldr	r3, [pc, #212]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004bf6:	4b34      	ldr	r3, [pc, #208]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004c02:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004c08:	482f      	ldr	r0, [pc, #188]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004c0a:	f7fd fd3b 	bl	8002684 <HAL_RTC_Init>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_RTC_Init+0x60>
	{
		Error_Handler();
 8004c14:	f000 faeb 	bl	80051ee <Error_Handler>
	}

	/**Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c36:	2201      	movs	r2, #1
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4823      	ldr	r0, [pc, #140]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004c3c:	f7fd fdb3 	bl	80027a6 <HAL_RTC_SetTime>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <MX_RTC_Init+0x92>
	{
		Error_Handler();
 8004c46:	f000 fad2 	bl	80051ee <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_JANUARY;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x1;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 0x18;
 8004c5c:	2318      	movs	r3, #24
 8004c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c66:	2201      	movs	r2, #1
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4817      	ldr	r0, [pc, #92]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004c6c:	f7fd febe 	bl	80029ec <HAL_RTC_SetDate>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_RTC_Init+0xc2>
	{
		Error_Handler();
 8004c76:	f000 faba 	bl	80051ee <Error_Handler>
	}
	/**Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8004ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004caa:	463b      	mov	r3, r7
 8004cac:	2201      	movs	r2, #1
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4805      	ldr	r0, [pc, #20]	; (8004cc8 <MX_RTC_Init+0x110>)
 8004cb2:	f7fd ff91 	bl	8002bd8 <HAL_RTC_SetAlarm_IT>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_RTC_Init+0x108>
	{
		Error_Handler();
 8004cbc:	f000 fa97 	bl	80051ee <Error_Handler>
	}


}
 8004cc0:	bf00      	nop
 8004cc2:	3740      	adds	r7, #64	; 0x40
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000220 	.word	0x20000220
 8004ccc:	40002800 	.word	0x40002800

08004cd0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM2_Init(int brightness)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	611a      	str	r2, [r3, #16]
 8004cf2:	615a      	str	r2, [r3, #20]
 8004cf4:	619a      	str	r2, [r3, #24]

	htim2.Instance = TIM2;
 8004cf6:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cfc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84;
 8004cfe:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d00:	2254      	movs	r2, #84	; 0x54
 8004d02:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d04:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d10:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004d18:	481a      	ldr	r0, [pc, #104]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d1a:	f7fe f99b 	bl	8003054 <HAL_TIM_PWM_Init>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8004d24:	f000 fa63 	bl	80051ee <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d34:	4619      	mov	r1, r3
 8004d36:	4813      	ldr	r0, [pc, #76]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d38:	f7fe fd44 	bl	80037c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <MX_TIM2_Init+0x76>
	{
		Error_Handler();
 8004d42:	f000 fa54 	bl	80051ee <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d46:	2360      	movs	r3, #96	; 0x60
 8004d48:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = brightness;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d56:	f107 030c 	add.w	r3, r7, #12
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4809      	ldr	r0, [pc, #36]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d60:	f7fe f9d8 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 8004d6a:	f000 fa40 	bl	80051ee <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8004d6e:	2108      	movs	r1, #8
 8004d70:	4804      	ldr	r0, [pc, #16]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d72:	f7fe f99b 	bl	80030ac <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim2);
 8004d76:	4803      	ldr	r0, [pc, #12]	; (8004d84 <MX_TIM2_Init+0xb4>)
 8004d78:	f000 fb2e 	bl	80053d8 <HAL_TIM_MspPostInit>

}
 8004d7c:	bf00      	nop
 8004d7e:	3730      	adds	r7, #48	; 0x30
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000240 	.word	0x20000240

08004d88 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM3_Init(int duty)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08c      	sub	sp, #48	; 0x30
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004d9a:	f107 030c 	add.w	r3, r7, #12
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	609a      	str	r2, [r3, #8]
 8004da6:	60da      	str	r2, [r3, #12]
 8004da8:	611a      	str	r2, [r3, #16]
 8004daa:	615a      	str	r2, [r3, #20]
 8004dac:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004db0:	4a23      	ldr	r2, [pc, #140]	; (8004e40 <MX_TIM3_Init+0xb8>)
 8004db2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84;
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004db6:	2254      	movs	r2, #84	; 0x54
 8004db8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004dc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dc6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc8:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004dce:	481b      	ldr	r0, [pc, #108]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004dd0:	f7fe f940 	bl	8003054 <HAL_TIM_PWM_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM3_Init+0x56>
	{
		Error_Handler();
 8004dda:	f000 fa08 	bl	80051ee <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dea:	4619      	mov	r1, r3
 8004dec:	4813      	ldr	r0, [pc, #76]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004dee:	f7fe fce9 	bl	80037c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <MX_TIM3_Init+0x74>
	{
		Error_Handler();
 8004df8:	f000 f9f9 	bl	80051ee <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dfc:	2360      	movs	r3, #96	; 0x60
 8004dfe:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = duty;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e0c:	f107 030c 	add.w	r3, r7, #12
 8004e10:	2204      	movs	r2, #4
 8004e12:	4619      	mov	r1, r3
 8004e14:	4809      	ldr	r0, [pc, #36]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004e16:	f7fe f97d 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8004e20:	f000 f9e5 	bl	80051ee <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8004e24:	2104      	movs	r1, #4
 8004e26:	4805      	ldr	r0, [pc, #20]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004e28:	f7fe f940 	bl	80030ac <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim3);
 8004e2c:	4803      	ldr	r0, [pc, #12]	; (8004e3c <MX_TIM3_Init+0xb4>)
 8004e2e:	f000 fad3 	bl	80053d8 <HAL_TIM_MspPostInit>

}
 8004e32:	bf00      	nop
 8004e34:	3730      	adds	r7, #48	; 0x30
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200001b8 	.word	0x200001b8
 8004e40:	40000400 	.word	0x40000400

08004e44 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM4_Init(int duty)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08c      	sub	sp, #48	; 0x30
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004e56:	f107 030c 	add.w	r3, r7, #12
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	609a      	str	r2, [r3, #8]
 8004e62:	60da      	str	r2, [r3, #12]
 8004e64:	611a      	str	r2, [r3, #16]
 8004e66:	615a      	str	r2, [r3, #20]
 8004e68:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004e6c:	4a23      	ldr	r2, [pc, #140]	; (8004efc <MX_TIM4_Init+0xb8>)
 8004e6e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84;
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004e72:	2254      	movs	r2, #84	; 0x54
 8004e74:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 8004e7c:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e82:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e84:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004e8a:	481b      	ldr	r0, [pc, #108]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004e8c:	f7fe f8e2 	bl	8003054 <HAL_TIM_PWM_Init>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <MX_TIM4_Init+0x56>
	{
		Error_Handler();
 8004e96:	f000 f9aa 	bl	80051ee <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4813      	ldr	r0, [pc, #76]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004eaa:	f7fe fc8b 	bl	80037c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <MX_TIM4_Init+0x74>
	{
		Error_Handler();
 8004eb4:	f000 f99b 	bl	80051ee <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eb8:	2360      	movs	r3, #96	; 0x60
 8004eba:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = duty;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4809      	ldr	r0, [pc, #36]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004ed2:	f7fe f91f 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_TIM4_Init+0x9c>
	{
		Error_Handler();
 8004edc:	f000 f987 	bl	80051ee <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4805      	ldr	r0, [pc, #20]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004ee4:	f7fe f8e2 	bl	80030ac <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim4);
 8004ee8:	4803      	ldr	r0, [pc, #12]	; (8004ef8 <MX_TIM4_Init+0xb4>)
 8004eea:	f000 fa75 	bl	80053d8 <HAL_TIM_MspPostInit>

}
 8004eee:	bf00      	nop
 8004ef0:	3730      	adds	r7, #48	; 0x30
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000128 	.word	0x20000128
 8004efc:	40000800 	.word	0x40000800

08004f00 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM8_Init(int duty)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b092      	sub	sp, #72	; 0x48
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
 8004f20:	611a      	str	r2, [r3, #16]
 8004f22:	615a      	str	r2, [r3, #20]
 8004f24:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f26:	f107 0308 	add.w	r3, r7, #8
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	609a      	str	r2, [r3, #8]
 8004f32:	60da      	str	r2, [r3, #12]
 8004f34:	611a      	str	r2, [r3, #16]
 8004f36:	615a      	str	r2, [r3, #20]
 8004f38:	619a      	str	r2, [r3, #24]

	htim8.Instance = TIM8;
 8004f3a:	4b34      	ldr	r3, [pc, #208]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f3c:	4a34      	ldr	r2, [pc, #208]	; (8005010 <MX_TIM8_Init+0x110>)
 8004f3e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 84;
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f42:	2254      	movs	r2, #84	; 0x54
 8004f44:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f46:	4b31      	ldr	r3, [pc, #196]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1000;
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f52:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f54:	4b2d      	ldr	r3, [pc, #180]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004f60:	482a      	ldr	r0, [pc, #168]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f62:	f7fe f877 	bl	8003054 <HAL_TIM_PWM_Init>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_TIM8_Init+0x70>
	{
		Error_Handler();
 8004f6c:	f000 f93f 	bl	80051ee <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f70:	2300      	movs	r3, #0
 8004f72:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004f78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4823      	ldr	r0, [pc, #140]	; (800500c <MX_TIM8_Init+0x10c>)
 8004f80:	f7fe fc20 	bl	80037c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <MX_TIM8_Init+0x8e>
	{
		Error_Handler();
 8004f8a:	f000 f930 	bl	80051ee <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f8e:	2360      	movs	r3, #96	; 0x60
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = duty;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fae:	2204      	movs	r2, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4816      	ldr	r0, [pc, #88]	; (800500c <MX_TIM8_Init+0x10c>)
 8004fb4:	f7fe f8ae 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_TIM8_Init+0xc2>
	{
		Error_Handler();
 8004fbe:	f000 f916 	bl	80051ee <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fda:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004fe0:	f107 0308 	add.w	r3, r7, #8
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4809      	ldr	r0, [pc, #36]	; (800500c <MX_TIM8_Init+0x10c>)
 8004fe8:	f7fe fc31 	bl	800384e <HAL_TIMEx_ConfigBreakDeadTime>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <MX_TIM8_Init+0xf6>
	{
		Error_Handler();
 8004ff2:	f000 f8fc 	bl	80051ee <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	4804      	ldr	r0, [pc, #16]	; (800500c <MX_TIM8_Init+0x10c>)
 8004ffa:	f7fe f857 	bl	80030ac <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim8);
 8004ffe:	4803      	ldr	r0, [pc, #12]	; (800500c <MX_TIM8_Init+0x10c>)
 8005000:	f000 f9ea 	bl	80053d8 <HAL_TIM_MspPostInit>

}
 8005004:	bf00      	nop
 8005006:	3748      	adds	r7, #72	; 0x48
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	200000ec 	.word	0x200000ec
 8005010:	40010400 	.word	0x40010400

08005014 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <MX_USART2_UART_Init+0x50>)
 800501c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 8005020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005024:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005026:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 8005028:	2200      	movs	r2, #0
 800502a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 800502e:	2200      	movs	r2, #0
 8005030:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 800503a:	220c      	movs	r2, #12
 800503c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 8005040:	2200      	movs	r2, #0
 8005042:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 8005046:	2200      	movs	r2, #0
 8005048:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800504a:	4805      	ldr	r0, [pc, #20]	; (8005060 <MX_USART2_UART_Init+0x4c>)
 800504c:	f7fe fc58 	bl	8003900 <HAL_UART_Init>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8005056:	f000 f8ca 	bl	80051ee <Error_Handler>
	}
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	2000027c 	.word	0x2000027c
 8005064:	40004400 	.word	0x40004400

08005068 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	609a      	str	r2, [r3, #8]
 800507a:	60da      	str	r2, [r3, #12]
 800507c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	4a4f      	ldr	r2, [pc, #316]	; (80051c0 <MX_GPIO_Init+0x158>)
 8005084:	4b4e      	ldr	r3, [pc, #312]	; (80051c0 <MX_GPIO_Init+0x158>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	6313      	str	r3, [r2, #48]	; 0x30
 800508e:	4b4c      	ldr	r3, [pc, #304]	; (80051c0 <MX_GPIO_Init+0x158>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	4a48      	ldr	r2, [pc, #288]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050a0:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a8:	6313      	str	r3, [r2, #48]	; 0x30
 80050aa:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	4a41      	ldr	r2, [pc, #260]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050bc:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6313      	str	r3, [r2, #48]	; 0x30
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	4a3a      	ldr	r2, [pc, #232]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	6313      	str	r3, [r2, #48]	; 0x30
 80050e2:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <MX_GPIO_Init+0x158>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2160      	movs	r1, #96	; 0x60
 80050f2:	4834      	ldr	r0, [pc, #208]	; (80051c4 <MX_GPIO_Init+0x15c>)
 80050f4:	f7fb fe66 	bl	8000dc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80050f8:	2200      	movs	r2, #0
 80050fa:	2120      	movs	r1, #32
 80050fc:	4832      	ldr	r0, [pc, #200]	; (80051c8 <MX_GPIO_Init+0x160>)
 80050fe:	f7fb fe61 	bl	8000dc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8005102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005106:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005108:	4b30      	ldr	r3, [pc, #192]	; (80051cc <MX_GPIO_Init+0x164>)
 800510a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4619      	mov	r1, r3
 8005116:	482e      	ldr	r0, [pc, #184]	; (80051d0 <MX_GPIO_Init+0x168>)
 8005118:	f7fb fcaa 	bl	8000a70 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC1 : Push button in*/
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800511c:	2302      	movs	r3, #2
 800511e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005120:	4b2c      	ldr	r3, [pc, #176]	; (80051d4 <MX_GPIO_Init+0x16c>)
 8005122:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005124:	2302      	movs	r3, #2
 8005126:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005128:	f107 0314 	add.w	r3, r7, #20
 800512c:	4619      	mov	r1, r3
 800512e:	4828      	ldr	r0, [pc, #160]	; (80051d0 <MX_GPIO_Init+0x168>)
 8005130:	f7fb fc9e 	bl	8000a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_10;
 8005134:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8005138:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800513a:	2301      	movs	r3, #1
 800513c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800513e:	2301      	movs	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005142:	2300      	movs	r3, #0
 8005144:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005146:	f107 0314 	add.w	r3, r7, #20
 800514a:	4619      	mov	r1, r3
 800514c:	481d      	ldr	r0, [pc, #116]	; (80051c4 <MX_GPIO_Init+0x15c>)
 800514e:	f7fb fc8f 	bl	8000a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005156:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <MX_GPIO_Init+0x16c>)
 800515a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800515c:	2301      	movs	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	4619      	mov	r1, r3
 8005166:	4817      	ldr	r0, [pc, #92]	; (80051c4 <MX_GPIO_Init+0x15c>)
 8005168:	f7fb fc82 	bl	8000a70 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800516c:	2320      	movs	r3, #32
 800516e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005170:	2301      	movs	r3, #1
 8005172:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005178:	2300      	movs	r3, #0
 800517a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	4619      	mov	r1, r3
 8005182:	4811      	ldr	r0, [pc, #68]	; (80051c8 <MX_GPIO_Init+0x160>)
 8005184:	f7fb fc74 	bl	8000a70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005188:	2200      	movs	r2, #0
 800518a:	2100      	movs	r1, #0
 800518c:	2007      	movs	r0, #7
 800518e:	f7fb fc38 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005192:	2007      	movs	r0, #7
 8005194:	f7fb fc51 	bl	8000a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005198:	2200      	movs	r2, #0
 800519a:	2100      	movs	r1, #0
 800519c:	2017      	movs	r0, #23
 800519e:	f7fb fc30 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80051a2:	2017      	movs	r0, #23
 80051a4:	f7fb fc49 	bl	8000a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80051a8:	2200      	movs	r2, #0
 80051aa:	2100      	movs	r1, #0
 80051ac:	2028      	movs	r0, #40	; 0x28
 80051ae:	f7fb fc28 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80051b2:	2028      	movs	r0, #40	; 0x28
 80051b4:	f7fb fc41 	bl	8000a3a <HAL_NVIC_EnableIRQ>
}
 80051b8:	bf00      	nop
 80051ba:	3728      	adds	r7, #40	; 0x28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40020000 	.word	0x40020000
 80051c8:	40020400 	.word	0x40020400
 80051cc:	10210000 	.word	0x10210000
 80051d0:	40020800 	.word	0x40020800
 80051d4:	10110000 	.word	0x10110000

080051d8 <set_FL>:
 * @brief Adjust brightness of fluorescent lamp
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
void set_FL(int brightness)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	MX_TIM2_Init(brightness);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fd75 	bl	8004cd0 <MX_TIM2_Init>
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80051ee:	b480      	push	{r7}
 80051f0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* USER CODE END Error_Handler_Debug */
}
 80051f2:	bf00      	nop
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <HAL_MspInit+0x4c>)
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <HAL_MspInit+0x4c>)
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005210:	6453      	str	r3, [r2, #68]	; 0x44
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <HAL_MspInit+0x4c>)
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800521e:	2300      	movs	r3, #0
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4a09      	ldr	r2, [pc, #36]	; (8005248 <HAL_MspInit+0x4c>)
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <HAL_MspInit+0x4c>)
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	6413      	str	r3, [r2, #64]	; 0x40
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <HAL_MspInit+0x4c>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800523a:	2007      	movs	r0, #7
 800523c:	f7fb fbd6 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005254:	f107 0314 	add.w	r3, r7, #20
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <HAL_I2C_MspInit+0x84>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d12c      	bne.n	80052c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_I2C_MspInit+0x88>)
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <HAL_I2C_MspInit+0x88>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	6313      	str	r3, [r2, #48]	; 0x30
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <HAL_I2C_MspInit+0x88>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800528a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800528e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005290:	2312      	movs	r3, #18
 8005292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005294:	2301      	movs	r3, #1
 8005296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005298:	2303      	movs	r3, #3
 800529a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800529c:	2304      	movs	r3, #4
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a0:	f107 0314 	add.w	r3, r7, #20
 80052a4:	4619      	mov	r1, r3
 80052a6:	480c      	ldr	r0, [pc, #48]	; (80052d8 <HAL_I2C_MspInit+0x8c>)
 80052a8:	f7fb fbe2 	bl	8000a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <HAL_I2C_MspInit+0x88>)
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_I2C_MspInit+0x88>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ba:	6413      	str	r3, [r2, #64]	; 0x40
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_I2C_MspInit+0x88>)
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80052c8:	bf00      	nop
 80052ca:	3728      	adds	r7, #40	; 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40005400 	.word	0x40005400
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40020400 	.word	0x40020400

080052dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <HAL_RTC_MspInit+0x30>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10a      	bne.n	8005304 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <HAL_RTC_MspInit+0x34>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2100      	movs	r1, #0
 80052f8:	2029      	movs	r0, #41	; 0x29
 80052fa:	f7fb fb82 	bl	8000a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80052fe:	2029      	movs	r0, #41	; 0x29
 8005300:	f7fb fb9b 	bl	8000a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40002800 	.word	0x40002800
 8005310:	42470e3c 	.word	0x42470e3c

08005314 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	4a27      	ldr	r2, [pc, #156]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 800532c:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005342:	e03a      	b.n	80053ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a20      	ldr	r2, [pc, #128]	; (80053cc <HAL_TIM_PWM_MspInit+0xb8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10e      	bne.n	800536c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 8005354:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	f043 0302 	orr.w	r3, r3, #2
 800535c:	6413      	str	r3, [r2, #64]	; 0x40
 800535e:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
}
 800536a:	e026      	b.n	80053ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <HAL_TIM_PWM_MspInit+0xbc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 800537c:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	f043 0304 	orr.w	r3, r3, #4
 8005384:	6413      	str	r3, [r2, #64]	; 0x40
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
}
 8005392:	e012      	b.n	80053ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <HAL_TIM_PWM_MspInit+0xc0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10d      	bne.n	80053ba <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 80053a4:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	f043 0302 	orr.w	r3, r3, #2
 80053ac:	6453      	str	r3, [r2, #68]	; 0x44
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_TIM_PWM_MspInit+0xb4>)
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40010400 	.word	0x40010400

080053d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08c      	sub	sp, #48	; 0x30
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e0:	f107 031c 	add.w	r3, r7, #28
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f8:	d11f      	bne.n	800543a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	4a46      	ldr	r2, [pc, #280]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 8005400:	4b45      	ldr	r3, [pc, #276]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	6313      	str	r3, [r2, #48]	; 0x30
 800540a:	4b43      	ldr	r3, [pc, #268]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800541a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541c:	2302      	movs	r3, #2
 800541e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005420:	2300      	movs	r3, #0
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005424:	2300      	movs	r3, #0
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005428:	2301      	movs	r3, #1
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800542c:	f107 031c 	add.w	r3, r7, #28
 8005430:	4619      	mov	r1, r3
 8005432:	483a      	ldr	r0, [pc, #232]	; (800551c <HAL_TIM_MspPostInit+0x144>)
 8005434:	f7fb fb1c 	bl	8000a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005438:	e06a      	b.n	8005510 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a38      	ldr	r2, [pc, #224]	; (8005520 <HAL_TIM_MspPostInit+0x148>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d11e      	bne.n	8005482 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	4a33      	ldr	r2, [pc, #204]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 800544a:	4b33      	ldr	r3, [pc, #204]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	6313      	str	r3, [r2, #48]	; 0x30
 8005454:	4b30      	ldr	r3, [pc, #192]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005464:	2302      	movs	r3, #2
 8005466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546c:	2300      	movs	r3, #0
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005470:	2302      	movs	r3, #2
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005474:	f107 031c 	add.w	r3, r7, #28
 8005478:	4619      	mov	r1, r3
 800547a:	482a      	ldr	r0, [pc, #168]	; (8005524 <HAL_TIM_MspPostInit+0x14c>)
 800547c:	f7fb faf8 	bl	8000a70 <HAL_GPIO_Init>
}
 8005480:	e046      	b.n	8005510 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_TIM_MspPostInit+0x150>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d11e      	bne.n	80054ca <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	4a21      	ldr	r2, [pc, #132]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 8005492:	4b21      	ldr	r3, [pc, #132]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	f043 0302 	orr.w	r3, r3, #2
 800549a:	6313      	str	r3, [r2, #48]	; 0x30
 800549c:	4b1e      	ldr	r3, [pc, #120]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054a8:	2340      	movs	r3, #64	; 0x40
 80054aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ac:	2302      	movs	r3, #2
 80054ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054b8:	2302      	movs	r3, #2
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054bc:	f107 031c 	add.w	r3, r7, #28
 80054c0:	4619      	mov	r1, r3
 80054c2:	4816      	ldr	r0, [pc, #88]	; (800551c <HAL_TIM_MspPostInit+0x144>)
 80054c4:	f7fb fad4 	bl	8000a70 <HAL_GPIO_Init>
}
 80054c8:	e022      	b.n	8005510 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <HAL_TIM_MspPostInit+0x154>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d11d      	bne.n	8005510 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	6313      	str	r3, [r2, #48]	; 0x30
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <HAL_TIM_MspPostInit+0x140>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f4:	2302      	movs	r3, #2
 80054f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fc:	2300      	movs	r3, #0
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005500:	2303      	movs	r3, #3
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005504:	f107 031c 	add.w	r3, r7, #28
 8005508:	4619      	mov	r1, r3
 800550a:	4809      	ldr	r0, [pc, #36]	; (8005530 <HAL_TIM_MspPostInit+0x158>)
 800550c:	f7fb fab0 	bl	8000a70 <HAL_GPIO_Init>
}
 8005510:	bf00      	nop
 8005512:	3730      	adds	r7, #48	; 0x30
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	40020400 	.word	0x40020400
 8005520:	40000400 	.word	0x40000400
 8005524:	40020000 	.word	0x40020000
 8005528:	40000800 	.word	0x40000800
 800552c:	40010400 	.word	0x40010400
 8005530:	40020800 	.word	0x40020800

08005534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_UART_MspInit+0x84>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d12b      	bne.n	80055ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_UART_MspInit+0x88>)
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_UART_MspInit+0x88>)
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <HAL_UART_MspInit+0x88>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	4a11      	ldr	r2, [pc, #68]	; (80055bc <HAL_UART_MspInit+0x88>)
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_UART_MspInit+0x88>)
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6313      	str	r3, [r2, #48]	; 0x30
 8005582:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <HAL_UART_MspInit+0x88>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800558e:	230c      	movs	r3, #12
 8005590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005592:	2302      	movs	r3, #2
 8005594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005596:	2301      	movs	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559a:	2303      	movs	r3, #3
 800559c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800559e:	2307      	movs	r3, #7
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055a2:	f107 0314 	add.w	r3, r7, #20
 80055a6:	4619      	mov	r1, r3
 80055a8:	4805      	ldr	r0, [pc, #20]	; (80055c0 <HAL_UART_MspInit+0x8c>)
 80055aa:	f7fb fa61 	bl	8000a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80055ae:	bf00      	nop
 80055b0:	3728      	adds	r7, #40	; 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40020000 	.word	0x40020000

080055c4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80055d6:	e7fe      	b.n	80055d6 <HardFault_Handler+0x4>

080055d8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80055dc:	e7fe      	b.n	80055dc <MemManage_Handler+0x4>

080055de <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80055de:	b480      	push	{r7}
 80055e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80055e2:	e7fe      	b.n	80055e2 <BusFault_Handler+0x4>

080055e4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80055e8:	e7fe      	b.n	80055e8 <UsageFault_Handler+0x4>

080055ea <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80055ea:	b480      	push	{r7}
 80055ec:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80055fc:	bf00      	nop
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8005618:	f7fb f8dc 	bl	80007d4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}

08005620 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line 1 interrupt = button interrupt.
 */
void EXTI1_IRQHandler(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005624:	2002      	movs	r0, #2
 8005626:	f7fb fbe7 	bl	8000df8 <HAL_GPIO_EXTI_IRQHandler>
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}

0800562e <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts = rotary encoder, channel A and B
 */
void EXTI9_5_IRQHandler(void)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	af00      	add	r7, sp, #0
	  //}

//	  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
//	  }

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 8005632:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005636:	f7fb fbdf 	bl	8000df8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 800563a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800563e:	f7fb fbdb 	bl	8000df8 <HAL_GPIO_EXTI_IRQHandler>

}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}

08005646 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800564a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800564e:	f7fb fbd3 	bl	8000df8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <RTC_Alarm_IRQHandler>:

/**
 * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
 */
void RTC_Alarm_IRQHandler(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Alarm_IRQn 0 */

	/* USER CODE END RTC_Alarm_IRQn 0 */
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800565c:	4802      	ldr	r0, [pc, #8]	; (8005668 <RTC_Alarm_IRQHandler+0x10>)
 800565e:	f7fd fc0f 	bl	8002e80 <HAL_RTC_AlarmIRQHandler>
	/* USER CODE BEGIN RTC_Alarm_IRQn 1 */

	/* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000220 	.word	0x20000220

0800566c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005670:	4a16      	ldr	r2, [pc, #88]	; (80056cc <SystemInit+0x60>)
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <SystemInit+0x60>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800567c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <SystemInit+0x64>)
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <SystemInit+0x64>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800568c:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <SystemInit+0x64>)
 800568e:	2200      	movs	r2, #0
 8005690:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005692:	4a0f      	ldr	r2, [pc, #60]	; (80056d0 <SystemInit+0x64>)
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <SystemInit+0x64>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800569c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <SystemInit+0x64>)
 80056a4:	4a0b      	ldr	r2, [pc, #44]	; (80056d4 <SystemInit+0x68>)
 80056a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80056a8:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <SystemInit+0x64>)
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <SystemInit+0x64>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <SystemInit+0x64>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <SystemInit+0x60>)
 80056bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056c0:	609a      	str	r2, [r3, #8]
#endif
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	e000ed00 	.word	0xe000ed00
 80056d0:	40023800 	.word	0x40023800
 80056d4:	24003010 	.word	0x24003010

080056d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056de:	e003      	b.n	80056e8 <LoopCopyDataInit>

080056e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056e6:	3104      	adds	r1, #4

080056e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056e8:	480b      	ldr	r0, [pc, #44]	; (8005718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056ea:	4b0c      	ldr	r3, [pc, #48]	; (800571c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056f0:	d3f6      	bcc.n	80056e0 <CopyDataInit>
  ldr  r2, =_sbss
 80056f2:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056f4:	e002      	b.n	80056fc <LoopFillZerobss>

080056f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056f8:	f842 3b04 	str.w	r3, [r2], #4

080056fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005700:	d3f9      	bcc.n	80056f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005702:	f7ff ffb3 	bl	800566c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005706:	f000 f811 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800570a:	f7fe fc9d 	bl	8004048 <main>
  bx  lr    
 800570e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005710:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005714:	08006080 	.word	0x08006080
  ldr  r0, =_sdata
 8005718:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800571c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8005720:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8005724:	200002e8 	.word	0x200002e8

08005728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005728:	e7fe      	b.n	8005728 <ADC_IRQHandler>
	...

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4e0d      	ldr	r6, [pc, #52]	; (8005764 <__libc_init_array+0x38>)
 8005730:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <__libc_init_array+0x3c>)
 8005732:	1ba4      	subs	r4, r4, r6
 8005734:	10a4      	asrs	r4, r4, #2
 8005736:	2500      	movs	r5, #0
 8005738:	42a5      	cmp	r5, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	4e0b      	ldr	r6, [pc, #44]	; (800576c <__libc_init_array+0x40>)
 800573e:	4c0c      	ldr	r4, [pc, #48]	; (8005770 <__libc_init_array+0x44>)
 8005740:	f000 fc4c 	bl	8005fdc <_init>
 8005744:	1ba4      	subs	r4, r4, r6
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2500      	movs	r5, #0
 800574a:	42a5      	cmp	r5, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005754:	4798      	blx	r3
 8005756:	3501      	adds	r5, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800575e:	4798      	blx	r3
 8005760:	3501      	adds	r5, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08006078 	.word	0x08006078
 8005768:	08006078 	.word	0x08006078
 800576c:	08006078 	.word	0x08006078
 8005770:	0800607c 	.word	0x0800607c

08005774 <memset>:
 8005774:	4402      	add	r2, r0
 8005776:	4603      	mov	r3, r0
 8005778:	4293      	cmp	r3, r2
 800577a:	d100      	bne.n	800577e <memset+0xa>
 800577c:	4770      	bx	lr
 800577e:	f803 1b01 	strb.w	r1, [r3], #1
 8005782:	e7f9      	b.n	8005778 <memset+0x4>

08005784 <siprintf>:
 8005784:	b40e      	push	{r1, r2, r3}
 8005786:	b500      	push	{lr}
 8005788:	b09c      	sub	sp, #112	; 0x70
 800578a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800578e:	ab1d      	add	r3, sp, #116	; 0x74
 8005790:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005794:	9002      	str	r0, [sp, #8]
 8005796:	9006      	str	r0, [sp, #24]
 8005798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800579c:	480a      	ldr	r0, [pc, #40]	; (80057c8 <siprintf+0x44>)
 800579e:	9104      	str	r1, [sp, #16]
 80057a0:	9107      	str	r1, [sp, #28]
 80057a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057aa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80057ae:	6800      	ldr	r0, [r0, #0]
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	a902      	add	r1, sp, #8
 80057b4:	f000 f866 	bl	8005884 <_svfiprintf_r>
 80057b8:	9b02      	ldr	r3, [sp, #8]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	b01c      	add	sp, #112	; 0x70
 80057c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c4:	b003      	add	sp, #12
 80057c6:	4770      	bx	lr
 80057c8:	20000020 	.word	0x20000020

080057cc <__ssputs_r>:
 80057cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d0:	688e      	ldr	r6, [r1, #8]
 80057d2:	429e      	cmp	r6, r3
 80057d4:	4682      	mov	sl, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	4691      	mov	r9, r2
 80057da:	4698      	mov	r8, r3
 80057dc:	d835      	bhi.n	800584a <__ssputs_r+0x7e>
 80057de:	898a      	ldrh	r2, [r1, #12]
 80057e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057e4:	d031      	beq.n	800584a <__ssputs_r+0x7e>
 80057e6:	6825      	ldr	r5, [r4, #0]
 80057e8:	6909      	ldr	r1, [r1, #16]
 80057ea:	1a6f      	subs	r7, r5, r1
 80057ec:	6965      	ldr	r5, [r4, #20]
 80057ee:	2302      	movs	r3, #2
 80057f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80057f8:	f108 0301 	add.w	r3, r8, #1
 80057fc:	443b      	add	r3, r7
 80057fe:	429d      	cmp	r5, r3
 8005800:	bf38      	it	cc
 8005802:	461d      	movcc	r5, r3
 8005804:	0553      	lsls	r3, r2, #21
 8005806:	d531      	bpl.n	800586c <__ssputs_r+0xa0>
 8005808:	4629      	mov	r1, r5
 800580a:	f000 fb39 	bl	8005e80 <_malloc_r>
 800580e:	4606      	mov	r6, r0
 8005810:	b950      	cbnz	r0, 8005828 <__ssputs_r+0x5c>
 8005812:	230c      	movs	r3, #12
 8005814:	f8ca 3000 	str.w	r3, [sl]
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005828:	463a      	mov	r2, r7
 800582a:	6921      	ldr	r1, [r4, #16]
 800582c:	f000 fab4 	bl	8005d98 <memcpy>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	6126      	str	r6, [r4, #16]
 800583e:	6165      	str	r5, [r4, #20]
 8005840:	443e      	add	r6, r7
 8005842:	1bed      	subs	r5, r5, r7
 8005844:	6026      	str	r6, [r4, #0]
 8005846:	60a5      	str	r5, [r4, #8]
 8005848:	4646      	mov	r6, r8
 800584a:	4546      	cmp	r6, r8
 800584c:	bf28      	it	cs
 800584e:	4646      	movcs	r6, r8
 8005850:	4632      	mov	r2, r6
 8005852:	4649      	mov	r1, r9
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	f000 faaa 	bl	8005dae <memmove>
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	1b9b      	subs	r3, r3, r6
 800585e:	60a3      	str	r3, [r4, #8]
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	441e      	add	r6, r3
 8005864:	6026      	str	r6, [r4, #0]
 8005866:	2000      	movs	r0, #0
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	462a      	mov	r2, r5
 800586e:	f000 fb65 	bl	8005f3c <_realloc_r>
 8005872:	4606      	mov	r6, r0
 8005874:	2800      	cmp	r0, #0
 8005876:	d1e1      	bne.n	800583c <__ssputs_r+0x70>
 8005878:	6921      	ldr	r1, [r4, #16]
 800587a:	4650      	mov	r0, sl
 800587c:	f000 fab2 	bl	8005de4 <_free_r>
 8005880:	e7c7      	b.n	8005812 <__ssputs_r+0x46>
	...

08005884 <_svfiprintf_r>:
 8005884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	b09d      	sub	sp, #116	; 0x74
 800588a:	4680      	mov	r8, r0
 800588c:	9303      	str	r3, [sp, #12]
 800588e:	898b      	ldrh	r3, [r1, #12]
 8005890:	061c      	lsls	r4, r3, #24
 8005892:	460d      	mov	r5, r1
 8005894:	4616      	mov	r6, r2
 8005896:	d50f      	bpl.n	80058b8 <_svfiprintf_r+0x34>
 8005898:	690b      	ldr	r3, [r1, #16]
 800589a:	b96b      	cbnz	r3, 80058b8 <_svfiprintf_r+0x34>
 800589c:	2140      	movs	r1, #64	; 0x40
 800589e:	f000 faef 	bl	8005e80 <_malloc_r>
 80058a2:	6028      	str	r0, [r5, #0]
 80058a4:	6128      	str	r0, [r5, #16]
 80058a6:	b928      	cbnz	r0, 80058b4 <_svfiprintf_r+0x30>
 80058a8:	230c      	movs	r3, #12
 80058aa:	f8c8 3000 	str.w	r3, [r8]
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	e0c5      	b.n	8005a40 <_svfiprintf_r+0x1bc>
 80058b4:	2340      	movs	r3, #64	; 0x40
 80058b6:	616b      	str	r3, [r5, #20]
 80058b8:	2300      	movs	r3, #0
 80058ba:	9309      	str	r3, [sp, #36]	; 0x24
 80058bc:	2320      	movs	r3, #32
 80058be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c2:	2330      	movs	r3, #48	; 0x30
 80058c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058c8:	f04f 0b01 	mov.w	fp, #1
 80058cc:	4637      	mov	r7, r6
 80058ce:	463c      	mov	r4, r7
 80058d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d13c      	bne.n	8005952 <_svfiprintf_r+0xce>
 80058d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80058dc:	d00b      	beq.n	80058f6 <_svfiprintf_r+0x72>
 80058de:	4653      	mov	r3, sl
 80058e0:	4632      	mov	r2, r6
 80058e2:	4629      	mov	r1, r5
 80058e4:	4640      	mov	r0, r8
 80058e6:	f7ff ff71 	bl	80057cc <__ssputs_r>
 80058ea:	3001      	adds	r0, #1
 80058ec:	f000 80a3 	beq.w	8005a36 <_svfiprintf_r+0x1b2>
 80058f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f2:	4453      	add	r3, sl
 80058f4:	9309      	str	r3, [sp, #36]	; 0x24
 80058f6:	783b      	ldrb	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 809c 	beq.w	8005a36 <_svfiprintf_r+0x1b2>
 80058fe:	2300      	movs	r3, #0
 8005900:	f04f 32ff 	mov.w	r2, #4294967295
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	9205      	str	r2, [sp, #20]
 800590a:	9306      	str	r3, [sp, #24]
 800590c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005910:	931a      	str	r3, [sp, #104]	; 0x68
 8005912:	2205      	movs	r2, #5
 8005914:	7821      	ldrb	r1, [r4, #0]
 8005916:	4850      	ldr	r0, [pc, #320]	; (8005a58 <_svfiprintf_r+0x1d4>)
 8005918:	f7fa fd32 	bl	8000380 <memchr>
 800591c:	1c67      	adds	r7, r4, #1
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	b9d8      	cbnz	r0, 800595a <_svfiprintf_r+0xd6>
 8005922:	06d9      	lsls	r1, r3, #27
 8005924:	bf44      	itt	mi
 8005926:	2220      	movmi	r2, #32
 8005928:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800592c:	071a      	lsls	r2, r3, #28
 800592e:	bf44      	itt	mi
 8005930:	222b      	movmi	r2, #43	; 0x2b
 8005932:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005936:	7822      	ldrb	r2, [r4, #0]
 8005938:	2a2a      	cmp	r2, #42	; 0x2a
 800593a:	d016      	beq.n	800596a <_svfiprintf_r+0xe6>
 800593c:	9a07      	ldr	r2, [sp, #28]
 800593e:	2100      	movs	r1, #0
 8005940:	200a      	movs	r0, #10
 8005942:	4627      	mov	r7, r4
 8005944:	3401      	adds	r4, #1
 8005946:	783b      	ldrb	r3, [r7, #0]
 8005948:	3b30      	subs	r3, #48	; 0x30
 800594a:	2b09      	cmp	r3, #9
 800594c:	d951      	bls.n	80059f2 <_svfiprintf_r+0x16e>
 800594e:	b1c9      	cbz	r1, 8005984 <_svfiprintf_r+0x100>
 8005950:	e011      	b.n	8005976 <_svfiprintf_r+0xf2>
 8005952:	2b25      	cmp	r3, #37	; 0x25
 8005954:	d0c0      	beq.n	80058d8 <_svfiprintf_r+0x54>
 8005956:	4627      	mov	r7, r4
 8005958:	e7b9      	b.n	80058ce <_svfiprintf_r+0x4a>
 800595a:	4a3f      	ldr	r2, [pc, #252]	; (8005a58 <_svfiprintf_r+0x1d4>)
 800595c:	1a80      	subs	r0, r0, r2
 800595e:	fa0b f000 	lsl.w	r0, fp, r0
 8005962:	4318      	orrs	r0, r3
 8005964:	9004      	str	r0, [sp, #16]
 8005966:	463c      	mov	r4, r7
 8005968:	e7d3      	b.n	8005912 <_svfiprintf_r+0x8e>
 800596a:	9a03      	ldr	r2, [sp, #12]
 800596c:	1d11      	adds	r1, r2, #4
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	9103      	str	r1, [sp, #12]
 8005972:	2a00      	cmp	r2, #0
 8005974:	db01      	blt.n	800597a <_svfiprintf_r+0xf6>
 8005976:	9207      	str	r2, [sp, #28]
 8005978:	e004      	b.n	8005984 <_svfiprintf_r+0x100>
 800597a:	4252      	negs	r2, r2
 800597c:	f043 0302 	orr.w	r3, r3, #2
 8005980:	9207      	str	r2, [sp, #28]
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	783b      	ldrb	r3, [r7, #0]
 8005986:	2b2e      	cmp	r3, #46	; 0x2e
 8005988:	d10e      	bne.n	80059a8 <_svfiprintf_r+0x124>
 800598a:	787b      	ldrb	r3, [r7, #1]
 800598c:	2b2a      	cmp	r3, #42	; 0x2a
 800598e:	f107 0101 	add.w	r1, r7, #1
 8005992:	d132      	bne.n	80059fa <_svfiprintf_r+0x176>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	9203      	str	r2, [sp, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	bfb8      	it	lt
 80059a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059a4:	3702      	adds	r7, #2
 80059a6:	9305      	str	r3, [sp, #20]
 80059a8:	4c2c      	ldr	r4, [pc, #176]	; (8005a5c <_svfiprintf_r+0x1d8>)
 80059aa:	7839      	ldrb	r1, [r7, #0]
 80059ac:	2203      	movs	r2, #3
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7fa fce6 	bl	8000380 <memchr>
 80059b4:	b138      	cbz	r0, 80059c6 <_svfiprintf_r+0x142>
 80059b6:	2340      	movs	r3, #64	; 0x40
 80059b8:	1b00      	subs	r0, r0, r4
 80059ba:	fa03 f000 	lsl.w	r0, r3, r0
 80059be:	9b04      	ldr	r3, [sp, #16]
 80059c0:	4303      	orrs	r3, r0
 80059c2:	9304      	str	r3, [sp, #16]
 80059c4:	3701      	adds	r7, #1
 80059c6:	7839      	ldrb	r1, [r7, #0]
 80059c8:	4825      	ldr	r0, [pc, #148]	; (8005a60 <_svfiprintf_r+0x1dc>)
 80059ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059ce:	2206      	movs	r2, #6
 80059d0:	1c7e      	adds	r6, r7, #1
 80059d2:	f7fa fcd5 	bl	8000380 <memchr>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d035      	beq.n	8005a46 <_svfiprintf_r+0x1c2>
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <_svfiprintf_r+0x1e0>)
 80059dc:	b9fb      	cbnz	r3, 8005a1e <_svfiprintf_r+0x19a>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	3307      	adds	r3, #7
 80059e2:	f023 0307 	bic.w	r3, r3, #7
 80059e6:	3308      	adds	r3, #8
 80059e8:	9303      	str	r3, [sp, #12]
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	444b      	add	r3, r9
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	e76c      	b.n	80058cc <_svfiprintf_r+0x48>
 80059f2:	fb00 3202 	mla	r2, r0, r2, r3
 80059f6:	2101      	movs	r1, #1
 80059f8:	e7a3      	b.n	8005942 <_svfiprintf_r+0xbe>
 80059fa:	2300      	movs	r3, #0
 80059fc:	9305      	str	r3, [sp, #20]
 80059fe:	4618      	mov	r0, r3
 8005a00:	240a      	movs	r4, #10
 8005a02:	460f      	mov	r7, r1
 8005a04:	3101      	adds	r1, #1
 8005a06:	783a      	ldrb	r2, [r7, #0]
 8005a08:	3a30      	subs	r2, #48	; 0x30
 8005a0a:	2a09      	cmp	r2, #9
 8005a0c:	d903      	bls.n	8005a16 <_svfiprintf_r+0x192>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ca      	beq.n	80059a8 <_svfiprintf_r+0x124>
 8005a12:	9005      	str	r0, [sp, #20]
 8005a14:	e7c8      	b.n	80059a8 <_svfiprintf_r+0x124>
 8005a16:	fb04 2000 	mla	r0, r4, r0, r2
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7f1      	b.n	8005a02 <_svfiprintf_r+0x17e>
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	462a      	mov	r2, r5
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <_svfiprintf_r+0x1e4>)
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	4640      	mov	r0, r8
 8005a2a:	f3af 8000 	nop.w
 8005a2e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a32:	4681      	mov	r9, r0
 8005a34:	d1d9      	bne.n	80059ea <_svfiprintf_r+0x166>
 8005a36:	89ab      	ldrh	r3, [r5, #12]
 8005a38:	065b      	lsls	r3, r3, #25
 8005a3a:	f53f af38 	bmi.w	80058ae <_svfiprintf_r+0x2a>
 8005a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a40:	b01d      	add	sp, #116	; 0x74
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	ab03      	add	r3, sp, #12
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <_svfiprintf_r+0x1e4>)
 8005a4e:	a904      	add	r1, sp, #16
 8005a50:	4640      	mov	r0, r8
 8005a52:	f000 f881 	bl	8005b58 <_printf_i>
 8005a56:	e7ea      	b.n	8005a2e <_svfiprintf_r+0x1aa>
 8005a58:	0800603c 	.word	0x0800603c
 8005a5c:	08006042 	.word	0x08006042
 8005a60:	08006046 	.word	0x08006046
 8005a64:	00000000 	.word	0x00000000
 8005a68:	080057cd 	.word	0x080057cd

08005a6c <_printf_common>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	4691      	mov	r9, r2
 8005a72:	461f      	mov	r7, r3
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bfb8      	it	lt
 8005a80:	4613      	movlt	r3, r2
 8005a82:	f8c9 3000 	str.w	r3, [r9]
 8005a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	b112      	cbz	r2, 8005a96 <_printf_common+0x2a>
 8005a90:	3301      	adds	r3, #1
 8005a92:	f8c9 3000 	str.w	r3, [r9]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	0699      	lsls	r1, r3, #26
 8005a9a:	bf42      	ittt	mi
 8005a9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005aa0:	3302      	addmi	r3, #2
 8005aa2:	f8c9 3000 	strmi.w	r3, [r9]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	f015 0506 	ands.w	r5, r5, #6
 8005aac:	d107      	bne.n	8005abe <_printf_common+0x52>
 8005aae:	f104 0a19 	add.w	sl, r4, #25
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	429d      	cmp	r5, r3
 8005abc:	db29      	blt.n	8005b12 <_printf_common+0xa6>
 8005abe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	3300      	adds	r3, #0
 8005ac6:	bf18      	it	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	0692      	lsls	r2, r2, #26
 8005acc:	d42e      	bmi.n	8005b2c <_printf_common+0xc0>
 8005ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	47c0      	blx	r8
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d021      	beq.n	8005b20 <_printf_common+0xb4>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	68e5      	ldr	r5, [r4, #12]
 8005ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ae4:	f003 0306 	and.w	r3, r3, #6
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	bf08      	it	eq
 8005aec:	1aad      	subeq	r5, r5, r2
 8005aee:	68a3      	ldr	r3, [r4, #8]
 8005af0:	6922      	ldr	r2, [r4, #16]
 8005af2:	bf0c      	ite	eq
 8005af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af8:	2500      	movne	r5, #0
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bfc4      	itt	gt
 8005afe:	1a9b      	subgt	r3, r3, r2
 8005b00:	18ed      	addgt	r5, r5, r3
 8005b02:	f04f 0900 	mov.w	r9, #0
 8005b06:	341a      	adds	r4, #26
 8005b08:	454d      	cmp	r5, r9
 8005b0a:	d11b      	bne.n	8005b44 <_printf_common+0xd8>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b12:	2301      	movs	r3, #1
 8005b14:	4652      	mov	r2, sl
 8005b16:	4639      	mov	r1, r7
 8005b18:	4630      	mov	r0, r6
 8005b1a:	47c0      	blx	r8
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d103      	bne.n	8005b28 <_printf_common+0xbc>
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b28:	3501      	adds	r5, #1
 8005b2a:	e7c2      	b.n	8005ab2 <_printf_common+0x46>
 8005b2c:	18e1      	adds	r1, r4, r3
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	2030      	movs	r0, #48	; 0x30
 8005b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b36:	4422      	add	r2, r4
 8005b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b40:	3302      	adds	r3, #2
 8005b42:	e7c4      	b.n	8005ace <_printf_common+0x62>
 8005b44:	2301      	movs	r3, #1
 8005b46:	4622      	mov	r2, r4
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	47c0      	blx	r8
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d0e6      	beq.n	8005b20 <_printf_common+0xb4>
 8005b52:	f109 0901 	add.w	r9, r9, #1
 8005b56:	e7d7      	b.n	8005b08 <_printf_common+0x9c>

08005b58 <_printf_i>:
 8005b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	4617      	mov	r7, r2
 8005b5e:	7e0a      	ldrb	r2, [r1, #24]
 8005b60:	b085      	sub	sp, #20
 8005b62:	2a6e      	cmp	r2, #110	; 0x6e
 8005b64:	4698      	mov	r8, r3
 8005b66:	4606      	mov	r6, r0
 8005b68:	460c      	mov	r4, r1
 8005b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b6c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005b70:	f000 80bc 	beq.w	8005cec <_printf_i+0x194>
 8005b74:	d81a      	bhi.n	8005bac <_printf_i+0x54>
 8005b76:	2a63      	cmp	r2, #99	; 0x63
 8005b78:	d02e      	beq.n	8005bd8 <_printf_i+0x80>
 8005b7a:	d80a      	bhi.n	8005b92 <_printf_i+0x3a>
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	f000 80c8 	beq.w	8005d12 <_printf_i+0x1ba>
 8005b82:	2a58      	cmp	r2, #88	; 0x58
 8005b84:	f000 808a 	beq.w	8005c9c <_printf_i+0x144>
 8005b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005b90:	e02a      	b.n	8005be8 <_printf_i+0x90>
 8005b92:	2a64      	cmp	r2, #100	; 0x64
 8005b94:	d001      	beq.n	8005b9a <_printf_i+0x42>
 8005b96:	2a69      	cmp	r2, #105	; 0x69
 8005b98:	d1f6      	bne.n	8005b88 <_printf_i+0x30>
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005ba2:	d023      	beq.n	8005bec <_printf_i+0x94>
 8005ba4:	1d11      	adds	r1, r2, #4
 8005ba6:	6019      	str	r1, [r3, #0]
 8005ba8:	6813      	ldr	r3, [r2, #0]
 8005baa:	e027      	b.n	8005bfc <_printf_i+0xa4>
 8005bac:	2a73      	cmp	r2, #115	; 0x73
 8005bae:	f000 80b4 	beq.w	8005d1a <_printf_i+0x1c2>
 8005bb2:	d808      	bhi.n	8005bc6 <_printf_i+0x6e>
 8005bb4:	2a6f      	cmp	r2, #111	; 0x6f
 8005bb6:	d02a      	beq.n	8005c0e <_printf_i+0xb6>
 8005bb8:	2a70      	cmp	r2, #112	; 0x70
 8005bba:	d1e5      	bne.n	8005b88 <_printf_i+0x30>
 8005bbc:	680a      	ldr	r2, [r1, #0]
 8005bbe:	f042 0220 	orr.w	r2, r2, #32
 8005bc2:	600a      	str	r2, [r1, #0]
 8005bc4:	e003      	b.n	8005bce <_printf_i+0x76>
 8005bc6:	2a75      	cmp	r2, #117	; 0x75
 8005bc8:	d021      	beq.n	8005c0e <_printf_i+0xb6>
 8005bca:	2a78      	cmp	r2, #120	; 0x78
 8005bcc:	d1dc      	bne.n	8005b88 <_printf_i+0x30>
 8005bce:	2278      	movs	r2, #120	; 0x78
 8005bd0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005bd4:	496e      	ldr	r1, [pc, #440]	; (8005d90 <_printf_i+0x238>)
 8005bd6:	e064      	b.n	8005ca2 <_printf_i+0x14a>
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005bde:	1d11      	adds	r1, r2, #4
 8005be0:	6019      	str	r1, [r3, #0]
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0a3      	b.n	8005d34 <_printf_i+0x1dc>
 8005bec:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005bf0:	f102 0104 	add.w	r1, r2, #4
 8005bf4:	6019      	str	r1, [r3, #0]
 8005bf6:	d0d7      	beq.n	8005ba8 <_printf_i+0x50>
 8005bf8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	da03      	bge.n	8005c08 <_printf_i+0xb0>
 8005c00:	222d      	movs	r2, #45	; 0x2d
 8005c02:	425b      	negs	r3, r3
 8005c04:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c08:	4962      	ldr	r1, [pc, #392]	; (8005d94 <_printf_i+0x23c>)
 8005c0a:	220a      	movs	r2, #10
 8005c0c:	e017      	b.n	8005c3e <_printf_i+0xe6>
 8005c0e:	6820      	ldr	r0, [r4, #0]
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005c16:	d003      	beq.n	8005c20 <_printf_i+0xc8>
 8005c18:	1d08      	adds	r0, r1, #4
 8005c1a:	6018      	str	r0, [r3, #0]
 8005c1c:	680b      	ldr	r3, [r1, #0]
 8005c1e:	e006      	b.n	8005c2e <_printf_i+0xd6>
 8005c20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c24:	f101 0004 	add.w	r0, r1, #4
 8005c28:	6018      	str	r0, [r3, #0]
 8005c2a:	d0f7      	beq.n	8005c1c <_printf_i+0xc4>
 8005c2c:	880b      	ldrh	r3, [r1, #0]
 8005c2e:	4959      	ldr	r1, [pc, #356]	; (8005d94 <_printf_i+0x23c>)
 8005c30:	2a6f      	cmp	r2, #111	; 0x6f
 8005c32:	bf14      	ite	ne
 8005c34:	220a      	movne	r2, #10
 8005c36:	2208      	moveq	r2, #8
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005c3e:	6865      	ldr	r5, [r4, #4]
 8005c40:	60a5      	str	r5, [r4, #8]
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	f2c0 809c 	blt.w	8005d80 <_printf_i+0x228>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	f020 0004 	bic.w	r0, r0, #4
 8005c4e:	6020      	str	r0, [r4, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d13f      	bne.n	8005cd4 <_printf_i+0x17c>
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	f040 8095 	bne.w	8005d84 <_printf_i+0x22c>
 8005c5a:	4675      	mov	r5, lr
 8005c5c:	2a08      	cmp	r2, #8
 8005c5e:	d10b      	bne.n	8005c78 <_printf_i+0x120>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	07da      	lsls	r2, r3, #31
 8005c64:	d508      	bpl.n	8005c78 <_printf_i+0x120>
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	6862      	ldr	r2, [r4, #4]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	bfde      	ittt	le
 8005c6e:	2330      	movle	r3, #48	; 0x30
 8005c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c78:	ebae 0305 	sub.w	r3, lr, r5
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	f8cd 8000 	str.w	r8, [sp]
 8005c82:	463b      	mov	r3, r7
 8005c84:	aa03      	add	r2, sp, #12
 8005c86:	4621      	mov	r1, r4
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff feef 	bl	8005a6c <_printf_common>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d155      	bne.n	8005d3e <_printf_i+0x1e6>
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	b005      	add	sp, #20
 8005c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c9c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005ca0:	493c      	ldr	r1, [pc, #240]	; (8005d94 <_printf_i+0x23c>)
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005caa:	f100 0504 	add.w	r5, r0, #4
 8005cae:	601d      	str	r5, [r3, #0]
 8005cb0:	d001      	beq.n	8005cb6 <_printf_i+0x15e>
 8005cb2:	6803      	ldr	r3, [r0, #0]
 8005cb4:	e002      	b.n	8005cbc <_printf_i+0x164>
 8005cb6:	0655      	lsls	r5, r2, #25
 8005cb8:	d5fb      	bpl.n	8005cb2 <_printf_i+0x15a>
 8005cba:	8803      	ldrh	r3, [r0, #0]
 8005cbc:	07d0      	lsls	r0, r2, #31
 8005cbe:	bf44      	itt	mi
 8005cc0:	f042 0220 	orrmi.w	r2, r2, #32
 8005cc4:	6022      	strmi	r2, [r4, #0]
 8005cc6:	b91b      	cbnz	r3, 8005cd0 <_printf_i+0x178>
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	f022 0220 	bic.w	r2, r2, #32
 8005cce:	6022      	str	r2, [r4, #0]
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	e7b1      	b.n	8005c38 <_printf_i+0xe0>
 8005cd4:	4675      	mov	r5, lr
 8005cd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cda:	fb02 3310 	mls	r3, r2, r0, r3
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d1f5      	bne.n	8005cd6 <_printf_i+0x17e>
 8005cea:	e7b7      	b.n	8005c5c <_printf_i+0x104>
 8005cec:	6808      	ldr	r0, [r1, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	6949      	ldr	r1, [r1, #20]
 8005cf2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005cf6:	d004      	beq.n	8005d02 <_printf_i+0x1aa>
 8005cf8:	1d10      	adds	r0, r2, #4
 8005cfa:	6018      	str	r0, [r3, #0]
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	6019      	str	r1, [r3, #0]
 8005d00:	e007      	b.n	8005d12 <_printf_i+0x1ba>
 8005d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d06:	f102 0004 	add.w	r0, r2, #4
 8005d0a:	6018      	str	r0, [r3, #0]
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	d0f6      	beq.n	8005cfe <_printf_i+0x1a6>
 8005d10:	8019      	strh	r1, [r3, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	4675      	mov	r5, lr
 8005d18:	e7b1      	b.n	8005c7e <_printf_i+0x126>
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	1d11      	adds	r1, r2, #4
 8005d1e:	6019      	str	r1, [r3, #0]
 8005d20:	6815      	ldr	r5, [r2, #0]
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	2100      	movs	r1, #0
 8005d26:	4628      	mov	r0, r5
 8005d28:	f7fa fb2a 	bl	8000380 <memchr>
 8005d2c:	b108      	cbz	r0, 8005d32 <_printf_i+0x1da>
 8005d2e:	1b40      	subs	r0, r0, r5
 8005d30:	6060      	str	r0, [r4, #4]
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	2300      	movs	r3, #0
 8005d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d3c:	e79f      	b.n	8005c7e <_printf_i+0x126>
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	462a      	mov	r2, r5
 8005d42:	4639      	mov	r1, r7
 8005d44:	4630      	mov	r0, r6
 8005d46:	47c0      	blx	r8
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d0a2      	beq.n	8005c92 <_printf_i+0x13a>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	079b      	lsls	r3, r3, #30
 8005d50:	d507      	bpl.n	8005d62 <_printf_i+0x20a>
 8005d52:	2500      	movs	r5, #0
 8005d54:	f104 0919 	add.w	r9, r4, #25
 8005d58:	68e3      	ldr	r3, [r4, #12]
 8005d5a:	9a03      	ldr	r2, [sp, #12]
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	429d      	cmp	r5, r3
 8005d60:	db05      	blt.n	8005d6e <_printf_i+0x216>
 8005d62:	68e0      	ldr	r0, [r4, #12]
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	4298      	cmp	r0, r3
 8005d68:	bfb8      	it	lt
 8005d6a:	4618      	movlt	r0, r3
 8005d6c:	e793      	b.n	8005c96 <_printf_i+0x13e>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	464a      	mov	r2, r9
 8005d72:	4639      	mov	r1, r7
 8005d74:	4630      	mov	r0, r6
 8005d76:	47c0      	blx	r8
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d08a      	beq.n	8005c92 <_printf_i+0x13a>
 8005d7c:	3501      	adds	r5, #1
 8005d7e:	e7eb      	b.n	8005d58 <_printf_i+0x200>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1a7      	bne.n	8005cd4 <_printf_i+0x17c>
 8005d84:	780b      	ldrb	r3, [r1, #0]
 8005d86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d8e:	e765      	b.n	8005c5c <_printf_i+0x104>
 8005d90:	0800605e 	.word	0x0800605e
 8005d94:	0800604d 	.word	0x0800604d

08005d98 <memcpy>:
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	1e43      	subs	r3, r0, #1
 8005d9c:	440a      	add	r2, r1
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	d100      	bne.n	8005da4 <memcpy+0xc>
 8005da2:	bd10      	pop	{r4, pc}
 8005da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dac:	e7f7      	b.n	8005d9e <memcpy+0x6>

08005dae <memmove>:
 8005dae:	4288      	cmp	r0, r1
 8005db0:	b510      	push	{r4, lr}
 8005db2:	eb01 0302 	add.w	r3, r1, r2
 8005db6:	d803      	bhi.n	8005dc0 <memmove+0x12>
 8005db8:	1e42      	subs	r2, r0, #1
 8005dba:	4299      	cmp	r1, r3
 8005dbc:	d10c      	bne.n	8005dd8 <memmove+0x2a>
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	4298      	cmp	r0, r3
 8005dc2:	d2f9      	bcs.n	8005db8 <memmove+0xa>
 8005dc4:	1881      	adds	r1, r0, r2
 8005dc6:	1ad2      	subs	r2, r2, r3
 8005dc8:	42d3      	cmn	r3, r2
 8005dca:	d100      	bne.n	8005dce <memmove+0x20>
 8005dcc:	bd10      	pop	{r4, pc}
 8005dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dd2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005dd6:	e7f7      	b.n	8005dc8 <memmove+0x1a>
 8005dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ddc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005de0:	e7eb      	b.n	8005dba <memmove+0xc>
	...

08005de4 <_free_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4605      	mov	r5, r0
 8005de8:	2900      	cmp	r1, #0
 8005dea:	d045      	beq.n	8005e78 <_free_r+0x94>
 8005dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df0:	1f0c      	subs	r4, r1, #4
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bfb8      	it	lt
 8005df6:	18e4      	addlt	r4, r4, r3
 8005df8:	f000 f8d6 	bl	8005fa8 <__malloc_lock>
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <_free_r+0x98>)
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	4610      	mov	r0, r2
 8005e02:	b933      	cbnz	r3, 8005e12 <_free_r+0x2e>
 8005e04:	6063      	str	r3, [r4, #4]
 8005e06:	6014      	str	r4, [r2, #0]
 8005e08:	4628      	mov	r0, r5
 8005e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e0e:	f000 b8cc 	b.w	8005faa <__malloc_unlock>
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	d90c      	bls.n	8005e30 <_free_r+0x4c>
 8005e16:	6821      	ldr	r1, [r4, #0]
 8005e18:	1862      	adds	r2, r4, r1
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	bf04      	itt	eq
 8005e1e:	681a      	ldreq	r2, [r3, #0]
 8005e20:	685b      	ldreq	r3, [r3, #4]
 8005e22:	6063      	str	r3, [r4, #4]
 8005e24:	bf04      	itt	eq
 8005e26:	1852      	addeq	r2, r2, r1
 8005e28:	6022      	streq	r2, [r4, #0]
 8005e2a:	6004      	str	r4, [r0, #0]
 8005e2c:	e7ec      	b.n	8005e08 <_free_r+0x24>
 8005e2e:	4613      	mov	r3, r2
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	b10a      	cbz	r2, 8005e38 <_free_r+0x54>
 8005e34:	42a2      	cmp	r2, r4
 8005e36:	d9fa      	bls.n	8005e2e <_free_r+0x4a>
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	1858      	adds	r0, r3, r1
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d10b      	bne.n	8005e58 <_free_r+0x74>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	4401      	add	r1, r0
 8005e44:	1858      	adds	r0, r3, r1
 8005e46:	4282      	cmp	r2, r0
 8005e48:	6019      	str	r1, [r3, #0]
 8005e4a:	d1dd      	bne.n	8005e08 <_free_r+0x24>
 8005e4c:	6810      	ldr	r0, [r2, #0]
 8005e4e:	6852      	ldr	r2, [r2, #4]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	4401      	add	r1, r0
 8005e54:	6019      	str	r1, [r3, #0]
 8005e56:	e7d7      	b.n	8005e08 <_free_r+0x24>
 8005e58:	d902      	bls.n	8005e60 <_free_r+0x7c>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	e7d3      	b.n	8005e08 <_free_r+0x24>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	1821      	adds	r1, r4, r0
 8005e64:	428a      	cmp	r2, r1
 8005e66:	bf04      	itt	eq
 8005e68:	6811      	ldreq	r1, [r2, #0]
 8005e6a:	6852      	ldreq	r2, [r2, #4]
 8005e6c:	6062      	str	r2, [r4, #4]
 8005e6e:	bf04      	itt	eq
 8005e70:	1809      	addeq	r1, r1, r0
 8005e72:	6021      	streq	r1, [r4, #0]
 8005e74:	605c      	str	r4, [r3, #4]
 8005e76:	e7c7      	b.n	8005e08 <_free_r+0x24>
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
 8005e7a:	bf00      	nop
 8005e7c:	200000c8 	.word	0x200000c8

08005e80 <_malloc_r>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	1ccd      	adds	r5, r1, #3
 8005e84:	f025 0503 	bic.w	r5, r5, #3
 8005e88:	3508      	adds	r5, #8
 8005e8a:	2d0c      	cmp	r5, #12
 8005e8c:	bf38      	it	cc
 8005e8e:	250c      	movcc	r5, #12
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	4606      	mov	r6, r0
 8005e94:	db01      	blt.n	8005e9a <_malloc_r+0x1a>
 8005e96:	42a9      	cmp	r1, r5
 8005e98:	d903      	bls.n	8005ea2 <_malloc_r+0x22>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	f000 f881 	bl	8005fa8 <__malloc_lock>
 8005ea6:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <_malloc_r+0xb4>)
 8005ea8:	6814      	ldr	r4, [r2, #0]
 8005eaa:	4621      	mov	r1, r4
 8005eac:	b991      	cbnz	r1, 8005ed4 <_malloc_r+0x54>
 8005eae:	4c22      	ldr	r4, [pc, #136]	; (8005f38 <_malloc_r+0xb8>)
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	b91b      	cbnz	r3, 8005ebc <_malloc_r+0x3c>
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f867 	bl	8005f88 <_sbrk_r>
 8005eba:	6020      	str	r0, [r4, #0]
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f000 f862 	bl	8005f88 <_sbrk_r>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d126      	bne.n	8005f16 <_malloc_r+0x96>
 8005ec8:	230c      	movs	r3, #12
 8005eca:	6033      	str	r3, [r6, #0]
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f86c 	bl	8005faa <__malloc_unlock>
 8005ed2:	e7e4      	b.n	8005e9e <_malloc_r+0x1e>
 8005ed4:	680b      	ldr	r3, [r1, #0]
 8005ed6:	1b5b      	subs	r3, r3, r5
 8005ed8:	d41a      	bmi.n	8005f10 <_malloc_r+0x90>
 8005eda:	2b0b      	cmp	r3, #11
 8005edc:	d90f      	bls.n	8005efe <_malloc_r+0x7e>
 8005ede:	600b      	str	r3, [r1, #0]
 8005ee0:	50cd      	str	r5, [r1, r3]
 8005ee2:	18cc      	adds	r4, r1, r3
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f860 	bl	8005faa <__malloc_unlock>
 8005eea:	f104 000b 	add.w	r0, r4, #11
 8005eee:	1d23      	adds	r3, r4, #4
 8005ef0:	f020 0007 	bic.w	r0, r0, #7
 8005ef4:	1ac3      	subs	r3, r0, r3
 8005ef6:	d01b      	beq.n	8005f30 <_malloc_r+0xb0>
 8005ef8:	425a      	negs	r2, r3
 8005efa:	50e2      	str	r2, [r4, r3]
 8005efc:	bd70      	pop	{r4, r5, r6, pc}
 8005efe:	428c      	cmp	r4, r1
 8005f00:	bf0d      	iteet	eq
 8005f02:	6863      	ldreq	r3, [r4, #4]
 8005f04:	684b      	ldrne	r3, [r1, #4]
 8005f06:	6063      	strne	r3, [r4, #4]
 8005f08:	6013      	streq	r3, [r2, #0]
 8005f0a:	bf18      	it	ne
 8005f0c:	460c      	movne	r4, r1
 8005f0e:	e7e9      	b.n	8005ee4 <_malloc_r+0x64>
 8005f10:	460c      	mov	r4, r1
 8005f12:	6849      	ldr	r1, [r1, #4]
 8005f14:	e7ca      	b.n	8005eac <_malloc_r+0x2c>
 8005f16:	1cc4      	adds	r4, r0, #3
 8005f18:	f024 0403 	bic.w	r4, r4, #3
 8005f1c:	42a0      	cmp	r0, r4
 8005f1e:	d005      	beq.n	8005f2c <_malloc_r+0xac>
 8005f20:	1a21      	subs	r1, r4, r0
 8005f22:	4630      	mov	r0, r6
 8005f24:	f000 f830 	bl	8005f88 <_sbrk_r>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d0cd      	beq.n	8005ec8 <_malloc_r+0x48>
 8005f2c:	6025      	str	r5, [r4, #0]
 8005f2e:	e7d9      	b.n	8005ee4 <_malloc_r+0x64>
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	bf00      	nop
 8005f34:	200000c8 	.word	0x200000c8
 8005f38:	200000cc 	.word	0x200000cc

08005f3c <_realloc_r>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	4607      	mov	r7, r0
 8005f40:	4614      	mov	r4, r2
 8005f42:	460e      	mov	r6, r1
 8005f44:	b921      	cbnz	r1, 8005f50 <_realloc_r+0x14>
 8005f46:	4611      	mov	r1, r2
 8005f48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f4c:	f7ff bf98 	b.w	8005e80 <_malloc_r>
 8005f50:	b922      	cbnz	r2, 8005f5c <_realloc_r+0x20>
 8005f52:	f7ff ff47 	bl	8005de4 <_free_r>
 8005f56:	4625      	mov	r5, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5c:	f000 f826 	bl	8005fac <_malloc_usable_size_r>
 8005f60:	4284      	cmp	r4, r0
 8005f62:	d90f      	bls.n	8005f84 <_realloc_r+0x48>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4638      	mov	r0, r7
 8005f68:	f7ff ff8a 	bl	8005e80 <_malloc_r>
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d0f2      	beq.n	8005f58 <_realloc_r+0x1c>
 8005f72:	4631      	mov	r1, r6
 8005f74:	4622      	mov	r2, r4
 8005f76:	f7ff ff0f 	bl	8005d98 <memcpy>
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	f7ff ff31 	bl	8005de4 <_free_r>
 8005f82:	e7e9      	b.n	8005f58 <_realloc_r+0x1c>
 8005f84:	4635      	mov	r5, r6
 8005f86:	e7e7      	b.n	8005f58 <_realloc_r+0x1c>

08005f88 <_sbrk_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4c06      	ldr	r4, [pc, #24]	; (8005fa4 <_sbrk_r+0x1c>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4605      	mov	r5, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	f000 f814 	bl	8005fc0 <_sbrk>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_sbrk_r+0x1a>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_sbrk_r+0x1a>
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	200002e4 	.word	0x200002e4

08005fa8 <__malloc_lock>:
 8005fa8:	4770      	bx	lr

08005faa <__malloc_unlock>:
 8005faa:	4770      	bx	lr

08005fac <_malloc_usable_size_r>:
 8005fac:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	f1a0 0004 	sub.w	r0, r0, #4
 8005fb6:	bfbc      	itt	lt
 8005fb8:	580b      	ldrlt	r3, [r1, r0]
 8005fba:	18c0      	addlt	r0, r0, r3
 8005fbc:	4770      	bx	lr
	...

08005fc0 <_sbrk>:
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <_sbrk+0x14>)
 8005fc2:	6819      	ldr	r1, [r3, #0]
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	b909      	cbnz	r1, 8005fcc <_sbrk+0xc>
 8005fc8:	4903      	ldr	r1, [pc, #12]	; (8005fd8 <_sbrk+0x18>)
 8005fca:	6019      	str	r1, [r3, #0]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	4402      	add	r2, r0
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	4770      	bx	lr
 8005fd4:	200000d0 	.word	0x200000d0
 8005fd8:	200002e8 	.word	0x200002e8

08005fdc <_init>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr

08005fe8 <_fini>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr
