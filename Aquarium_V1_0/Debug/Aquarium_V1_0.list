<<<<<<< HEAD

Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080042a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000208  20000010  080042b0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000218  080042b0  00020218  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165e1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002560  00000000  00000000  00036621  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ff0  00000000  00000000  00038b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef8  00000000  00000000  00039b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007659  00000000  00000000  0003aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f58  00000000  00000000  000420c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047021  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004420  00000000  00000000  000470a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004260 	.word	0x08004260

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08004260 	.word	0x08004260

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f925 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 fba8 	bl	8003c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f93d 	bl	80007f6 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f905 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000030 	.word	0x20000030

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000030 	.word	0x20000030

080005f8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <NVIC_EnableIRQ+0x30>)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	095b      	lsrs	r3, r3, #5
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	f002 021f 	and.w	r2, r2, #31
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da0b      	bge.n	80006bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	490d      	ldr	r1, [pc, #52]	; (80006dc <NVIC_SetPriority+0x4c>)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	3b04      	subs	r3, #4
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ba:	e009      	b.n	80006d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	4908      	ldr	r1, [pc, #32]	; (80006e0 <NVIC_SetPriority+0x50>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	2201      	movs	r2, #1
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	401a      	ands	r2, r3
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072a:	2101      	movs	r1, #1
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	1e59      	subs	r1, r3, #1
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff90 	bl	8000690 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff2f 	bl	80005f8 <NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff44 	bl	8000640 <NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff37 	bl	800065c <NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e165      	b.n	8000af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8154 	bne.w	8000af2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0x4a>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b12      	cmp	r3, #18
 8000858:	d123      	bne.n	80008a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	220f      	movs	r2, #15
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	08da      	lsrs	r2, r3, #3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0203 	and.w	r2, r3, #3
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d00b      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d007      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ea:	2b11      	cmp	r3, #17
 80008ec:	d003      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d130      	bne.n	8000958 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4313      	orrs	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	f003 0201 	and.w	r2, r3, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80ae 	beq.w	8000af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4a5c      	ldr	r2, [pc, #368]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099c:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b2:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <HAL_GPIO_Init+0x300>)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <HAL_GPIO_Init+0x304>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x21a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4d      	ldr	r2, [pc, #308]	; (8000b18 <HAL_GPIO_Init+0x308>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x216>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_GPIO_Init+0x30c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x212>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4b      	ldr	r2, [pc, #300]	; (8000b20 <HAL_GPIO_Init+0x310>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x20e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4a      	ldr	r2, [pc, #296]	; (8000b24 <HAL_GPIO_Init+0x314>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x20a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <HAL_GPIO_Init+0x318>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a48      	ldr	r2, [pc, #288]	; (8000b2c <HAL_GPIO_Init+0x31c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x202>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a98:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	f67f ae96 	bls.w	800082c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b00:	bf00      	nop
 8000b02:	3724      	adds	r7, #36	; 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b50:	e003      	b.n	8000b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	041a      	lsls	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	619a      	str	r2, [r3, #24]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f806 	bl	8000b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40013c00 	.word	0x40013c00

08000b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0c8      	b.n	8000d5c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d106      	bne.n	8000be4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f003 f884 	bl	8003cec <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2224      	movs	r2, #36	; 0x24
 8000be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	f022 0201 	bic.w	r2, r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bfc:	f000 f9a6 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 8000c00:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <HAL_I2C_Init+0x1b4>)
 8000c06:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0a:	0c9b      	lsrs	r3, r3, #18
 8000c0c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4952      	ldr	r1, [pc, #328]	; (8000d68 <HAL_I2C_Init+0x1b8>)
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d802      	bhi.n	8000c2a <HAL_I2C_Init+0x7a>
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	e009      	b.n	8000c3e <HAL_I2C_Init+0x8e>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c30:	fb01 f303 	mul.w	r3, r1, r3
 8000c34:	494d      	ldr	r1, [pc, #308]	; (8000d6c <HAL_I2C_Init+0x1bc>)
 8000c36:	fba1 1303 	umull	r1, r3, r1, r3
 8000c3a:	099b      	lsrs	r3, r3, #6
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a47      	ldr	r2, [pc, #284]	; (8000d68 <HAL_I2C_Init+0x1b8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d812      	bhi.n	8000c74 <HAL_I2C_Init+0xc4>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d906      	bls.n	8000c70 <HAL_I2C_Init+0xc0>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	e045      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e043      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10f      	bne.n	8000c9c <HAL_I2C_Init+0xec>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	e010      	b.n	8000cbe <HAL_I2C_Init+0x10e>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009a      	lsls	r2, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_I2C_Init+0x116>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e01a      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10a      	bne.n	8000ce4 <HAL_I2C_Init+0x134>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce2:	e00b      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	009a      	lsls	r2, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	69d1      	ldr	r1, [r2, #28]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6a12      	ldr	r2, [r2, #32]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6911      	ldr	r1, [r2, #16]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68d2      	ldr	r2, [r2, #12]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6951      	ldr	r1, [r2, #20]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6992      	ldr	r2, [r2, #24]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	f042 0201 	orr.w	r2, r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2220      	movs	r2, #32
 8000d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	431bde83 	.word	0x431bde83
 8000d68:	000186a0 	.word	0x000186a0
 8000d6c:	10624dd3 	.word	0x10624dd3

08000d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0ca      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d84:	4b67      	ldr	r3, [pc, #412]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 020f 	and.w	r2, r3, #15
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d20c      	bcs.n	8000dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d9a:	4b62      	ldr	r3, [pc, #392]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 020f 	and.w	r2, r3, #15
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e0b6      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d020      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000dc4:	4a58      	ldr	r2, [pc, #352]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dde:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000de8:	494f      	ldr	r1, [pc, #316]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d044      	beq.n	8000e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d107      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d119      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e07d      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d003      	beq.n	8000e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d107      	bne.n	8000e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e06d      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e065      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e4e:	4936      	ldr	r1, [pc, #216]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f023 0203 	bic.w	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e60:	f7ff fbbe 	bl	80005e0 <HAL_GetTick>
 8000e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e66:	e00a      	b.n	8000e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e68:	f7ff fbba 	bl	80005e0 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e04d      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 020c 	and.w	r2, r3, #12
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d1eb      	bne.n	8000e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 020f 	and.w	r2, r3, #15
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d90c      	bls.n	8000eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 020f 	and.w	r2, r3, #15
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d001      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e030      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ec4:	4918      	ldr	r1, [pc, #96]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d009      	beq.n	8000ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ee2:	4911      	ldr	r1, [pc, #68]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ef6:	f000 fb7b 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 8000efa:	4601      	mov	r1, r0
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_RCC_ClockConfig+0x1bc>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_RCC_ClockConfig+0x1c0>)
 8000f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fb20 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	08004278 	.word	0x08004278
 8000f30:	2000000c 	.word	0x2000000c

08000f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f50:	f7ff fff0 	bl	8000f34 <HAL_RCC_GetHCLKFreq>
 8000f54:	4601      	mov	r1, r0
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	0a9b      	lsrs	r3, r3, #10
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	08004288 	.word	0x08004288

08000f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f78:	f7ff ffdc 	bl	8000f34 <HAL_RCC_GetHCLKFreq>
 8000f7c:	4601      	mov	r1, r0
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	0b5b      	lsrs	r3, r3, #13
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	08004288 	.word	0x08004288

08000f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d010      	beq.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000fd4:	496f      	ldr	r1, [pc, #444]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fdc:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d010      	beq.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001002:	4964      	ldr	r1, [pc, #400]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100a:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001012:	4313      	orrs	r3, r2
 8001014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001020:	2301      	movs	r3, #1
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d017      	beq.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001030:	4958      	ldr	r1, [pc, #352]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001032:	4b58      	ldr	r3, [pc, #352]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4313      	orrs	r3, r2
 8001042:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800104e:	d101      	bne.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d017      	beq.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800106c:	4949      	ldr	r1, [pc, #292]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800106e:	4b49      	ldr	r3, [pc, #292]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107c:	4313      	orrs	r3, r2
 800107e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800108a:	d101      	bne.n	8001090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 808a 	beq.w	80011be <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4a39      	ldr	r2, [pc, #228]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010b0:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80010c6:	4a34      	ldr	r2, [pc, #208]	; (8001198 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010d2:	f7ff fa85 	bl	80005e0 <HAL_GetTick>
 80010d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010da:	f7ff fa81 	bl	80005e0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e278      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001100:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d02f      	beq.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	429a      	cmp	r2, r3
 8001114:	d028      	beq.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800111e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d014      	beq.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fa4f 	bl	80005e0 <HAL_GetTick>
 8001142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fa4b 	bl	80005e0 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e240      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ee      	beq.n	8001146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001174:	d114      	bne.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001176:	4907      	ldr	r1, [pc, #28]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
 8001190:	e00c      	b.n	80011ac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000
 800119c:	42470e40 	.word	0x42470e40
 80011a0:	4a4a      	ldr	r2, [pc, #296]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011a2:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80011aa:	6093      	str	r3, [r2, #8]
 80011ac:	4947      	ldr	r1, [pc, #284]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ba:	4313      	orrs	r3, r2
 80011bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80011ca:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80011d2:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00a      	beq.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80011e0:	493a      	ldr	r1, [pc, #232]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011e2:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4313      	orrs	r3, r2
 80011f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001202:	4932      	ldr	r1, [pc, #200]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	4313      	orrs	r3, r2
 8001214:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d011      	beq.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001224:	4929      	ldr	r1, [pc, #164]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	4313      	orrs	r3, r2
 8001236:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001242:	d101      	bne.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001244:	2301      	movs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00a      	beq.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001254:	491d      	ldr	r1, [pc, #116]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	4313      	orrs	r3, r2
 8001266:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	2b00      	cmp	r3, #0
 8001274:	d011      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001276:	4915      	ldr	r1, [pc, #84]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001286:	4313      	orrs	r3, r2
 8001288:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001294:	d101      	bne.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001296:	2301      	movs	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	2b01      	cmp	r3, #1
 800129e:	d005      	beq.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012a8:	f040 80ff 	bne.w	80014aa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80012b2:	f7ff f995 	bl	80005e0 <HAL_GetTick>
 80012b6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012b8:	e00e      	b.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80012ba:	f7ff f991 	bl	80005e0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d907      	bls.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e188      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80012cc:	40023800 	.word	0x40023800
 80012d0:	424711e0 	.word	0x424711e0
 80012d4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012d8:	4b7e      	ldr	r3, [pc, #504]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ea      	bne.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001300:	2b00      	cmp	r3, #0
 8001302:	d028      	beq.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d124      	bne.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800130c:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800130e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	3301      	adds	r3, #1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001324:	0e1b      	lsrs	r3, r3, #24
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800132c:	4969      	ldr	r1, [pc, #420]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	019b      	lsls	r3, r3, #6
 8001338:	431a      	orrs	r2, r3
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	3b01      	subs	r3, #1
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	061b      	lsls	r3, r3, #24
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	071b      	lsls	r3, r3, #28
 8001350:	4313      	orrs	r3, r2
 8001352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800136a:	d00a      	beq.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001374:	2b00      	cmp	r3, #0
 8001376:	d035      	beq.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001380:	d130      	bne.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001382:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	3301      	adds	r3, #1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001394:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800139a:	0f1b      	lsrs	r3, r3, #28
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80013a2:	494c      	ldr	r1, [pc, #304]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	019b      	lsls	r3, r3, #6
 80013ae:	431a      	orrs	r2, r3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	3b01      	subs	r3, #1
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	061b      	lsls	r3, r3, #24
 80013c0:	431a      	orrs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	071b      	lsls	r3, r3, #28
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80013cc:	4941      	ldr	r1, [pc, #260]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d4:	f023 021f 	bic.w	r2, r3, #31
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	3b01      	subs	r3, #1
 80013de:	4313      	orrs	r3, r2
 80013e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d029      	beq.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f8:	d124      	bne.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013fa:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800140e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001412:	0f1b      	lsrs	r3, r3, #28
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800141a:	492e      	ldr	r1, [pc, #184]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	3b01      	subs	r3, #1
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	061b      	lsls	r3, r3, #24
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	071b      	lsls	r3, r3, #28
 800143e:	4313      	orrs	r3, r2
 8001440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800144c:	2b00      	cmp	r3, #0
 800144e:	d016      	beq.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001450:	4920      	ldr	r1, [pc, #128]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	019b      	lsls	r3, r3, #6
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	3b01      	subs	r3, #1
 8001466:	041b      	lsls	r3, r3, #16
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	061b      	lsls	r3, r3, #24
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	071b      	lsls	r3, r3, #28
 8001478:	4313      	orrs	r3, r2
 800147a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff f8ac 	bl	80005e0 <HAL_GetTick>
 8001488:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800148c:	f7ff f8a8 	bl	80005e0 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e09f      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 8095 	bne.w	80015dc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff f892 	bl	80005e0 <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014be:	e00f      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80014c0:	f7ff f88e 	bl	80005e0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d908      	bls.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e085      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	42470068 	.word	0x42470068
 80014dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ec:	d0e8      	beq.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800150a:	2b00      	cmp	r3, #0
 800150c:	d02b      	beq.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001512:	2b00      	cmp	r3, #0
 8001514:	d127      	bne.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	3301      	adds	r3, #1
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001528:	492f      	ldr	r1, [pc, #188]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	431a      	orrs	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	3b01      	subs	r3, #1
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	4313      	orrs	r3, r2
 8001548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800154c:	4926      	ldr	r1, [pc, #152]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001554:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	3b01      	subs	r3, #1
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	4313      	orrs	r3, r2
 8001562:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01d      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800157a:	d118      	bne.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	0e1b      	lsrs	r3, r3, #24
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800158a:	4917      	ldr	r1, [pc, #92]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	3b01      	subs	r3, #1
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	061b      	lsls	r3, r3, #24
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015b4:	f7ff f814 	bl	80005e0 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80015bc:	f7ff f810 	bl	80005e0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e007      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015da:	d1ef      	bne.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3730      	adds	r7, #48	; 0x30
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470070 	.word	0x42470070

080015f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f4:	b0a1      	sub	sp, #132	; 0x84
 80015f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800160c:	4ba0      	ldr	r3, [pc, #640]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b0c      	cmp	r3, #12
 8001616:	f200 8193 	bhi.w	8001940 <HAL_RCC_GetSysClockFreq+0x350>
 800161a:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <HAL_RCC_GetSysClockFreq+0x30>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	08001655 	.word	0x08001655
 8001624:	08001941 	.word	0x08001941
 8001628:	08001941 	.word	0x08001941
 800162c:	08001941 	.word	0x08001941
 8001630:	0800165b 	.word	0x0800165b
 8001634:	08001941 	.word	0x08001941
 8001638:	08001941 	.word	0x08001941
 800163c:	08001941 	.word	0x08001941
 8001640:	08001661 	.word	0x08001661
 8001644:	08001941 	.word	0x08001941
 8001648:	08001941 	.word	0x08001941
 800164c:	08001941 	.word	0x08001941
 8001650:	080017dd 	.word	0x080017dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001656:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001658:	e175      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165a:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <HAL_RCC_GetSysClockFreq+0x2a8>)
 800165c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800165e:	e172      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b8b      	ldr	r3, [pc, #556]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166a:	4b89      	ldr	r3, [pc, #548]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d056      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001676:	4b86      	ldr	r3, [pc, #536]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	099b      	lsrs	r3, r3, #6
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	ea01 0103 	and.w	r1, r1, r3
 800168c:	ea02 0204 	and.w	r2, r2, r4
 8001690:	460b      	mov	r3, r1
 8001692:	4614      	mov	r4, r2
 8001694:	0160      	lsls	r0, r4, #5
 8001696:	6678      	str	r0, [r7, #100]	; 0x64
 8001698:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800169a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800169e:	6678      	str	r0, [r7, #100]	; 0x64
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	663b      	str	r3, [r7, #96]	; 0x60
 80016a4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80016a8:	1a5b      	subs	r3, r3, r1
 80016aa:	eb64 0402 	sbc.w	r4, r4, r2
 80016ae:	01a0      	lsls	r0, r4, #6
 80016b0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016b4:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80016b8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016ba:	0198      	lsls	r0, r3, #6
 80016bc:	65b8      	str	r0, [r7, #88]	; 0x58
 80016be:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80016c2:	1aed      	subs	r5, r5, r3
 80016c4:	eb66 0604 	sbc.w	r6, r6, r4
 80016c8:	4633      	mov	r3, r6
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	657b      	str	r3, [r7, #84]	; 0x54
 80016ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d0:	4628      	mov	r0, r5
 80016d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016d6:	657b      	str	r3, [r7, #84]	; 0x54
 80016d8:	462b      	mov	r3, r5
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	653b      	str	r3, [r7, #80]	; 0x50
 80016de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80016e2:	461d      	mov	r5, r3
 80016e4:	4626      	mov	r6, r4
 80016e6:	186b      	adds	r3, r5, r1
 80016e8:	eb46 0402 	adc.w	r4, r6, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	4621      	mov	r1, r4
 80016f0:	460b      	mov	r3, r1
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f8:	4602      	mov	r2, r0
 80016fa:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001700:	4603      	mov	r3, r0
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	64bb      	str	r3, [r7, #72]	; 0x48
 8001706:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800170a:	4618      	mov	r0, r3
 800170c:	4621      	mov	r1, r4
 800170e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001710:	f04f 0400 	mov.w	r4, #0
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	f7fe fd74 	bl	8000204 <__aeabi_uldivmod>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001722:	e04d      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	f04f 0400 	mov.w	r4, #0
 800172e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	ea01 0103 	and.w	r1, r1, r3
 800173a:	ea02 0204 	and.w	r2, r2, r4
 800173e:	460b      	mov	r3, r1
 8001740:	4614      	mov	r4, r2
 8001742:	0160      	lsls	r0, r4, #5
 8001744:	6478      	str	r0, [r7, #68]	; 0x44
 8001746:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001748:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800174c:	6478      	str	r0, [r7, #68]	; 0x44
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
 8001752:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001756:	1a5b      	subs	r3, r3, r1
 8001758:	eb64 0402 	sbc.w	r4, r4, r2
 800175c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001760:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001764:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001768:	ebba 0a03 	subs.w	sl, sl, r3
 800176c:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
 8001784:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001788:	eb1a 0a01 	adds.w	sl, sl, r1
 800178c:	eb4b 0b02 	adc.w	fp, fp, r2
 8001790:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
 8001796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001798:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
 800179e:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
 80017a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80017a8:	4650      	mov	r0, sl
 80017aa:	4659      	mov	r1, fp
 80017ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ae:	f04f 0400 	mov.w	r4, #0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4623      	mov	r3, r4
 80017b6:	f7fe fd25 	bl	8000204 <__aeabi_uldivmod>
 80017ba:	4603      	mov	r3, r0
 80017bc:	460c      	mov	r4, r1
 80017be:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c0:	4b33      	ldr	r3, [pc, #204]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 80017d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80017da:	e0b4      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d054      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	f04f 0400 	mov.w	r4, #0
 80017fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	ea01 0103 	and.w	r1, r1, r3
 8001808:	ea02 0204 	and.w	r2, r2, r4
 800180c:	460b      	mov	r3, r1
 800180e:	4614      	mov	r4, r2
 8001810:	0160      	lsls	r0, r4, #5
 8001812:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001816:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800181a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001820:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001824:	1a5b      	subs	r3, r3, r1
 8001826:	eb64 0402 	sbc.w	r4, r4, r2
 800182a:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800182e:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001832:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001836:	ebb8 0803 	subs.w	r8, r8, r3
 800183a:	eb69 0904 	sbc.w	r9, r9, r4
 800183e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001850:	623b      	str	r3, [r7, #32]
 8001852:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001856:	eb18 0801 	adds.w	r8, r8, r1
 800185a:	eb49 0902 	adc.w	r9, r9, r2
 800185e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001876:	4640      	mov	r0, r8
 8001878:	4649      	mov	r1, r9
 800187a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	461a      	mov	r2, r3
 8001882:	4623      	mov	r3, r4
 8001884:	f7fe fcbe 	bl	8000204 <__aeabi_uldivmod>
 8001888:	4603      	mov	r3, r0
 800188a:	460c      	mov	r4, r1
 800188c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800188e:	e04b      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x338>
 8001890:	40023800 	.word	0x40023800
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_GetSysClockFreq+0x364>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	ea01 0103 	and.w	r1, r1, r3
 80018b2:	ea02 0204 	and.w	r2, r2, r4
 80018b6:	460b      	mov	r3, r1
 80018b8:	4614      	mov	r4, r2
 80018ba:	0160      	lsls	r0, r4, #5
 80018bc:	6178      	str	r0, [r7, #20]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80018c4:	6178      	str	r0, [r7, #20]
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018ce:	1a5b      	subs	r3, r3, r1
 80018d0:	eb64 0402 	sbc.w	r4, r4, r2
 80018d4:	01a6      	lsls	r6, r4, #6
 80018d6:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80018da:	019d      	lsls	r5, r3, #6
 80018dc:	1aed      	subs	r5, r5, r3
 80018de:	eb66 0604 	sbc.w	r6, r6, r4
 80018e2:	00f3      	lsls	r3, r6, #3
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	00eb      	lsls	r3, r5, #3
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80018f6:	186d      	adds	r5, r5, r1
 80018f8:	eb46 0602 	adc.w	r6, r6, r2
 80018fc:	02b3      	lsls	r3, r6, #10
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	02ab      	lsls	r3, r5, #10
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001910:	4628      	mov	r0, r5
 8001912:	4631      	mov	r1, r6
 8001914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	461a      	mov	r2, r3
 800191c:	4623      	mov	r3, r4
 800191e:	f7fe fc71 	bl	8000204 <__aeabi_uldivmod>
 8001922:	4603      	mov	r3, r0
 8001924:	460c      	mov	r4, r1
 8001926:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_RCC_GetSysClockFreq+0x364>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0f1b      	lsrs	r3, r3, #28
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001934:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800193e:	e002      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetSysClockFreq+0x368>)
 8001942:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001948:	4618      	mov	r0, r3
 800194a:	3784      	adds	r7, #132	; 0x84
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400

0800195c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8083 	beq.w	8001a7c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001976:	4b95      	ldr	r3, [pc, #596]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b04      	cmp	r3, #4
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001982:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800198e:	4b8f      	ldr	r3, [pc, #572]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800199a:	d00c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199c:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d112      	bne.n	80019ce <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a8:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b4:	d10b      	bne.n	80019ce <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b6:	4b85      	ldr	r3, [pc, #532]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d05b      	beq.n	8001a7a <HAL_RCC_OscConfig+0x11e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d157      	bne.n	8001a7a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e216      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x8a>
 80019d8:	4a7c      	ldr	r2, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e01d      	b.n	8001a22 <HAL_RCC_OscConfig+0xc6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0xae>
 80019f0:	4a76      	ldr	r2, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4a73      	ldr	r2, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0xc6>
 8001a0a:	4a70      	ldr	r2, [pc, #448]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4a6d      	ldr	r2, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a18:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d013      	beq.n	8001a52 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7fe fdd9 	bl	80005e0 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a32:	f7fe fdd5 	bl	80005e0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1db      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a44:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0xd6>
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7fe fdc5 	bl	80005e0 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fdc1 	bl	80005e0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1c7      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6c:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0xfe>
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d06f      	beq.n	8001b68 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d017      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a94:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aac:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d11c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d116      	bne.n	8001af2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac4:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_OscConfig+0x180>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e18f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	493b      	ldr	r1, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af0:	e03a      	b.n	8001b68 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d020      	beq.n	8001b3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7fe fd6e 	bl	80005e0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b08:	f7fe fd6a 	bl	80005e0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e170      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4929      	ldr	r1, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
 8001b3a:	e015      	b.n	8001b68 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7fe fd4d 	bl	80005e0 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7fe fd49 	bl	80005e0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e14f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d037      	beq.n	8001be4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d016      	beq.n	8001baa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7fe fd2d 	bl	80005e0 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7fe fd29 	bl	80005e0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e12f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x22e>
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7fe fd16 	bl	80005e0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb6:	e00f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7fe fd12 	bl	80005e0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d908      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e118      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	42470000 	.word	0x42470000
 8001bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b8a      	ldr	r3, [pc, #552]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e9      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8097 	beq.w	8001d20 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4a7f      	ldr	r2, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4a76      	ldr	r2, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7fe fcd1 	bl	80005e0 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7fe fccd 	bl	80005e0 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0d3      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b6c      	ldr	r3, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x31a>
 8001c68:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c6a:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x354>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x33c>
 8001c7e:	4a61      	ldr	r2, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c80:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c8c:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x354>
 8001c98:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001ca6:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7fe fc92 	bl	80005e0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7fe fc8e 	bl	80005e0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e092      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ee      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x364>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7fe fc7c 	bl	80005e0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7fe fc78 	bl	80005e0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e07c      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ee      	bne.n	8001cec <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d068      	beq.n	8001dfa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d060      	beq.n	8001df6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d145      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7fe fc4d 	bl	80005e0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe fc49 	bl	80005e0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e04f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d68:	4926      	ldr	r1, [pc, #152]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	071b      	lsls	r3, r3, #28
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7fe fc1e 	bl	80005e0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe fc1a 	bl	80005e0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e020      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x44c>
 8001dc6:	e018      	b.n	8001dfa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7fe fc07 	bl	80005e0 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7fe fc03 	bl	80005e0 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e009      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x47a>
 8001df4:	e001      	b.n	8001dfa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42470060 	.word	0x42470060

08001e10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e083      	b.n	8001f2a <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7f5b      	ldrb	r3, [r3, #29]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f001 ffa2 	bl	8003d7c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	22ca      	movs	r2, #202	; 0xca
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2253      	movs	r2, #83	; 0x53
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fba8 	bl	80025a4 <RTC_EnterInitMode>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	22ff      	movs	r2, #255	; 0xff
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e05e      	b.n	8001f2a <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e7e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	6891      	ldr	r1, [r2, #8]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6850      	ldr	r0, [r2, #4]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6912      	ldr	r2, [r2, #16]
 8001e92:	4310      	orrs	r0, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6952      	ldr	r2, [r2, #20]
 8001e98:	4302      	orrs	r2, r0
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	6911      	ldr	r1, [r2, #16]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6892      	ldr	r2, [r2, #8]
 8001eb6:	0412      	lsls	r2, r2, #16
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fb3a 	bl	8002554 <HAL_RTC_WaitForSynchro>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	22ff      	movs	r2, #255	; 0xff
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e018      	b.n	8001f2a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6992      	ldr	r2, [r2, #24]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
  }
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f32:	b590      	push	{r4, r7, lr}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	7f1b      	ldrb	r3, [r3, #28]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_RTC_SetTime+0x1c>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e0b2      	b.n	80020b4 <HAL_RTC_SetTime+0x182>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2202      	movs	r2, #2
 8001f58:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d126      	bne.n	8001fae <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fb3f 	bl	80025fc <RTC_ByteToBcd2>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fb38 	bl	80025fc <RTC_ByteToBcd2>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f90:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fb30 	bl	80025fc <RTC_ByteToBcd2>
 8001f9c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f9e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e020      	b.n	8001ff0 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fb39 	bl	8002638 <RTC_Bcd2ToByte>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e002      	b.n	8001fd2 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	785b      	ldrb	r3, [r3, #1]
 8001fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fde:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fe4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	78db      	ldrb	r3, [r3, #3]
 8001fea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	22ca      	movs	r2, #202	; 0xca
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2253      	movs	r2, #83	; 0x53
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 facf 	bl	80025a4 <RTC_EnterInitMode>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2204      	movs	r2, #4
 8002018:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e047      	b.n	80020b4 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800202e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002032:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	6892      	ldr	r2, [r2, #8]
 800203e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002042:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	6891      	ldr	r1, [r2, #8]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	68d0      	ldr	r0, [r2, #12]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	6912      	ldr	r2, [r2, #16]
 8002056:	4302      	orrs	r2, r0
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206a:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d111      	bne.n	800209e <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fa6a 	bl	8002554 <HAL_RTC_WaitForSynchro>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	22ff      	movs	r2, #255	; 0xff
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2204      	movs	r2, #4
 8002092:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00a      	b.n	80020b4 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 80020b2:	2300      	movs	r3, #0
  }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}

080020bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	7f1b      	ldrb	r3, [r3, #28]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_RTC_SetDate+0x1c>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e094      	b.n	8002202 <HAL_RTC_SetDate+0x146>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2202      	movs	r2, #2
 80020e2:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10e      	bne.n	8002108 <HAL_RTC_SetDate+0x4c>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	f023 0310 	bic.w	r3, r3, #16
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	330a      	adds	r3, #10
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11c      	bne.n	8002148 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	78db      	ldrb	r3, [r3, #3]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fa72 	bl	80025fc <RTC_ByteToBcd2>
 8002118:	4603      	mov	r3, r0
 800211a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fa6b 	bl	80025fc <RTC_ByteToBcd2>
 8002126:	4603      	mov	r3, r0
 8002128:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800212a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	789b      	ldrb	r3, [r3, #2]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fa63 	bl	80025fc <RTC_ByteToBcd2>
 8002136:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002138:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e00e      	b.n	8002166 <HAL_RTC_SetDate+0xaa>
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(datetmpreg));
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	78db      	ldrb	r3, [r3, #3]
 800214c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002154:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800215a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	22ca      	movs	r2, #202	; 0xca
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2253      	movs	r2, #83	; 0x53
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fa14 	bl	80025a4 <RTC_EnterInitMode>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2204      	movs	r2, #4
 800218e:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e033      	b.n	8002202 <HAL_RTC_SetDate+0x146>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021a8:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	68d2      	ldr	r2, [r2, #12]
 80021b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b8:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d111      	bne.n	80021ec <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f9c3 	bl	8002554 <HAL_RTC_WaitForSynchro>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <HAL_RTC_SetDate+0x130>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	22ff      	movs	r2, #255	; 0xff
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2204      	movs	r2, #4
 80021e0:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e00a      	b.n	8002202 <HAL_RTC_SetDate+0x146>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	22ff      	movs	r2, #255	; 0xff
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 8002200:	2300      	movs	r3, #0
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd90      	pop	{r4, r7, pc}
	...

0800220c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002220:	4ba1      	ldr	r3, [pc, #644]	; (80024a8 <HAL_RTC_SetAlarm_IT+0x29c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4aa1      	ldr	r2, [pc, #644]	; (80024ac <HAL_RTC_SetAlarm_IT+0x2a0>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0adb      	lsrs	r3, r3, #11
 800222c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	7f1b      	ldrb	r3, [r3, #28]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_RTC_SetAlarm_IT+0x36>
 800223e:	2302      	movs	r3, #2
 8002240:	e12e      	b.n	80024a0 <HAL_RTC_SetAlarm_IT+0x294>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2202      	movs	r2, #2
 800224c:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d137      	bne.n	80022c4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2200      	movs	r2, #0
 8002266:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f9c5 	bl	80025fc <RTC_ByteToBcd2>
 8002272:	4603      	mov	r3, r0
 8002274:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f9be 	bl	80025fc <RTC_ByteToBcd2>
 8002280:	4603      	mov	r3, r0
 8002282:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002284:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	789b      	ldrb	r3, [r3, #2]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f9b6 	bl	80025fc <RTC_ByteToBcd2>
 8002290:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002292:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	78db      	ldrb	r3, [r3, #3]
 800229a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800229c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f9a8 	bl	80025fc <RTC_ByteToBcd2>
 80022ac:	4603      	mov	r3, r0
 80022ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022be:	4313      	orrs	r3, r2
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	e040      	b.n	8002346 <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f9ae 	bl	8002638 <RTC_Bcd2ToByte>
 80022dc:	4603      	mov	r3, r0
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	e002      	b.n	80022e8 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d108      	bne.n	8002302 <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f99e 	bl	8002638 <RTC_Bcd2ToByte>
 80022fc:	4603      	mov	r3, r0
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	e007      	b.n	8002312 <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f995 	bl	8002638 <RTC_Bcd2ToByte>
 800230e:	4603      	mov	r3, r0
 8002310:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800231e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002324:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800232c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002336:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800233c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002342:	4313      	orrs	r3, r2
 8002344:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	22ca      	movs	r2, #202	; 0xca
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2253      	movs	r2, #83	; 0x53
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236a:	d141      	bne.n	80023f0 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	68d2      	ldr	r2, [r2, #12]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800238c:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	617a      	str	r2, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	22ff      	movs	r2, #255	; 0xff
 800239e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2203      	movs	r2, #3
 80023a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e077      	b.n	80024a0 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0e7      	beq.n	800238e <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	6892      	ldr	r2, [r2, #8]
 80023d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023dc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	e040      	b.n	8002472 <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	6892      	ldr	r2, [r2, #8]
 80023fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023fe:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	68d2      	ldr	r2, [r2, #12]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002410:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	617a      	str	r2, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	22ff      	movs	r2, #255	; 0xff
 8002422:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2203      	movs	r2, #3
 8002428:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e035      	b.n	80024a0 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0e7      	beq.n	8002412 <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	6892      	ldr	r2, [r2, #8]
 800245c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002460:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	6892      	ldr	r2, [r2, #8]
 800246c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002470:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800247e:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	22ff      	movs	r2, #255	; 0xff
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3724      	adds	r7, #36	; 0x24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	2000000c 	.word	0x2000000c
 80024ac:	10624dd3 	.word	0x10624dd3
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d012      	beq.n	80024f0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f831 	bl	8002540 <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	68d2      	ldr	r2, [r2, #12]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80024ee:	60da      	str	r2, [r3, #12]
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d012      	beq.n	8002524 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8b1 	bl	8002674 <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	68d2      	ldr	r2, [r2, #12]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002522:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RTC_AlarmIRQHandler+0x88>)
 8002526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252a:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	775a      	strb	r2, [r3, #29]
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800256e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002570:	f7fe f836 	bl	80005e0 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002576:	e009      	b.n	800258c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002578:	f7fe f832 	bl	80005e0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002586:	d901      	bls.n	800258c <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e007      	b.n	800259c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ee      	beq.n	8002578 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d119      	bne.n	80025f2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025c8:	f7fe f80a 	bl	80005e0 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025ce:	e009      	b.n	80025e4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025d0:	f7fe f806 	bl	80005e0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025de:	d901      	bls.n	80025e4 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e007      	b.n	80025f4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ee      	beq.n	80025d0 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 800260a:	e005      	b.n	8002618 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3301      	adds	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	3b0a      	subs	r3, #10
 8002616:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	2b09      	cmp	r3, #9
 800261c:	d8f6      	bhi.n	800260c <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	b2da      	uxtb	r2, r3
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	4313      	orrs	r3, r2
 800262a:	b2db      	uxtb	r3, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	b2db      	uxtb	r3, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e01d      	b.n	80026d6 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f001 fb80 	bl	8003db4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f000 f904 	bl	80028d4 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}  
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2201      	movs	r2, #1
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fa10 	bl	8002b18 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a10      	ldr	r2, [pc, #64]	; (8002740 <HAL_TIM_PWM_Start+0x60>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_TIM_PWM_Start+0x2c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_TIM_PWM_Start+0x64>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_TIM_PWM_Start+0x30>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_TIM_PWM_Start+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
} 
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40010000 	.word	0x40010000
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800275e:	2302      	movs	r3, #2
 8002760:	e0b4      	b.n	80028cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	f200 809f 	bhi.w	80028b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	080027b5 	.word	0x080027b5
 8002784:	080028b9 	.word	0x080028b9
 8002788:	080028b9 	.word	0x080028b9
 800278c:	080028b9 	.word	0x080028b9
 8002790:	080027f5 	.word	0x080027f5
 8002794:	080028b9 	.word	0x080028b9
 8002798:	080028b9 	.word	0x080028b9
 800279c:	080028b9 	.word	0x080028b9
 80027a0:	08002837 	.word	0x08002837
 80027a4:	080028b9 	.word	0x080028b9
 80027a8:	080028b9 	.word	0x080028b9
 80027ac:	080028b9 	.word	0x080028b9
 80027b0:	08002877 	.word	0x08002877
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f9d0 	bl	8002b60 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	6992      	ldr	r2, [r2, #24]
 80027ca:	f042 0208 	orr.w	r2, r2, #8
 80027ce:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	6992      	ldr	r2, [r2, #24]
 80027da:	f022 0204 	bic.w	r2, r2, #4
 80027de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	6991      	ldr	r1, [r2, #24]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	6912      	ldr	r2, [r2, #16]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	619a      	str	r2, [r3, #24]
    }
    break;
 80027f2:	e062      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f914 	bl	8002a28 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	6992      	ldr	r2, [r2, #24]
 800280a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	6992      	ldr	r2, [r2, #24]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	6991      	ldr	r1, [r2, #24]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	6912      	ldr	r2, [r2, #16]
 800282e:	0212      	lsls	r2, r2, #8
 8002830:	430a      	orrs	r2, r1
 8002832:	619a      	str	r2, [r3, #24]
    }
    break;
 8002834:	e041      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fa03 	bl	8002c48 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	69d2      	ldr	r2, [r2, #28]
 800284c:	f042 0208 	orr.w	r2, r2, #8
 8002850:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	69d2      	ldr	r2, [r2, #28]
 800285c:	f022 0204 	bic.w	r2, r2, #4
 8002860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	69d1      	ldr	r1, [r2, #28]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	6912      	ldr	r2, [r2, #16]
 8002870:	430a      	orrs	r2, r1
 8002872:	61da      	str	r2, [r3, #28]
    }
    break;
 8002874:	e021      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fa5b 	bl	8002d38 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	69d2      	ldr	r2, [r2, #28]
 800288c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002890:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	69d2      	ldr	r2, [r2, #28]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	69d1      	ldr	r1, [r2, #28]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	6912      	ldr	r2, [r2, #16]
 80028b0:	0212      	lsls	r2, r2, #8
 80028b2:	430a      	orrs	r2, r1
 80028b4:	61da      	str	r2, [r3, #28]
    }
    break;
 80028b6:	e000      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80028b8:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a44      	ldr	r2, [pc, #272]	; (80029fc <TIM_Base_SetConfig+0x128>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <TIM_Base_SetConfig+0x44>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d00f      	beq.n	8002918 <TIM_Base_SetConfig+0x44>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a41      	ldr	r2, [pc, #260]	; (8002a00 <TIM_Base_SetConfig+0x12c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00b      	beq.n	8002918 <TIM_Base_SetConfig+0x44>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <TIM_Base_SetConfig+0x130>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d007      	beq.n	8002918 <TIM_Base_SetConfig+0x44>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a3f      	ldr	r2, [pc, #252]	; (8002a08 <TIM_Base_SetConfig+0x134>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0x44>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3e      	ldr	r2, [pc, #248]	; (8002a0c <TIM_Base_SetConfig+0x138>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <TIM_Base_SetConfig+0x48>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <TIM_Base_SetConfig+0x4a>
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a31      	ldr	r2, [pc, #196]	; (80029fc <TIM_Base_SetConfig+0x128>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d02b      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d027      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <TIM_Base_SetConfig+0x12c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d023      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a2d      	ldr	r2, [pc, #180]	; (8002a04 <TIM_Base_SetConfig+0x130>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d01f      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <TIM_Base_SetConfig+0x134>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01b      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <TIM_Base_SetConfig+0x138>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d017      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <TIM_Base_SetConfig+0x13c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <TIM_Base_SetConfig+0x140>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <TIM_Base_SetConfig+0x144>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <TIM_Base_SetConfig+0x148>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a26      	ldr	r2, [pc, #152]	; (8002a20 <TIM_Base_SetConfig+0x14c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0xc0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <TIM_Base_SetConfig+0x150>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <TIM_Base_SetConfig+0xc4>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <TIM_Base_SetConfig+0xc6>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <TIM_Base_SetConfig+0x128>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0x102>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <TIM_Base_SetConfig+0x138>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <TIM_Base_SetConfig+0x106>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <TIM_Base_SetConfig+0x108>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	615a      	str	r2, [r3, #20]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	40014800 	.word	0x40014800
 8002a1c:	40001800 	.word	0x40001800
 8002a20:	40001c00 	.word	0x40001c00
 8002a24:	40002000 	.word	0x40002000

08002a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f023 0210 	bic.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0320 	bic.w	r3, r3, #32
 8002a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <TIM_OC2_SetConfig+0xe8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_OC2_SetConfig+0x74>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <TIM_OC2_SetConfig+0xec>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <TIM_OC2_SetConfig+0x78>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <TIM_OC2_SetConfig+0x7a>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d021      	beq.n	8002aea <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac0:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40010400 	.word	0x40010400

08002b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f023 0201 	bic.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f023 0302 	bic.w	r3, r3, #2
 8002bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <TIM_OC1_SetConfig+0xe0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_OC1_SetConfig+0x70>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <TIM_OC1_SetConfig+0xe4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <TIM_OC1_SetConfig+0x74>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <TIM_OC1_SetConfig+0x76>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01e      	beq.n	8002c18 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f023 0308 	bic.w	r3, r3, #8
 8002be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f023 0304 	bic.w	r3, r3, #4
 8002bf2:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	621a      	str	r2, [r3, #32]
} 
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40010400 	.word	0x40010400

08002c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a20      	ldr	r2, [pc, #128]	; (8002d30 <TIM_OC3_SetConfig+0xe8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d003      	beq.n	8002cba <TIM_OC3_SetConfig+0x72>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <TIM_OC3_SetConfig+0xec>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <TIM_OC3_SetConfig+0x76>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <TIM_OC3_SetConfig+0x78>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d021      	beq.n	8002d08 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cde:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40010400 	.word	0x40010400

08002d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	031b      	lsls	r3, r3, #12
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <TIM_OC4_SetConfig+0xb8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <TIM_OC4_SetConfig+0x74>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <TIM_OC4_SetConfig+0xbc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <TIM_OC4_SetConfig+0x78>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <TIM_OC4_SetConfig+0x7a>
 8002db0:	2300      	movs	r3, #0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	019b      	lsls	r3, r3, #6
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e032      	b.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	6852      	ldr	r2, [r2, #4]
 8002e2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e2e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	6851      	ldr	r1, [r2, #4]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6892      	ldr	r2, [r2, #8]
 8002e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e50:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	6891      	ldr	r1, [r2, #8]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	6852      	ldr	r2, [r2, #4]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
} 
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e044      	b.n	8002f28 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e03f      	b.n	8002fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f001 f83a 	bl	8003fd4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	68d2      	ldr	r2, [r2, #12]
 8002f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f76:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f829 	bl	8002fd0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6912      	ldr	r2, [r2, #16]
 8002f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	6952      	ldr	r2, [r2, #20]
 8002f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fac:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800300c:	f023 030c 	bic.w	r3, r3, #12
 8003010:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4313      	orrs	r3, r2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003044:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003060:	f040 80e4 	bne.w	800322c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4aab      	ldr	r2, [pc, #684]	; (8003318 <UART_SetConfig+0x348>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <UART_SetConfig+0xa8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4aaa      	ldr	r2, [pc, #680]	; (800331c <UART_SetConfig+0x34c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d16c      	bne.n	8003152 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	f7fd ff7a 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 8003080:	4602      	mov	r2, r0
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009a      	lsls	r2, r3, #2
 800308a:	441a      	add	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4aa2      	ldr	r2, [pc, #648]	; (8003320 <UART_SetConfig+0x350>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	011d      	lsls	r5, r3, #4
 80030a0:	f7fd ff68 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80030ba:	f7fd ff5b 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	4a92      	ldr	r2, [pc, #584]	; (8003320 <UART_SetConfig+0x350>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2264      	movs	r2, #100	; 0x64
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	1af3      	subs	r3, r6, r3
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a8d      	ldr	r2, [pc, #564]	; (8003320 <UART_SetConfig+0x350>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f6:	441d      	add	r5, r3
 80030f8:	f7fd ff3c 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	009a      	lsls	r2, r3, #2
 8003106:	441a      	add	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003112:	f7fd ff2f 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 8003116:	4602      	mov	r2, r0
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	009a      	lsls	r2, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	4a7c      	ldr	r2, [pc, #496]	; (8003320 <UART_SetConfig+0x350>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2264      	movs	r2, #100	; 0x64
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	1af3      	subs	r3, r6, r3
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	3332      	adds	r3, #50	; 0x32
 8003140:	4a77      	ldr	r2, [pc, #476]	; (8003320 <UART_SetConfig+0x350>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	442b      	add	r3, r5
 800314e:	60a3      	str	r3, [r4, #8]
 8003150:	e154      	b.n	80033fc <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681c      	ldr	r4, [r3, #0]
 8003156:	f7fd fef9 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 800315a:	4602      	mov	r2, r0
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009a      	lsls	r2, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	4a6b      	ldr	r2, [pc, #428]	; (8003320 <UART_SetConfig+0x350>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	011d      	lsls	r5, r3, #4
 800317a:	f7fd fee7 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 800317e:	4602      	mov	r2, r0
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fbb2 f6f3 	udiv	r6, r2, r3
 8003194:	f7fd feda 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 8003198:	4602      	mov	r2, r0
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009a      	lsls	r2, r3, #2
 80031a2:	441a      	add	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <UART_SetConfig+0x350>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	2264      	movs	r2, #100	; 0x64
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	1af3      	subs	r3, r6, r3
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3332      	adds	r3, #50	; 0x32
 80031c2:	4a57      	ldr	r2, [pc, #348]	; (8003320 <UART_SetConfig+0x350>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d0:	441d      	add	r5, r3
 80031d2:	f7fd febb 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009a      	lsls	r2, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80031ec:	f7fd feae 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009a      	lsls	r2, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4a46      	ldr	r2, [pc, #280]	; (8003320 <UART_SetConfig+0x350>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	2264      	movs	r2, #100	; 0x64
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	1af3      	subs	r3, r6, r3
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	3332      	adds	r3, #50	; 0x32
 800321a:	4a41      	ldr	r2, [pc, #260]	; (8003320 <UART_SetConfig+0x350>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	442b      	add	r3, r5
 8003228:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800322a:	e0e7      	b.n	80033fc <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a39      	ldr	r2, [pc, #228]	; (8003318 <UART_SetConfig+0x348>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <UART_SetConfig+0x270>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a38      	ldr	r2, [pc, #224]	; (800331c <UART_SetConfig+0x34c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d171      	bne.n	8003324 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681c      	ldr	r4, [r3, #0]
 8003244:	f7fd fe96 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 8003248:	4602      	mov	r2, r0
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	4a30      	ldr	r2, [pc, #192]	; (8003320 <UART_SetConfig+0x350>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	011d      	lsls	r5, r3, #4
 8003268:	f7fd fe84 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 800326c:	4602      	mov	r2, r0
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	009a      	lsls	r2, r3, #2
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003282:	f7fd fe77 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 8003286:	4602      	mov	r2, r0
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <UART_SetConfig+0x350>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2264      	movs	r2, #100	; 0x64
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	1af3      	subs	r3, r6, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <UART_SetConfig+0x350>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	441d      	add	r5, r3
 80032be:	f7fd fe59 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80032d8:	f7fd fe4c 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009a      	lsls	r2, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <UART_SetConfig+0x350>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	2264      	movs	r2, #100	; 0x64
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	1af3      	subs	r3, r6, r3
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a06      	ldr	r2, [pc, #24]	; (8003320 <UART_SetConfig+0x350>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	442b      	add	r3, r5
 8003314:	60a3      	str	r3, [r4, #8]
 8003316:	e071      	b.n	80033fc <UART_SetConfig+0x42c>
 8003318:	40011000 	.word	0x40011000
 800331c:	40011400 	.word	0x40011400
 8003320:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681c      	ldr	r4, [r3, #0]
 8003328:	f7fd fe10 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 800332c:	4602      	mov	r2, r0
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009a      	lsls	r2, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	4a30      	ldr	r2, [pc, #192]	; (8003404 <UART_SetConfig+0x434>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	011d      	lsls	r5, r3, #4
 800334c:	f7fd fdfe 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 8003350:	4602      	mov	r2, r0
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009a      	lsls	r2, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	fbb2 f6f3 	udiv	r6, r2, r3
 8003366:	f7fd fdf1 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 800336a:	4602      	mov	r2, r0
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009a      	lsls	r2, r3, #2
 8003374:	441a      	add	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	4a20      	ldr	r2, [pc, #128]	; (8003404 <UART_SetConfig+0x434>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2264      	movs	r2, #100	; 0x64
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	1af3      	subs	r3, r6, r3
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	3332      	adds	r3, #50	; 0x32
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <UART_SetConfig+0x434>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a0:	441d      	add	r5, r3
 80033a2:	f7fd fdd3 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009a      	lsls	r2, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80033bc:	f7fd fdc6 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009a      	lsls	r2, r3, #2
 80033ca:	441a      	add	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <UART_SetConfig+0x434>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	2264      	movs	r2, #100	; 0x64
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	1af3      	subs	r3, r6, r3
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	3332      	adds	r3, #50	; 0x32
 80033ea:	4a06      	ldr	r2, [pc, #24]	; (8003404 <UART_SetConfig+0x434>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	442b      	add	r3, r5
 80033f8:	60a3      	str	r3, [r4, #8]
}
 80033fa:	e7ff      	b.n	80033fc <UART_SetConfig+0x42c>
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003404:	51eb851f 	.word	0x51eb851f

08003408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800340c:	f7fd f882 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003410:	f000 f85c 	bl	80034cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003414:	f000 fb70 	bl	8003af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003418:	f000 fb44 	bl	8003aa4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800341c:	f000 f8e6 	bl	80035ec <MX_I2C1_Init>
  MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 8003420:	2000      	movs	r0, #0
 8003422:	f000 fa57 	bl	80038d4 <MX_TIM4_Init>
  MX_TIM3_Init(0);
 8003426:	2000      	movs	r0, #0
 8003428:	f000 f9f6 	bl	8003818 <MX_TIM3_Init>
  MX_TIM8_Init(0);
 800342c:	2000      	movs	r0, #0
 800342e:	f000 faaf 	bl	8003990 <MX_TIM8_Init>
  MX_TIM2_Init(0);
 8003432:	2000      	movs	r0, #0
 8003434:	f000 f994 	bl	8003760 <MX_TIM2_Init>
  MX_RTC_Init();
 8003438:	f000 f906 	bl	8003648 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800343c:	2201      	movs	r2, #1
 800343e:	2120      	movs	r1, #32
 8003440:	481c      	ldr	r0, [pc, #112]	; (80034b4 <main+0xac>)
 8003442:	f7fd fb77 	bl	8000b34 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */
  //Set time, data and alarm
  	//1) Set time
  	myTime.Hours = 12;
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <main+0xb0>)
 8003448:	220c      	movs	r2, #12
 800344a:	701a      	strb	r2, [r3, #0]
  	myTime.Minutes = 59;
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <main+0xb0>)
 800344e:	223b      	movs	r2, #59	; 0x3b
 8003450:	705a      	strb	r2, [r3, #1]
  	myTime.Seconds = 45;
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <main+0xb0>)
 8003454:	222d      	movs	r2, #45	; 0x2d
 8003456:	709a      	strb	r2, [r3, #2]
  	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8003458:	2200      	movs	r2, #0
 800345a:	4917      	ldr	r1, [pc, #92]	; (80034b8 <main+0xb0>)
 800345c:	4817      	ldr	r0, [pc, #92]	; (80034bc <main+0xb4>)
 800345e:	f7fe fd68 	bl	8001f32 <HAL_RTC_SetTime>
  	//2) Set date
  	myDate.Date = 6;
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <main+0xb8>)
 8003464:	2206      	movs	r2, #6
 8003466:	709a      	strb	r2, [r3, #2]
  	myDate.Month = RTC_MONTH_DECEMBER;
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <main+0xb8>)
 800346a:	2212      	movs	r2, #18
 800346c:	705a      	strb	r2, [r3, #1]
  	myDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <main+0xb8>)
 8003470:	2204      	movs	r2, #4
 8003472:	701a      	strb	r2, [r3, #0]
  	myDate.Year = 18;
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <main+0xb8>)
 8003476:	2212      	movs	r2, #18
 8003478:	70da      	strb	r2, [r3, #3]
  	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 800347a:	2200      	movs	r2, #0
 800347c:	4910      	ldr	r1, [pc, #64]	; (80034c0 <main+0xb8>)
 800347e:	480f      	ldr	r0, [pc, #60]	; (80034bc <main+0xb4>)
 8003480:	f7fe fe1c 	bl	80020bc <HAL_RTC_SetDate>
    /* USER CODE BEGIN 3 */


	  //sunrise();
	  //LED_Dimm_Up();
	  set_RGB(1000,10,0);
 8003484:	2200      	movs	r2, #0
 8003486:	210a      	movs	r1, #10
 8003488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800348c:	f000 fbec 	bl	8003c68 <set_RGB>





	switch (flag) {	 		// Interrupt triggers menu display and enables navigation
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <main+0xbc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d004      	beq.n	80034a2 <main+0x9a>
 8003498:	2b03      	cmp	r3, #3
 800349a:	d004      	beq.n	80034a6 <main+0x9e>
 800349c:	2b01      	cmp	r3, #1
 800349e:	d004      	beq.n	80034aa <main+0xa2>
	case 3:
		// TODO start countdown LCD illuminance timer
		// TODO start menu navigation
		break;
	default:
		break;
 80034a0:	e004      	b.n	80034ac <main+0xa4>
		break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <main+0xa4>
		break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <main+0xa4>
		break;
 80034aa:	bf00      	nop

	}

	pflag = 0;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <main+0xc0>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
	  set_RGB(1000,10,0);
 80034b2:	e7e7      	b.n	8003484 <main+0x7c>
 80034b4:	40020000 	.word	0x40020000
 80034b8:	20000034 	.word	0x20000034
 80034bc:	20000154 	.word	0x20000154
 80034c0:	20000150 	.word	0x20000150
 80034c4:	2000002c 	.word	0x2000002c
 80034c8:	20000008 	.word	0x20000008

080034cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b0ac      	sub	sp, #176	; 0xb0
 80034d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034d6:	2234      	movs	r2, #52	; 0x34
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 feb8 	bl	8004250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f0:	f107 030c 	add.w	r3, r7, #12
 80034f4:	225c      	movs	r2, #92	; 0x5c
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fea9 	bl	8004250 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <SystemClock_Config+0x118>)
 8003504:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <SystemClock_Config+0x118>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <SystemClock_Config+0x118>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <SystemClock_Config+0x11c>)
 8003520:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <SystemClock_Config+0x11c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <SystemClock_Config+0x11c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800353a:	2306      	movs	r3, #6
 800353c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800353e:	2301      	movs	r3, #1
 8003540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003544:	2301      	movs	r3, #1
 8003546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800354a:	2310      	movs	r3, #16
 800354c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003550:	2302      	movs	r3, #2
 8003552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 800355c:	2310      	movs	r3, #16
 800355e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003562:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800356a:	2304      	movs	r3, #4
 800356c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003570:	2302      	movs	r3, #2
 8003572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800357c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe f9eb 	bl	800195c <HAL_RCC_OscConfig>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800358c:	f000 fb7f 	bl	8003c8e <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003590:	230f      	movs	r3, #15
 8003592:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003594:	2302      	movs	r3, #2
 8003596:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003598:	2300      	movs	r3, #0
 800359a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800359c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035a2:	2300      	movs	r3, #0
 80035a4:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fbdf 	bl	8000d70 <HAL_RCC_ClockConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80035b8:	f000 fb69 	bl	8003c8e <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035bc:	2320      	movs	r3, #32
 80035be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd fce6 	bl	8000f9c <HAL_RCCEx_PeriphCLKConfig>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80035d6:	f000 fb5a 	bl	8003c8e <Error_Handler>
  }
}
 80035da:	bf00      	nop
 80035dc:	37b0      	adds	r7, #176	; 0xb0
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40007000 	.word	0x40007000

080035ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <MX_I2C1_Init+0x50>)
 80035f2:	4a13      	ldr	r2, [pc, #76]	; (8003640 <MX_I2C1_Init+0x54>)
 80035f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <MX_I2C1_Init+0x50>)
 80035f8:	4a12      	ldr	r2, [pc, #72]	; (8003644 <MX_I2C1_Init+0x58>)
 80035fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <MX_I2C1_Init+0x50>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <MX_I2C1_Init+0x50>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <MX_I2C1_Init+0x50>)
 800360a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800360e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <MX_I2C1_Init+0x50>)
 8003612:	2200      	movs	r2, #0
 8003614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <MX_I2C1_Init+0x50>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <MX_I2C1_Init+0x50>)
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <MX_I2C1_Init+0x50>)
 8003624:	2200      	movs	r2, #0
 8003626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003628:	4804      	ldr	r0, [pc, #16]	; (800363c <MX_I2C1_Init+0x50>)
 800362a:	f7fd fac1 	bl	8000bb0 <HAL_I2C_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003634:	f000 fb2b 	bl	8003c8e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200000c0 	.word	0x200000c0
 8003640:	40005400 	.word	0x40005400
 8003644:	000186a0 	.word	0x000186a0

08003648 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b090      	sub	sp, #64	; 0x40
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800364e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	60da      	str	r2, [r3, #12]
 800365c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800365e:	2300      	movs	r3, #0
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003662:	463b      	mov	r3, r7
 8003664:	2228      	movs	r2, #40	; 0x28
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fdf1 	bl	8004250 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800366e:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <MX_RTC_Init+0x110>)
 8003670:	4a3a      	ldr	r2, [pc, #232]	; (800375c <MX_RTC_Init+0x114>)
 8003672:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003674:	4b38      	ldr	r3, [pc, #224]	; (8003758 <MX_RTC_Init+0x110>)
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <MX_RTC_Init+0x110>)
 800367c:	227f      	movs	r2, #127	; 0x7f
 800367e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <MX_RTC_Init+0x110>)
 8003682:	22ff      	movs	r2, #255	; 0xff
 8003684:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003686:	4b34      	ldr	r3, [pc, #208]	; (8003758 <MX_RTC_Init+0x110>)
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800368c:	4b32      	ldr	r3, [pc, #200]	; (8003758 <MX_RTC_Init+0x110>)
 800368e:	2200      	movs	r2, #0
 8003690:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <MX_RTC_Init+0x110>)
 8003694:	2200      	movs	r2, #0
 8003696:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003698:	482f      	ldr	r0, [pc, #188]	; (8003758 <MX_RTC_Init+0x110>)
 800369a:	f7fe fbb9 	bl	8001e10 <HAL_RTC_Init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80036a4:	f000 faf3 	bl	8003c8e <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c6:	2201      	movs	r2, #1
 80036c8:	4619      	mov	r1, r3
 80036ca:	4823      	ldr	r0, [pc, #140]	; (8003758 <MX_RTC_Init+0x110>)
 80036cc:	f7fe fc31 	bl	8001f32 <HAL_RTC_SetTime>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80036d6:	f000 fada 	bl	8003c8e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x18;
 80036ec:	2318      	movs	r3, #24
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80036f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f6:	2201      	movs	r2, #1
 80036f8:	4619      	mov	r1, r3
 80036fa:	4817      	ldr	r0, [pc, #92]	; (8003758 <MX_RTC_Init+0x110>)
 80036fc:	f7fe fcde 	bl	80020bc <HAL_RTC_SetDate>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003706:	f000 fac2 	bl	8003c8e <Error_Handler>
  }
  /**Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800370a:	2300      	movs	r3, #0
 800370c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800370e:	2300      	movs	r3, #0
 8003710:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003712:	2300      	movs	r3, #0
 8003714:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800373a:	463b      	mov	r3, r7
 800373c:	2201      	movs	r2, #1
 800373e:	4619      	mov	r1, r3
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <MX_RTC_Init+0x110>)
 8003742:	f7fe fd63 	bl	800220c <HAL_RTC_SetAlarm_IT>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800374c:	f000 fa9f 	bl	8003c8e <Error_Handler>
  }


}
 8003750:	bf00      	nop
 8003752:	3740      	adds	r7, #64	; 0x40
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000154 	.word	0x20000154
 800375c:	40002800 	.word	0x40002800

08003760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(int brightness)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08c      	sub	sp, #48	; 0x30
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003772:	f107 030c 	add.w	r3, r7, #12
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	60da      	str	r2, [r3, #12]
 8003780:	611a      	str	r2, [r3, #16]
 8003782:	615a      	str	r2, [r3, #20]
 8003784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003786:	4b23      	ldr	r3, [pc, #140]	; (8003814 <MX_TIM2_Init+0xb4>)
 8003788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800378c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <MX_TIM2_Init+0xb4>)
 8003790:	2254      	movs	r2, #84	; 0x54
 8003792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <MX_TIM2_Init+0xb4>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <MX_TIM2_Init+0xb4>)
 800379c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <MX_TIM2_Init+0xb4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037a8:	481a      	ldr	r0, [pc, #104]	; (8003814 <MX_TIM2_Init+0xb4>)
 80037aa:	f7fe ff6d 	bl	8002688 <HAL_TIM_PWM_Init>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80037b4:	f000 fa6b 	bl	8003c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037c4:	4619      	mov	r1, r3
 80037c6:	4813      	ldr	r0, [pc, #76]	; (8003814 <MX_TIM2_Init+0xb4>)
 80037c8:	f7ff fb16 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80037d2:	f000 fa5c 	bl	8003c8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037d6:	2360      	movs	r3, #96	; 0x60
 80037d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = brightness;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037e6:	f107 030c 	add.w	r3, r7, #12
 80037ea:	2208      	movs	r2, #8
 80037ec:	4619      	mov	r1, r3
 80037ee:	4809      	ldr	r0, [pc, #36]	; (8003814 <MX_TIM2_Init+0xb4>)
 80037f0:	f7fe ffaa 	bl	8002748 <HAL_TIM_PWM_ConfigChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80037fa:	f000 fa48 	bl	8003c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 80037fe:	2108      	movs	r1, #8
 8003800:	4804      	ldr	r0, [pc, #16]	; (8003814 <MX_TIM2_Init+0xb4>)
 8003802:	f7fe ff6d 	bl	80026e0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003806:	4803      	ldr	r0, [pc, #12]	; (8003814 <MX_TIM2_Init+0xb4>)
 8003808:	f000 fb36 	bl	8003e78 <HAL_TIM_MspPostInit>

}
 800380c:	bf00      	nop
 800380e:	3730      	adds	r7, #48	; 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000174 	.word	0x20000174

08003818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(int duty)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	; 0x30
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	611a      	str	r2, [r3, #16]
 800383a:	615a      	str	r2, [r3, #20]
 800383c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800383e:	4b23      	ldr	r3, [pc, #140]	; (80038cc <MX_TIM3_Init+0xb4>)
 8003840:	4a23      	ldr	r2, [pc, #140]	; (80038d0 <MX_TIM3_Init+0xb8>)
 8003842:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <MX_TIM3_Init+0xb4>)
 8003846:	2254      	movs	r2, #84	; 0x54
 8003848:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <MX_TIM3_Init+0xb4>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8003850:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <MX_TIM3_Init+0xb4>)
 8003852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003856:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <MX_TIM3_Init+0xb4>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800385e:	481b      	ldr	r0, [pc, #108]	; (80038cc <MX_TIM3_Init+0xb4>)
 8003860:	f7fe ff12 	bl	8002688 <HAL_TIM_PWM_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800386a:	f000 fa10 	bl	8003c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003872:	2300      	movs	r3, #0
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800387a:	4619      	mov	r1, r3
 800387c:	4813      	ldr	r0, [pc, #76]	; (80038cc <MX_TIM3_Init+0xb4>)
 800387e:	f7ff fabb 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8003888:	f000 fa01 	bl	8003c8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800388c:	2360      	movs	r3, #96	; 0x60
 800388e:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	2204      	movs	r2, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4809      	ldr	r0, [pc, #36]	; (80038cc <MX_TIM3_Init+0xb4>)
 80038a6:	f7fe ff4f 	bl	8002748 <HAL_TIM_PWM_ConfigChannel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80038b0:	f000 f9ed 	bl	8003c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80038b4:	2104      	movs	r1, #4
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <MX_TIM3_Init+0xb4>)
 80038b8:	f7fe ff12 	bl	80026e0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80038bc:	4803      	ldr	r0, [pc, #12]	; (80038cc <MX_TIM3_Init+0xb4>)
 80038be:	f000 fadb 	bl	8003e78 <HAL_TIM_MspPostInit>

}
 80038c2:	bf00      	nop
 80038c4:	3730      	adds	r7, #48	; 0x30
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000114 	.word	0x20000114
 80038d0:	40000400 	.word	0x40000400

080038d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(int duty)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038e6:	f107 030c 	add.w	r3, r7, #12
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	615a      	str	r2, [r3, #20]
 80038f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <MX_TIM4_Init+0xb4>)
 80038fc:	4a23      	ldr	r2, [pc, #140]	; (800398c <MX_TIM4_Init+0xb8>)
 80038fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <MX_TIM4_Init+0xb4>)
 8003902:	2254      	movs	r2, #84	; 0x54
 8003904:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003906:	4b20      	ldr	r3, [pc, #128]	; (8003988 <MX_TIM4_Init+0xb4>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <MX_TIM4_Init+0xb4>)
 800390e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003912:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003914:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <MX_TIM4_Init+0xb4>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800391a:	481b      	ldr	r0, [pc, #108]	; (8003988 <MX_TIM4_Init+0xb4>)
 800391c:	f7fe feb4 	bl	8002688 <HAL_TIM_PWM_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003926:	f000 f9b2 	bl	8003c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800392e:	2300      	movs	r3, #0
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003936:	4619      	mov	r1, r3
 8003938:	4813      	ldr	r0, [pc, #76]	; (8003988 <MX_TIM4_Init+0xb4>)
 800393a:	f7ff fa5d 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8003944:	f000 f9a3 	bl	8003c8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003948:	2360      	movs	r3, #96	; 0x60
 800394a:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	2200      	movs	r2, #0
 800395e:	4619      	mov	r1, r3
 8003960:	4809      	ldr	r0, [pc, #36]	; (8003988 <MX_TIM4_Init+0xb4>)
 8003962:	f7fe fef1 	bl	8002748 <HAL_TIM_PWM_ConfigChannel>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800396c:	f000 f98f 	bl	8003c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8003970:	2100      	movs	r1, #0
 8003972:	4805      	ldr	r0, [pc, #20]	; (8003988 <MX_TIM4_Init+0xb4>)
 8003974:	f7fe feb4 	bl	80026e0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003978:	4803      	ldr	r0, [pc, #12]	; (8003988 <MX_TIM4_Init+0xb4>)
 800397a:	f000 fa7d 	bl	8003e78 <HAL_TIM_MspPostInit>

}
 800397e:	bf00      	nop
 8003980:	3730      	adds	r7, #48	; 0x30
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000084 	.word	0x20000084
 800398c:	40000800 	.word	0x40000800

08003990 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(int duty)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b092      	sub	sp, #72	; 0x48
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	615a      	str	r2, [r3, #20]
 80039b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	615a      	str	r2, [r3, #20]
 80039c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80039ca:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <MX_TIM8_Init+0x10c>)
 80039cc:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <MX_TIM8_Init+0x110>)
 80039ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84;
 80039d0:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <MX_TIM8_Init+0x10c>)
 80039d2:	2254      	movs	r2, #84	; 0x54
 80039d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d6:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <MX_TIM8_Init+0x10c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80039dc:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <MX_TIM8_Init+0x10c>)
 80039de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <MX_TIM8_Init+0x10c>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039ea:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <MX_TIM8_Init+0x10c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80039f0:	482a      	ldr	r0, [pc, #168]	; (8003a9c <MX_TIM8_Init+0x10c>)
 80039f2:	f7fe fe49 	bl	8002688 <HAL_TIM_PWM_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 80039fc:	f000 f947 	bl	8003c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4823      	ldr	r0, [pc, #140]	; (8003a9c <MX_TIM8_Init+0x10c>)
 8003a10:	f7ff f9f2 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8003a1a:	f000 f938 	bl	8003c8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a1e:	2360      	movs	r3, #96	; 0x60
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = duty;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3e:	2204      	movs	r2, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4816      	ldr	r0, [pc, #88]	; (8003a9c <MX_TIM8_Init+0x10c>)
 8003a44:	f7fe fe80 	bl	8002748 <HAL_TIM_PWM_ConfigChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003a4e:	f000 f91e 	bl	8003c8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	4619      	mov	r1, r3
 8003a76:	4809      	ldr	r0, [pc, #36]	; (8003a9c <MX_TIM8_Init+0x10c>)
 8003a78:	f7ff fa03 	bl	8002e82 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003a82:	f000 f904 	bl	8003c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8003a86:	2104      	movs	r1, #4
 8003a88:	4804      	ldr	r0, [pc, #16]	; (8003a9c <MX_TIM8_Init+0x10c>)
 8003a8a:	f7fe fe29 	bl	80026e0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003a8e:	4803      	ldr	r0, [pc, #12]	; (8003a9c <MX_TIM8_Init+0x10c>)
 8003a90:	f000 f9f2 	bl	8003e78 <HAL_TIM_MspPostInit>

}
 8003a94:	bf00      	nop
 8003a96:	3748      	adds	r7, #72	; 0x48
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000048 	.word	0x20000048
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <MX_USART2_UART_Init+0x50>)
 8003aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003aca:	220c      	movs	r2, #12
 8003acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ada:	4805      	ldr	r0, [pc, #20]	; (8003af0 <MX_USART2_UART_Init+0x4c>)
 8003adc:	f7ff fa2a 	bl	8002f34 <HAL_UART_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ae6:	f000 f8d2 	bl	8003c8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200001b0 	.word	0x200001b0
 8003af4:	40004400 	.word	0x40004400

08003af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afe:	f107 0314 	add.w	r3, r7, #20
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	4a4f      	ldr	r2, [pc, #316]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b14:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4a48      	ldr	r2, [pc, #288]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b30:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b4c:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	4a3a      	ldr	r2, [pc, #232]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b68:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <MX_GPIO_Init+0x158>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	607b      	str	r3, [r7, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2160      	movs	r1, #96	; 0x60
 8003b82:	4834      	ldr	r0, [pc, #208]	; (8003c54 <MX_GPIO_Init+0x15c>)
 8003b84:	f7fc ffd6 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2120      	movs	r1, #32
 8003b8c:	4832      	ldr	r0, [pc, #200]	; (8003c58 <MX_GPIO_Init+0x160>)
 8003b8e:	f7fc ffd1 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b98:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <MX_GPIO_Init+0x164>)
 8003b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	482e      	ldr	r0, [pc, #184]	; (8003c60 <MX_GPIO_Init+0x168>)
 8003ba8:	f7fc fe32 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bac:	2302      	movs	r3, #2
 8003bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <MX_GPIO_Init+0x16c>)
 8003bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4828      	ldr	r0, [pc, #160]	; (8003c60 <MX_GPIO_Init+0x168>)
 8003bc0:	f7fc fe26 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8003bc4:	2360      	movs	r3, #96	; 0x60
 8003bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	4619      	mov	r1, r3
 8003bda:	481e      	ldr	r0, [pc, #120]	; (8003c54 <MX_GPIO_Init+0x15c>)
 8003bdc:	f7fc fe18 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003be0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003be6:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <MX_GPIO_Init+0x16c>)
 8003be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4817      	ldr	r0, [pc, #92]	; (8003c54 <MX_GPIO_Init+0x15c>)
 8003bf6:	f7fc fe0b 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4811      	ldr	r0, [pc, #68]	; (8003c58 <MX_GPIO_Init+0x160>)
 8003c12:	f7fc fdfd 	bl	8000810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2007      	movs	r0, #7
 8003c1c:	f7fc fdc1 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003c20:	2007      	movs	r0, #7
 8003c22:	f7fc fdda 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	2017      	movs	r0, #23
 8003c2c:	f7fc fdb9 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c30:	2017      	movs	r0, #23
 8003c32:	f7fc fdd2 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2028      	movs	r0, #40	; 0x28
 8003c3c:	f7fc fdb1 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c40:	2028      	movs	r0, #40	; 0x28
 8003c42:	f7fc fdca 	bl	80007da <HAL_NVIC_EnableIRQ>

}
 8003c46:	bf00      	nop
 8003c48:	3728      	adds	r7, #40	; 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40020000 	.word	0x40020000
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	10210000 	.word	0x10210000
 8003c60:	40020800 	.word	0x40020800
 8003c64:	10110000 	.word	0x10110000

08003c68 <set_RGB>:

/* USER CODE BEGIN 4 */
void set_RGB(int red, int green, int blue)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
	MX_TIM4_Init(red);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff fe2d 	bl	80038d4 <MX_TIM4_Init>
	MX_TIM3_Init(green);
 8003c7a:	68b8      	ldr	r0, [r7, #8]
 8003c7c:	f7ff fdcc 	bl	8003818 <MX_TIM3_Init>
	MX_TIM8_Init(blue);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe85 	bl	8003990 <MX_TIM8_Init>
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003cda:	2007      	movs	r0, #7
 8003cdc:	f7fc fd56 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800

08003cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_I2C_MspInit+0x84>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d12c      	bne.n	8003d68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <HAL_I2C_MspInit+0x88>)
 8003d14:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_I2C_MspInit+0x88>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_I2C_MspInit+0x88>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d30:	2312      	movs	r3, #18
 8003d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d34:	2301      	movs	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4619      	mov	r1, r3
 8003d46:	480c      	ldr	r0, [pc, #48]	; (8003d78 <HAL_I2C_MspInit+0x8c>)
 8003d48:	f7fc fd62 	bl	8000810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <HAL_I2C_MspInit+0x88>)
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_I2C_MspInit+0x88>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_I2C_MspInit+0x88>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d68:	bf00      	nop
 8003d6a:	3728      	adds	r7, #40	; 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40005400 	.word	0x40005400
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40020400 	.word	0x40020400

08003d7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_RTC_MspInit+0x30>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10a      	bne.n	8003da4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_RTC_MspInit+0x34>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003d94:	2200      	movs	r2, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	2029      	movs	r0, #41	; 0x29
 8003d9a:	f7fc fd02 	bl	80007a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003d9e:	2029      	movs	r0, #41	; 0x29
 8003da0:	f7fc fd1b 	bl	80007da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40002800 	.word	0x40002800
 8003db0:	42470e3c 	.word	0x42470e3c

08003db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003de2:	e03a      	b.n	8003e5a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_TIM_PWM_MspInit+0xb8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
}
 8003e0a:	e026      	b.n	8003e5a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <HAL_TIM_PWM_MspInit+0xbc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	e012      	b.n	8003e5a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <HAL_TIM_PWM_MspInit+0xc0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10d      	bne.n	8003e5a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e44:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_TIM_PWM_MspInit+0xb4>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40010400 	.word	0x40010400

08003e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	; 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	f107 031c 	add.w	r3, r7, #28
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d11f      	bne.n	8003eda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	4a46      	ldr	r2, [pc, #280]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003ea0:	4b45      	ldr	r3, [pc, #276]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ecc:	f107 031c 	add.w	r3, r7, #28
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	483a      	ldr	r0, [pc, #232]	; (8003fbc <HAL_TIM_MspPostInit+0x144>)
 8003ed4:	f7fc fc9c 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003ed8:	e06a      	b.n	8003fb0 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a38      	ldr	r2, [pc, #224]	; (8003fc0 <HAL_TIM_MspPostInit+0x148>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d11e      	bne.n	8003f22 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	4a33      	ldr	r2, [pc, #204]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003eea:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f10:	2302      	movs	r3, #2
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	f107 031c 	add.w	r3, r7, #28
 8003f18:	4619      	mov	r1, r3
 8003f1a:	482a      	ldr	r0, [pc, #168]	; (8003fc4 <HAL_TIM_MspPostInit+0x14c>)
 8003f1c:	f7fc fc78 	bl	8000810 <HAL_GPIO_Init>
}
 8003f20:	e046      	b.n	8003fb0 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <HAL_TIM_MspPostInit+0x150>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d11e      	bne.n	8003f6a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003f32:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f48:	2340      	movs	r3, #64	; 0x40
 8003f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	4619      	mov	r1, r3
 8003f62:	4816      	ldr	r0, [pc, #88]	; (8003fbc <HAL_TIM_MspPostInit+0x144>)
 8003f64:	f7fc fc54 	bl	8000810 <HAL_GPIO_Init>
}
 8003f68:	e022      	b.n	8003fb0 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_TIM_MspPostInit+0x154>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d11d      	bne.n	8003fb0 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f043 0304 	orr.w	r3, r3, #4
 8003f82:	6313      	str	r3, [r2, #48]	; 0x30
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_TIM_MspPostInit+0x140>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fa4:	f107 031c 	add.w	r3, r7, #28
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4809      	ldr	r0, [pc, #36]	; (8003fd0 <HAL_TIM_MspPostInit+0x158>)
 8003fac:	f7fc fc30 	bl	8000810 <HAL_GPIO_Init>
}
 8003fb0:	bf00      	nop
 8003fb2:	3730      	adds	r7, #48	; 0x30
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40010400 	.word	0x40010400
 8003fd0:	40020800 	.word	0x40020800

08003fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 0314 	add.w	r3, r7, #20
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_UART_MspInit+0x84>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d12b      	bne.n	800404e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_UART_MspInit+0x88>)
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_UART_MspInit+0x88>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004004:	6413      	str	r3, [r2, #64]	; 0x40
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_UART_MspInit+0x88>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4a11      	ldr	r2, [pc, #68]	; (800405c <HAL_UART_MspInit+0x88>)
 8004018:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_UART_MspInit+0x88>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <HAL_UART_MspInit+0x88>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800402e:	230c      	movs	r3, #12
 8004030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004036:	2301      	movs	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403a:	2303      	movs	r3, #3
 800403c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800403e:	2307      	movs	r3, #7
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004042:	f107 0314 	add.w	r3, r7, #20
 8004046:	4619      	mov	r1, r3
 8004048:	4805      	ldr	r0, [pc, #20]	; (8004060 <HAL_UART_MspInit+0x8c>)
 800404a:	f7fc fbe1 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800404e:	bf00      	nop
 8004050:	3728      	adds	r7, #40	; 0x28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40004400 	.word	0x40004400
 800405c:	40023800 	.word	0x40023800
 8004060:	40020000 	.word	0x40020000

08004064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004076:	e7fe      	b.n	8004076 <HardFault_Handler+0x4>

08004078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800407c:	e7fe      	b.n	800407c <MemManage_Handler+0x4>

0800407e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004082:	e7fe      	b.n	8004082 <BusFault_Handler+0x4>

08004084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004088:	e7fe      	b.n	8004088 <UsageFault_Handler+0x4>

0800408a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040b8:	f7fc fa7e 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}

080040c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  // TODO what happens when button is pushed?
  *pflag = 1;
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <EXTI1_IRQHandler+0x18>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]


  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80040cc:	2002      	movs	r0, #2
 80040ce:	f7fc fd4b 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000008 	.word	0x20000008

080040dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <EXTI9_5_IRQHandler+0x40>)
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <EXTI9_5_IRQHandler+0x18>
	  //TODO what happens when the rotary encoder is turned and pulls potential of this pin to ground?
	  //TODO check for set flag in main (polling) and call menu function if flag is set
	  *pflag = 2;
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <EXTI9_5_IRQHandler+0x44>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2202      	movs	r2, #2
 80040f2:	601a      	str	r2, [r3, #0]
  }

  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <EXTI9_5_IRQHandler+0x40>)
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <EXTI9_5_IRQHandler+0x2c>
	  //TODO what happens when the rotary encoder is turned and pulls potential of this pin to ground?
	  //TODO check for set flag in main (polling) and call menu function if flag is set
	  *pflag = 3;
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <EXTI9_5_IRQHandler+0x44>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2203      	movs	r2, #3
 8004106:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 8004108:	f44f 7080 	mov.w	r0, #256	; 0x100
 800410c:	f7fc fd2c 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 8004110:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004114:	f7fc fd28 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40013c00 	.word	0x40013c00
 8004120:	20000008 	.word	0x20000008

08004124 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004128:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800412c:	f7fc fd1c 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}

08004134 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004138:	4802      	ldr	r0, [pc, #8]	; (8004144 <RTC_Alarm_IRQHandler+0x10>)
 800413a:	f7fe f9bb 	bl	80024b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000154 	.word	0x20000154

08004148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800414c:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <SystemInit+0x60>)
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <SystemInit+0x60>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800415c:	4a13      	ldr	r2, [pc, #76]	; (80041ac <SystemInit+0x64>)
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <SystemInit+0x64>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <SystemInit+0x64>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800416e:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <SystemInit+0x64>)
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <SystemInit+0x64>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <SystemInit+0x64>)
 8004180:	4a0b      	ldr	r2, [pc, #44]	; (80041b0 <SystemInit+0x68>)
 8004182:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004184:	4a09      	ldr	r2, [pc, #36]	; (80041ac <SystemInit+0x64>)
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <SystemInit+0x64>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <SystemInit+0x64>)
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <SystemInit+0x60>)
 8004198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800419c:	609a      	str	r2, [r3, #8]
#endif
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	24003010 	.word	0x24003010

080041b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041ba:	e003      	b.n	80041c4 <LoopCopyDataInit>

080041bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041c2:	3104      	adds	r1, #4

080041c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041c4:	480b      	ldr	r0, [pc, #44]	; (80041f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041cc:	d3f6      	bcc.n	80041bc <CopyDataInit>
  ldr  r2, =_sbss
 80041ce:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041d0:	e002      	b.n	80041d8 <LoopFillZerobss>

080041d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041d4:	f842 3b04 	str.w	r3, [r2], #4

080041d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041dc:	d3f9      	bcc.n	80041d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041de:	f7ff ffb3 	bl	8004148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041e2:	f000 f811 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041e6:	f7ff f90f 	bl	8003408 <main>
  bx  lr    
 80041ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041f0:	080042a0 	.word	0x080042a0
  ldr  r0, =_sdata
 80041f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041f8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80041fc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8004200:	20000218 	.word	0x20000218

08004204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004204:	e7fe      	b.n	8004204 <ADC_IRQHandler>
	...

<<<<<<< HEAD
0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4e0d      	ldr	r6, [pc, #52]	; (8004254 <__libc_init_array+0x38>)
 8004220:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004222:	1ba4      	subs	r4, r4, r6
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	2500      	movs	r5, #0
 8004228:	42a5      	cmp	r5, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	4e0b      	ldr	r6, [pc, #44]	; (800425c <__libc_init_array+0x40>)
 800422e:	4c0c      	ldr	r4, [pc, #48]	; (8004260 <__libc_init_array+0x44>)
 8004230:	f000 f820 	bl	8004274 <_init>
 8004234:	1ba4      	subs	r4, r4, r6
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	2500      	movs	r5, #0
 800423a:	42a5      	cmp	r5, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004244:	4798      	blx	r3
 8004246:	3501      	adds	r5, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800424e:	4798      	blx	r3
 8004250:	3501      	adds	r5, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	080042ac 	.word	0x080042ac
 8004258:	080042ac 	.word	0x080042ac
 800425c:	080042ac 	.word	0x080042ac
 8004260:	080042b0 	.word	0x080042b0

08004264 <memset>:
 8004264:	4402      	add	r2, r0
 8004266:	4603      	mov	r3, r0
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	f803 1b01 	strb.w	r1, [r3], #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <_init>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr

08004280 <_fini>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr
=======

Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b2c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002cf0  08002cf0  00012cf0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  2000000c  08002d54  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e4  08002d54  000201e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b879  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002fbb  00000000  00000000  0003b8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a9c5  00000000  00000000  0003e870  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000cf8  00000000  00000000  00049238  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001118  00000000  00000000  00049f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007c9e  00000000  00000000  0004b048  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005091  00000000  00000000  00052ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00057d77  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002864  00000000  00000000  00057df4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002cd8 	.word	0x08002cd8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002cd8 	.word	0x08002cd8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f8a8 	bl	8000680 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f85e 	bl	8000600 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f82f 	bl	80005dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f002 f996 	bl	80028b4 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	bf1c      	itt	ne
 80005c0:	4b05      	ldrne	r3, [pc, #20]	; (80005d8 <HAL_Delay+0x24>)
 80005c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005c6:	bf18      	it	ne
 80005c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	f7ff ffed 	bl	80005a8 <HAL_GetTick>
 80005ce:	1b40      	subs	r0, r0, r5
 80005d0:	4284      	cmp	r4, r0
 80005d2:	d8fa      	bhi.n	80005ca <HAL_Delay+0x16>
  {
  }
}
 80005d4:	bd38      	pop	{r3, r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005ec:	0200      	lsls	r0, r0, #8
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f8:	60d3      	str	r3, [r2, #12]
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	68dc      	ldr	r4, [r3, #12]
 8000606:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000610:	2b04      	cmp	r3, #4
 8000612:	bf28      	it	cs
 8000614:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	f04f 0501 	mov.w	r5, #1
 800061c:	fa05 f303 	lsl.w	r3, r5, r3
 8000620:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000624:	bf8c      	ite	hi
 8000626:	3c03      	subhi	r4, #3
 8000628:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062a:	4019      	ands	r1, r3
 800062c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062e:	fa05 f404 	lsl.w	r4, r5, r4
 8000632:	3c01      	subs	r4, #1
 8000634:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000636:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	ea42 0201 	orr.w	r2, r2, r1
 800063c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	bfaf      	iteee	ge
 8000642:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	f000 000f 	andlt.w	r0, r0, #15
 800064a:	4b06      	ldrlt	r3, [pc, #24]	; (8000664 <HAL_NVIC_SetPriority+0x64>)
 800064c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	bfa5      	ittet	ge
 8000650:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000654:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	e000ed14 	.word	0xe000ed14

08000668 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000668:	0942      	lsrs	r2, r0, #5
 800066a:	2301      	movs	r3, #1
 800066c:	f000 001f 	and.w	r0, r0, #31
 8000670:	fa03 f000 	lsl.w	r0, r3, r0
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <HAL_NVIC_EnableIRQ+0x14>)
 8000676:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100

08000680 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	3801      	subs	r0, #1
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000686:	d20a      	bcs.n	800069e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000696:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e010 	.word	0xe000e010
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000858 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b8:	4a65      	ldr	r2, [pc, #404]	; (8000850 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ba:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800085c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006be:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006c0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006c2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006c8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006cc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006d0:	45b6      	cmp	lr, r6
 80006d2:	f040 80aa 	bne.w	800082a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006d6:	684c      	ldr	r4, [r1, #4]
 80006d8:	f024 0710 	bic.w	r7, r4, #16
 80006dc:	2f02      	cmp	r7, #2
 80006de:	d116      	bne.n	800070e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006e0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006e4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006e8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006ec:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006f4:	f04f 0c0f 	mov.w	ip, #15
 80006f8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006fc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000700:	690d      	ldr	r5, [r1, #16]
 8000702:	fa05 f50b 	lsl.w	r5, r5, fp
 8000706:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800070a:	f8ca 5020 	str.w	r5, [sl, #32]
 800070e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000712:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000714:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000718:	fa05 f50a 	lsl.w	r5, r5, sl
 800071c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000722:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000726:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000730:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000732:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000736:	d811      	bhi.n	800075c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000738:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800073a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800073e:	68cf      	ldr	r7, [r1, #12]
 8000740:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000744:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000748:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800074a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800074c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000750:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000754:	409f      	lsls	r7, r3
 8000756:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800075a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800075c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800075e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000760:	688f      	ldr	r7, [r1, #8]
 8000762:	fa07 f70a 	lsl.w	r7, r7, sl
 8000766:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000768:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800076a:	00e5      	lsls	r5, r4, #3
 800076c:	d55d      	bpl.n	800082a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	f04f 0b00 	mov.w	fp, #0
 8000772:	f8cd b00c 	str.w	fp, [sp, #12]
 8000776:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077a:	4d36      	ldr	r5, [pc, #216]	; (8000854 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000780:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000784:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000788:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800078c:	9703      	str	r7, [sp, #12]
 800078e:	9f03      	ldr	r7, [sp, #12]
 8000790:	f023 0703 	bic.w	r7, r3, #3
 8000794:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000798:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007a8:	f04f 0e0f 	mov.w	lr, #15
 80007ac:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b6:	d03f      	beq.n	8000838 <HAL_GPIO_Init+0x18c>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d03d      	beq.n	800083c <HAL_GPIO_Init+0x190>
 80007c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d03b      	beq.n	8000840 <HAL_GPIO_Init+0x194>
 80007c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	d039      	beq.n	8000844 <HAL_GPIO_Init+0x198>
 80007d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d4:	42a8      	cmp	r0, r5
 80007d6:	d037      	beq.n	8000848 <HAL_GPIO_Init+0x19c>
 80007d8:	4548      	cmp	r0, r9
 80007da:	d037      	beq.n	800084c <HAL_GPIO_Init+0x1a0>
 80007dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007e0:	42a8      	cmp	r0, r5
 80007e2:	bf14      	ite	ne
 80007e4:	2507      	movne	r5, #7
 80007e6:	2506      	moveq	r5, #6
 80007e8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ec:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007f2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007f4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007fa:	bf0c      	ite	eq
 80007fc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fe:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000800:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000802:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000804:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf0c      	ite	eq
 800080a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800080c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800080e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000810:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000812:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000816:	bf0c      	ite	eq
 8000818:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800081a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800081c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800081e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000820:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000822:	bf54      	ite	pl
 8000824:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000826:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000828:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	3301      	adds	r3, #1
 800082c:	2b10      	cmp	r3, #16
 800082e:	f47f af48 	bne.w	80006c2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000832:	b005      	add	sp, #20
 8000834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000838:	465d      	mov	r5, fp
 800083a:	e7d5      	b.n	80007e8 <HAL_GPIO_Init+0x13c>
 800083c:	2501      	movs	r5, #1
 800083e:	e7d3      	b.n	80007e8 <HAL_GPIO_Init+0x13c>
 8000840:	2502      	movs	r5, #2
 8000842:	e7d1      	b.n	80007e8 <HAL_GPIO_Init+0x13c>
 8000844:	2503      	movs	r5, #3
 8000846:	e7cf      	b.n	80007e8 <HAL_GPIO_Init+0x13c>
 8000848:	2504      	movs	r5, #4
 800084a:	e7cd      	b.n	80007e8 <HAL_GPIO_Init+0x13c>
 800084c:	2505      	movs	r5, #5
 800084e:	e7cb      	b.n	80007e8 <HAL_GPIO_Init+0x13c>
 8000850:	40013c00 	.word	0x40013c00
 8000854:	40020000 	.word	0x40020000
 8000858:	40023800 	.word	0x40023800
 800085c:	40021400 	.word	0x40021400

08000860 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000860:	b10a      	cbz	r2, 8000866 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000862:	6181      	str	r1, [r0, #24]
 8000864:	4770      	bx	lr
 8000866:	0409      	lsls	r1, r1, #16
 8000868:	e7fb      	b.n	8000862 <HAL_GPIO_WritePin+0x2>

0800086a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800086a:	4770      	bx	lr

0800086c <HAL_GPIO_EXTI_IRQHandler>:
{
 800086c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000870:	6959      	ldr	r1, [r3, #20]
 8000872:	4201      	tst	r1, r0
 8000874:	d002      	beq.n	800087c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000876:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000878:	f7ff fff7 	bl	800086a <HAL_GPIO_EXTI_Callback>
 800087c:	bd08      	pop	{r3, pc}
 800087e:	bf00      	nop
 8000880:	40013c00 	.word	0x40013c00

08000884 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000884:	6802      	ldr	r2, [r0, #0]
 8000886:	6953      	ldr	r3, [r2, #20]
 8000888:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800088c:	d00d      	beq.n	80008aa <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800088e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000892:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000894:	2304      	movs	r3, #4
 8000896:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000898:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800089e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80008a2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80008a6:	2001      	movs	r0, #1
 80008a8:	4770      	bx	lr
  }
  return HAL_OK;
 80008aa:	4618      	mov	r0, r3
}
 80008ac:	4770      	bx	lr

080008ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80008ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008b2:	4604      	mov	r4, r0
 80008b4:	4617      	mov	r7, r2
 80008b6:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80008b8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80008bc:	b28e      	uxth	r6, r1
 80008be:	6825      	ldr	r5, [r4, #0]
 80008c0:	f1b8 0f01 	cmp.w	r8, #1
 80008c4:	bf0c      	ite	eq
 80008c6:	696b      	ldreq	r3, [r5, #20]
 80008c8:	69ab      	ldrne	r3, [r5, #24]
 80008ca:	ea36 0303 	bics.w	r3, r6, r3
 80008ce:	bf14      	ite	ne
 80008d0:	2001      	movne	r0, #1
 80008d2:	2000      	moveq	r0, #0
 80008d4:	b908      	cbnz	r0, 80008da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80008d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008da:	696b      	ldr	r3, [r5, #20]
 80008dc:	055a      	lsls	r2, r3, #21
 80008de:	d512      	bpl.n	8000906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008e8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80008ec:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80008ee:	2304      	movs	r3, #4
 80008f0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80008f2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80008f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80008fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000900:	2001      	movs	r0, #1
 8000902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000906:	1c7b      	adds	r3, r7, #1
 8000908:	d0d9      	beq.n	80008be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800090a:	b94f      	cbnz	r7, 8000920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800090c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800090e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000910:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000912:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000916:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800091a:	2003      	movs	r0, #3
 800091c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000920:	f7ff fe42 	bl	80005a8 <HAL_GetTick>
 8000924:	eba0 0009 	sub.w	r0, r0, r9
 8000928:	4287      	cmp	r7, r0
 800092a:	d2c8      	bcs.n	80008be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800092c:	e7ee      	b.n	800090c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800092e <I2C_WaitOnFlagUntilTimeout>:
{
 800092e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000932:	9e08      	ldr	r6, [sp, #32]
 8000934:	4604      	mov	r4, r0
 8000936:	4690      	mov	r8, r2
 8000938:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800093a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800093e:	b28d      	uxth	r5, r1
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	f1b9 0f01 	cmp.w	r9, #1
 8000946:	bf0c      	ite	eq
 8000948:	695b      	ldreq	r3, [r3, #20]
 800094a:	699b      	ldrne	r3, [r3, #24]
 800094c:	ea35 0303 	bics.w	r3, r5, r3
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	4543      	cmp	r3, r8
 8000958:	d002      	beq.n	8000960 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800095a:	2000      	movs	r0, #0
}
 800095c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000960:	1c7b      	adds	r3, r7, #1
 8000962:	d0ed      	beq.n	8000940 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000964:	b95f      	cbnz	r7, 800097e <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000966:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000968:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800096a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800096c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000970:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000974:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000976:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800097a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800097e:	f7ff fe13 	bl	80005a8 <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	4287      	cmp	r7, r0
 8000986:	d2db      	bcs.n	8000940 <I2C_WaitOnFlagUntilTimeout+0x12>
 8000988:	e7ed      	b.n	8000966 <I2C_WaitOnFlagUntilTimeout+0x38>

0800098a <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800098a:	b570      	push	{r4, r5, r6, lr}
 800098c:	4604      	mov	r4, r0
 800098e:	460d      	mov	r5, r1
 8000990:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	061b      	lsls	r3, r3, #24
 8000998:	d501      	bpl.n	800099e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800099a:	2000      	movs	r0, #0
 800099c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800099e:	4620      	mov	r0, r4
 80009a0:	f7ff ff70 	bl	8000884 <I2C_IsAcknowledgeFailed>
 80009a4:	b9a8      	cbnz	r0, 80009d2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80009a6:	1c6a      	adds	r2, r5, #1
 80009a8:	d0f3      	beq.n	8000992 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80009aa:	b965      	cbnz	r5, 80009c6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80009b4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80009ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80009be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80009c2:	2003      	movs	r0, #3
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80009c6:	f7ff fdef 	bl	80005a8 <HAL_GetTick>
 80009ca:	1b80      	subs	r0, r0, r6
 80009cc:	4285      	cmp	r5, r0
 80009ce:	d2e0      	bcs.n	8000992 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80009d0:	e7ec      	b.n	80009ac <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80009d2:	2001      	movs	r0, #1
}
 80009d4:	bd70      	pop	{r4, r5, r6, pc}

080009d6 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80009d6:	b570      	push	{r4, r5, r6, lr}
 80009d8:	4604      	mov	r4, r0
 80009da:	460d      	mov	r5, r1
 80009dc:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	075b      	lsls	r3, r3, #29
 80009e4:	d501      	bpl.n	80009ea <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80009e6:	2000      	movs	r0, #0
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80009ea:	4620      	mov	r0, r4
 80009ec:	f7ff ff4a 	bl	8000884 <I2C_IsAcknowledgeFailed>
 80009f0:	b9a8      	cbnz	r0, 8000a1e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80009f2:	1c6a      	adds	r2, r5, #1
 80009f4:	d0f3      	beq.n	80009de <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80009f6:	b965      	cbnz	r5, 8000a12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000a00:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000a12:	f7ff fdc9 	bl	80005a8 <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	4285      	cmp	r5, r0
 8000a1a:	d2e0      	bcs.n	80009de <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000a1c:	e7ec      	b.n	80009f8 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
}
 8000a20:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a24 <HAL_I2C_Init>:
{
 8000a24:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8000a26:	4604      	mov	r4, r0
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d062      	beq.n	8000af2 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000a2c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000a30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a34:	b91b      	cbnz	r3, 8000a3e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000a36:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000a3a:	f001 ff5b 	bl	80028f4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000a3e:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a40:	4e2d      	ldr	r6, [pc, #180]	; (8000af8 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000a42:	4d2e      	ldr	r5, [pc, #184]	; (8000afc <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a44:	2324      	movs	r3, #36	; 0x24
 8000a46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000a52:	f000 f9c5 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a56:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000a58:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000a5a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a5e:	42b3      	cmp	r3, r6
 8000a60:	bf84      	itt	hi
 8000a62:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000a66:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000a68:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a6a:	bf91      	iteee	ls
 8000a6c:	1c69      	addls	r1, r5, #1
 8000a6e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000a72:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000a76:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a78:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a7a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a7c:	d821      	bhi.n	8000ac2 <HAL_I2C_Init+0x9e>
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a84:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	bf98      	it	ls
 8000a8c:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a8e:	6a21      	ldr	r1, [r4, #32]
 8000a90:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a92:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a94:	430b      	orrs	r3, r1
 8000a96:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000a98:	68e1      	ldr	r1, [r4, #12]
 8000a9a:	6923      	ldr	r3, [r4, #16]
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000aa0:	69a1      	ldr	r1, [r4, #24]
 8000aa2:	6963      	ldr	r3, [r4, #20]
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ab0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000ab2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ab4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ab6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000aba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000abc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ac2:	68a1      	ldr	r1, [r4, #8]
 8000ac4:	b949      	cbnz	r1, 8000ada <HAL_I2C_Init+0xb6>
 8000ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000aca:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ace:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ad2:	b163      	cbz	r3, 8000aee <HAL_I2C_Init+0xca>
 8000ad4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000ad8:	e7d9      	b.n	8000a8e <HAL_I2C_Init+0x6a>
 8000ada:	2119      	movs	r1, #25
 8000adc:	434b      	muls	r3, r1
 8000ade:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ae2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ae6:	b113      	cbz	r3, 8000aee <HAL_I2C_Init+0xca>
 8000ae8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000aec:	e7cf      	b.n	8000a8e <HAL_I2C_Init+0x6a>
 8000aee:	2001      	movs	r0, #1
 8000af0:	e7cd      	b.n	8000a8e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000af2:	2001      	movs	r0, #1
}
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
 8000af6:	bf00      	nop
 8000af8:	000186a0 	.word	0x000186a0
 8000afc:	000f4240 	.word	0x000f4240

08000b00 <HAL_I2C_Master_Transmit>:
{
 8000b00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b04:	4604      	mov	r4, r0
 8000b06:	461f      	mov	r7, r3
 8000b08:	460d      	mov	r5, r1
 8000b0a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000b0c:	f7ff fd4c 	bl	80005a8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000b10:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000b14:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000b16:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000b18:	d004      	beq.n	8000b24 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000b1a:	2502      	movs	r5, #2
}
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	b004      	add	sp, #16
 8000b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b24:	9000      	str	r0, [sp, #0]
 8000b26:	2319      	movs	r3, #25
 8000b28:	2201      	movs	r2, #1
 8000b2a:	495d      	ldr	r1, [pc, #372]	; (8000ca0 <HAL_I2C_Master_Transmit+0x1a0>)
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff fefe 	bl	800092e <I2C_WaitOnFlagUntilTimeout>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d1f1      	bne.n	8000b1a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000b36:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d0ed      	beq.n	8000b1a <HAL_I2C_Master_Transmit+0x1a>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000b4a:	bf5e      	ittt	pl
 8000b4c:	681a      	ldrpl	r2, [r3, #0]
 8000b4e:	f042 0201 	orrpl.w	r2, r2, #1
 8000b52:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b5a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b5c:	2221      	movs	r2, #33	; 0x21
 8000b5e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b62:	2210      	movs	r2, #16
 8000b64:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b6c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000b70:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b72:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000b74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b76:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000b78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000b7a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000b7e:	2a04      	cmp	r2, #4
 8000b80:	d004      	beq.n	8000b8c <HAL_I2C_Master_Transmit+0x8c>
 8000b82:	2a01      	cmp	r2, #1
 8000b84:	d002      	beq.n	8000b8c <HAL_I2C_Master_Transmit+0x8c>
 8000b86:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000b8a:	d104      	bne.n	8000b96 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	e002      	b.n	8000b9c <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000b96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000b98:	2a12      	cmp	r2, #18
 8000b9a:	d0f7      	beq.n	8000b8c <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b9c:	9600      	str	r6, [sp, #0]
 8000b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f7ff fec1 	bl	800092e <I2C_WaitOnFlagUntilTimeout>
 8000bac:	bb28      	cbnz	r0, 8000bfa <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bae:	6923      	ldr	r3, [r4, #16]
 8000bb0:	6822      	ldr	r2, [r4, #0]
 8000bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bb6:	d112      	bne.n	8000bde <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000bb8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000bbc:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bbe:	4633      	mov	r3, r6
 8000bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000bc2:	4938      	ldr	r1, [pc, #224]	; (8000ca4 <HAL_I2C_Master_Transmit+0x1a4>)
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff fe72 	bl	80008ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bca:	4605      	mov	r5, r0
 8000bcc:	b9a0      	cbnz	r0, 8000bf8 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	9003      	str	r0, [sp, #12]
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	9203      	str	r2, [sp, #12]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000bdc:	e050      	b.n	8000c80 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000bde:	11eb      	asrs	r3, r5, #7
 8000be0:	f003 0306 	and.w	r3, r3, #6
 8000be4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000be8:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000bea:	492f      	ldr	r1, [pc, #188]	; (8000ca8 <HAL_I2C_Master_Transmit+0x1a8>)
 8000bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000bee:	4633      	mov	r3, r6
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f7ff fe5c 	bl	80008ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bf6:	b148      	cbz	r0, 8000c0c <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	d107      	bne.n	8000c14 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000c04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000c08:	2501      	movs	r5, #1
 8000c0a:	e787      	b.n	8000b1c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	b2ed      	uxtb	r5, r5
 8000c10:	611d      	str	r5, [r3, #16]
 8000c12:	e7d4      	b.n	8000bbe <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000c14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000c18:	2503      	movs	r5, #3
 8000c1a:	e77f      	b.n	8000b1c <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c1c:	4632      	mov	r2, r6
 8000c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c20:	4620      	mov	r0, r4
 8000c22:	f7ff feb2 	bl	800098a <I2C_WaitOnTXEFlagUntilTimeout>
 8000c26:	b140      	cbz	r0, 8000c3a <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d1f4      	bne.n	8000c18 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e7e6      	b.n	8000c08 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000c3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c3c:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8000c3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000c40:	1c4b      	adds	r3, r1, #1
 8000c42:	6263      	str	r3, [r4, #36]	; 0x24
 8000c44:	780b      	ldrb	r3, [r1, #0]
 8000c46:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000c48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000c50:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000c52:	1e53      	subs	r3, r2, #1
 8000c54:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000c56:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000c58:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000c5a:	d50a      	bpl.n	8000c72 <HAL_I2C_Master_Transmit+0x172>
 8000c5c:	b14b      	cbz	r3, 8000c72 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000c5e:	1c8b      	adds	r3, r1, #2
 8000c60:	6263      	str	r3, [r4, #36]	; 0x24
 8000c62:	784b      	ldrb	r3, [r1, #1]
 8000c64:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000c66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000c6c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000c6e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000c70:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c72:	4632      	mov	r2, r6
 8000c74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c76:	4620      	mov	r0, r4
 8000c78:	f7ff fead 	bl	80009d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d1d3      	bne.n	8000c28 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000c80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1ca      	bne.n	8000c1c <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000c86:	6821      	ldr	r1, [r4, #0]
 8000c88:	680a      	ldr	r2, [r1, #0]
 8000c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c8e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c90:	2220      	movs	r2, #32
 8000c92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000c96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000c9e:	e73d      	b.n	8000b1c <HAL_I2C_Master_Transmit+0x1c>
 8000ca0:	00100002 	.word	0x00100002
 8000ca4:	00010002 	.word	0x00010002
 8000ca8:	00010008 	.word	0x00010008

08000cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cb0:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	b910      	cbnz	r0, 8000cbc <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cbc:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <HAL_RCC_ClockConfig+0x124>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	f002 020f 	and.w	r2, r2, #15
 8000cc4:	428a      	cmp	r2, r1
 8000cc6:	d328      	bcc.n	8000d1a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cc8:	6821      	ldr	r1, [r4, #0]
 8000cca:	078f      	lsls	r7, r1, #30
 8000ccc:	d42d      	bmi.n	8000d2a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cce:	07c8      	lsls	r0, r1, #31
 8000cd0:	d440      	bmi.n	8000d54 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <HAL_RCC_ClockConfig+0x124>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	f002 020f 	and.w	r2, r2, #15
 8000cda:	4295      	cmp	r5, r2
 8000cdc:	d366      	bcc.n	8000dac <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cde:	6822      	ldr	r2, [r4, #0]
 8000ce0:	0751      	lsls	r1, r2, #29
 8000ce2:	d46c      	bmi.n	8000dbe <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ce4:	0713      	lsls	r3, r2, #28
 8000ce6:	d507      	bpl.n	8000cf8 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <HAL_RCC_ClockConfig+0x128>)
 8000cea:	6921      	ldr	r1, [r4, #16]
 8000cec:	6893      	ldr	r3, [r2, #8]
 8000cee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cf2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cf6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cf8:	f000 fa9a 	bl	8001230 <HAL_RCC_GetSysClockFreq>
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <HAL_RCC_ClockConfig+0x128>)
 8000cfe:	4a36      	ldr	r2, [pc, #216]	; (8000dd8 <HAL_RCC_ClockConfig+0x12c>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	40d8      	lsrs	r0, r3
 8000d0a:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <HAL_RCC_ClockConfig+0x130>)
 8000d0c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fc00 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000d14:	2000      	movs	r0, #0
 8000d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d1a:	b2ca      	uxtb	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d1c6      	bne.n	8000cb6 <HAL_RCC_ClockConfig+0xa>
 8000d28:	e7ce      	b.n	8000cc8 <HAL_RCC_ClockConfig+0x1c>
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d2c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d30:	bf1e      	ittt	ne
 8000d32:	689a      	ldrne	r2, [r3, #8]
 8000d34:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d38:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d3a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d3c:	bf42      	ittt	mi
 8000d3e:	689a      	ldrmi	r2, [r3, #8]
 8000d40:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d44:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	68a0      	ldr	r0, [r4, #8]
 8000d4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d4e:	4302      	orrs	r2, r0
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	e7bc      	b.n	8000cce <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d54:	6862      	ldr	r2, [r4, #4]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_RCC_ClockConfig+0x128>)
 8000d58:	2a01      	cmp	r2, #1
 8000d5a:	d11d      	bne.n	8000d98 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d62:	d0a8      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d64:	4e1b      	ldr	r6, [pc, #108]	; (8000dd4 <HAL_RCC_ClockConfig+0x128>)
 8000d66:	68b3      	ldr	r3, [r6, #8]
 8000d68:	f023 0303 	bic.w	r3, r3, #3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d70:	f7ff fc1a 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d74:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d78:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7a:	68b3      	ldr	r3, [r6, #8]
 8000d7c:	6862      	ldr	r2, [r4, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d86:	d0a4      	beq.n	8000cd2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d88:	f7ff fc0e 	bl	80005a8 <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	4540      	cmp	r0, r8
 8000d90:	d9f3      	bls.n	8000d7a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d92:	2003      	movs	r0, #3
}
 8000d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d98:	1e91      	subs	r1, r2, #2
 8000d9a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d9e:	d802      	bhi.n	8000da6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000da4:	e7dd      	b.n	8000d62 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da6:	f013 0f02 	tst.w	r3, #2
 8000daa:	e7da      	b.n	8000d62 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dac:	b2ea      	uxtb	r2, r5
 8000dae:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	429d      	cmp	r5, r3
 8000db8:	f47f af7d 	bne.w	8000cb6 <HAL_RCC_ClockConfig+0xa>
 8000dbc:	e78f      	b.n	8000cde <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dbe:	4905      	ldr	r1, [pc, #20]	; (8000dd4 <HAL_RCC_ClockConfig+0x128>)
 8000dc0:	68e0      	ldr	r0, [r4, #12]
 8000dc2:	688b      	ldr	r3, [r1, #8]
 8000dc4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dc8:	4303      	orrs	r3, r0
 8000dca:	608b      	str	r3, [r1, #8]
 8000dcc:	e78a      	b.n	8000ce4 <HAL_RCC_ClockConfig+0x38>
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	08002d1d 	.word	0x08002d1d
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dee:	6810      	ldr	r0, [r2, #0]
}
 8000df0:	40d8      	lsrs	r0, r3
 8000df2:	4770      	bx	lr
 8000df4:	40023800 	.word	0x40023800
 8000df8:	08002d2d 	.word	0x08002d2d
 8000dfc:	20000008 	.word	0x20000008

08000e00 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e0e:	6810      	ldr	r0, [r2, #0]
}
 8000e10:	40d8      	lsrs	r0, r3
 8000e12:	4770      	bx	lr
 8000e14:	40023800 	.word	0x40023800
 8000e18:	08002d2d 	.word	0x08002d2d
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000e20:	6803      	ldr	r3, [r0, #0]
{
 8000e22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000e26:	f013 0601 	ands.w	r6, r3, #1
{
 8000e2a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000e2c:	d00b      	beq.n	8000e46 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000e2e:	49aa      	ldr	r1, [pc, #680]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000e30:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8000e32:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8000e36:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8000e3a:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000e3c:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000e40:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000e44:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8000e46:	079d      	lsls	r5, r3, #30
 8000e48:	d50b      	bpl.n	8000e62 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000e4a:	48a3      	ldr	r0, [pc, #652]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000e4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000e4e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8000e52:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8000e56:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8000e58:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000e5a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8000e5e:	bf08      	it	eq
 8000e60:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000e62:	f013 0504 	ands.w	r5, r3, #4
 8000e66:	d012      	beq.n	8000e8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e68:	499b      	ldr	r1, [pc, #620]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000e6a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000e6c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000e70:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e74:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000e78:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e7c:	bf18      	it	ne
 8000e7e:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e82:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e86:	bf12      	itee	ne
 8000e88:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8000e8a:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8000e8c:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000e8e:	0718      	lsls	r0, r3, #28
 8000e90:	d50f      	bpl.n	8000eb2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e92:	4891      	ldr	r0, [pc, #580]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e96:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8000e9a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000e9e:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000ea0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000ea4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000ea8:	f000 8109 	beq.w	80010be <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8000eac:	2900      	cmp	r1, #0
 8000eae:	bf08      	it	eq
 8000eb0:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000eb2:	0699      	lsls	r1, r3, #26
 8000eb4:	d533      	bpl.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	4b87      	ldr	r3, [pc, #540]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000ebc:	4f87      	ldr	r7, [pc, #540]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ed8:	f7ff fb66 	bl	80005a8 <HAL_GetTick>
 8000edc:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	05da      	lsls	r2, r3, #23
 8000ee2:	f140 80ee 	bpl.w	80010c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ee6:	4f7c      	ldr	r7, [pc, #496]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000eea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000eee:	f040 80fb 	bne.w	80010e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ef4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000ef8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000efc:	4a76      	ldr	r2, [pc, #472]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000efe:	f040 8116 	bne.w	800112e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8000f02:	6891      	ldr	r1, [r2, #8]
 8000f04:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000f08:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000f0c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000f10:	4301      	orrs	r1, r0
 8000f12:	6091      	str	r1, [r2, #8]
 8000f14:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000f22:	bf42      	ittt	mi
 8000f24:	4b6e      	ldrmi	r3, [pc, #440]	; (80010e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8000f26:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8000f2a:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	061a      	lsls	r2, r3, #24
 8000f30:	d508      	bpl.n	8000f44 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8000f32:	4969      	ldr	r1, [pc, #420]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000f34:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000f36:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000f3a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000f44:	065f      	lsls	r7, r3, #25
 8000f46:	d508      	bpl.n	8000f5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000f48:	4963      	ldr	r1, [pc, #396]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000f4a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000f4c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000f50:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000f54:	4302      	orrs	r2, r0
 8000f56:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000f5a:	05d8      	lsls	r0, r3, #23
 8000f5c:	d50c      	bpl.n	8000f78 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000f5e:	485e      	ldr	r0, [pc, #376]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000f60:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000f62:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8000f66:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000f6a:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8000f6c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000f70:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8000f74:	bf08      	it	eq
 8000f76:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8000f78:	0599      	lsls	r1, r3, #22
 8000f7a:	d508      	bpl.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8000f7c:	4956      	ldr	r1, [pc, #344]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000f7e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000f80:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000f84:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000f88:	4302      	orrs	r2, r0
 8000f8a:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8000f8e:	055a      	lsls	r2, r3, #21
 8000f90:	f100 80d1 	bmi.w	8001136 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8000f94:	2e01      	cmp	r6, #1
 8000f96:	f040 80dc 	bne.w	8001152 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8000f9a:	4e52      	ldr	r6, [pc, #328]	; (80010e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000f9c:	4f4e      	ldr	r7, [pc, #312]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000fa2:	f7ff fb01 	bl	80005a8 <HAL_GetTick>
 8000fa6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	f100 8125 	bmi.w	80011fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8000fb0:	6822      	ldr	r2, [r4, #0]
 8000fb2:	07d0      	lsls	r0, r2, #31
 8000fb4:	d501      	bpl.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8000fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fb8:	b11b      	cbz	r3, 8000fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8000fba:	0791      	lsls	r1, r2, #30
 8000fbc:	d515      	bpl.n	8000fea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8000fbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000fc0:	b99b      	cbnz	r3, 8000fea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000fc2:	4945      	ldr	r1, [pc, #276]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000fc4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8000fc8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8000fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8000fd4:	4303      	orrs	r3, r0
 8000fd6:	6860      	ldr	r0, [r4, #4]
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	68a0      	ldr	r0, [r4, #8]
 8000fdc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000fe0:	6960      	ldr	r0, [r4, #20]
 8000fe2:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8000fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8000fea:	0753      	lsls	r3, r2, #29
 8000fec:	d503      	bpl.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8000fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ff4:	d005      	beq.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8000ff6:	0717      	lsls	r7, r2, #28
 8000ff8:	d520      	bpl.n	800103c <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8000ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001000:	d11c      	bne.n	800103c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001002:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001004:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001008:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800100c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001010:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001014:	4303      	orrs	r3, r0
 8001016:	6860      	ldr	r0, [r4, #4]
 8001018:	4303      	orrs	r3, r0
 800101a:	68a0      	ldr	r0, [r4, #8]
 800101c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001020:	6920      	ldr	r0, [r4, #16]
 8001022:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001026:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800102a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800102e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001030:	f020 001f 	bic.w	r0, r0, #31
 8001034:	3b01      	subs	r3, #1
 8001036:	4303      	orrs	r3, r0
 8001038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800103c:	0550      	lsls	r0, r2, #21
 800103e:	d51b      	bpl.n	8001078 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001040:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001046:	d117      	bne.n	8001078 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800104a:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800104c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001050:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001054:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001058:	433b      	orrs	r3, r7
 800105a:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800105c:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8001060:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001062:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8001066:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800106a:	68e1      	ldr	r1, [r4, #12]
 800106c:	0849      	lsrs	r1, r1, #1
 800106e:	3901      	subs	r1, #1
 8001070:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001074:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001078:	0511      	lsls	r1, r2, #20
 800107a:	d511      	bpl.n	80010a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800107c:	6923      	ldr	r3, [r4, #16]
 800107e:	68a2      	ldr	r2, [r4, #8]
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001086:	6862      	ldr	r2, [r4, #4]
 8001088:	4313      	orrs	r3, r2
 800108a:	6962      	ldr	r2, [r4, #20]
 800108c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001090:	68e2      	ldr	r2, [r4, #12]
 8001092:	0852      	lsrs	r2, r2, #1
 8001094:	3a01      	subs	r2, #1
 8001096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800109c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80010a0:	2301      	movs	r3, #1
 80010a2:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80010a4:	f7ff fa80 	bl	80005a8 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80010a8:	4e0b      	ldr	r6, [pc, #44]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 80010aa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80010ac:	6833      	ldr	r3, [r6, #0]
 80010ae:	011a      	lsls	r2, r3, #4
 80010b0:	d453      	bmi.n	800115a <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80010b2:	f7ff fa79 	bl	80005a8 <HAL_GetTick>
 80010b6:	1bc0      	subs	r0, r0, r7
 80010b8:	2802      	cmp	r0, #2
 80010ba:	d9f7      	bls.n	80010ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80010bc:	e008      	b.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 80010be:	2601      	movs	r6, #1
 80010c0:	e6f7      	b.n	8000eb2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fa71 	bl	80005a8 <HAL_GetTick>
 80010c6:	eba0 0008 	sub.w	r0, r0, r8
 80010ca:	2802      	cmp	r0, #2
 80010cc:	f67f af07 	bls.w	8000ede <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 80010d2:	b003      	add	sp, #12
 80010d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000
 80010e0:	424711e0 	.word	0x424711e0
 80010e4:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010ea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80010ee:	4293      	cmp	r3, r2
 80010f0:	f43f aeff 	beq.w	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80010f6:	4a4b      	ldr	r2, [pc, #300]	; (8001224 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001100:	2100      	movs	r1, #0
 8001102:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001104:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001108:	07db      	lsls	r3, r3, #31
 800110a:	f57f aef2 	bpl.w	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 800110e:	f7ff fa4b 	bl	80005a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001116:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800111a:	0798      	lsls	r0, r3, #30
 800111c:	f53f aee9 	bmi.w	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f7ff fa42 	bl	80005a8 <HAL_GetTick>
 8001124:	eba0 0008 	sub.w	r0, r0, r8
 8001128:	4548      	cmp	r0, r9
 800112a:	d9f5      	bls.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800112c:	e7d0      	b.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800112e:	6891      	ldr	r1, [r2, #8]
 8001130:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001134:	e6ed      	b.n	8000f12 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001136:	483c      	ldr	r0, [pc, #240]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001138:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800113a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800113e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001142:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001144:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001148:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800114c:	f47f af22 	bne.w	8000f94 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001150:	e723      	b.n	8000f9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001156:	f43f af20 	beq.w	8000f9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 800115a:	2d01      	cmp	r5, #1
 800115c:	d14b      	bne.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 800115e:	4d33      	ldr	r5, [pc, #204]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001160:	4e31      	ldr	r6, [pc, #196]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001166:	f7ff fa1f 	bl	80005a8 <HAL_GetTick>
 800116a:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800116c:	6833      	ldr	r3, [r6, #0]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	d44b      	bmi.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001172:	6821      	ldr	r1, [r4, #0]
 8001174:	074e      	lsls	r6, r1, #29
 8001176:	d501      	bpl.n	800117c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800117a:	b11b      	cbz	r3, 8001184 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800117c:	0708      	lsls	r0, r1, #28
 800117e:	d51a      	bpl.n	80011b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001182:	b9c3      	cbnz	r3, 80011b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001184:	4a28      	ldr	r2, [pc, #160]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001186:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001188:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800118c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001190:	4303      	orrs	r3, r0
 8001192:	69e0      	ldr	r0, [r4, #28]
 8001194:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001198:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800119a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800119e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80011a2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80011a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80011a8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80011ac:	3801      	subs	r0, #1
 80011ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80011b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80011b6:	05ca      	lsls	r2, r1, #23
 80011b8:	d514      	bpl.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80011ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011c0:	d110      	bne.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80011c2:	4919      	ldr	r1, [pc, #100]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80011c4:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80011c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80011ca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80011ce:	4313      	orrs	r3, r2
 80011d0:	69e2      	ldr	r2, [r4, #28]
 80011d2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011d6:	6a22      	ldr	r2, [r4, #32]
 80011d8:	0852      	lsrs	r2, r2, #1
 80011da:	3a01      	subs	r2, #1
 80011dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80011e4:	2301      	movs	r3, #1
 80011e6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80011e8:	f7ff f9de 	bl	80005a8 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80011ec:	4c0e      	ldr	r4, [pc, #56]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 80011ee:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	d50f      	bpl.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 80011f6:	2000      	movs	r0, #0
 80011f8:	e76b      	b.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80011fa:	f7ff f9d5 	bl	80005a8 <HAL_GetTick>
 80011fe:	eba0 0008 	sub.w	r0, r0, r8
 8001202:	2802      	cmp	r0, #2
 8001204:	f67f aed0 	bls.w	8000fa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001208:	e762      	b.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800120a:	f7ff f9cd 	bl	80005a8 <HAL_GetTick>
 800120e:	1bc0      	subs	r0, r0, r7
 8001210:	2802      	cmp	r0, #2
 8001212:	d9ab      	bls.n	800116c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8001214:	e75c      	b.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001216:	f7ff f9c7 	bl	80005a8 <HAL_GetTick>
 800121a:	1b40      	subs	r0, r0, r5
 800121c:	2802      	cmp	r0, #2
 800121e:	d9e7      	bls.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001220:	e756      	b.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001222:	bf00      	nop
 8001224:	42470e40 	.word	0x42470e40
 8001228:	40023800 	.word	0x40023800
 800122c:	42470070 	.word	0x42470070

08001230 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001230:	4920      	ldr	r1, [pc, #128]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001232:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001234:	688b      	ldr	r3, [r1, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b08      	cmp	r3, #8
 800123c:	d007      	beq.n	800124e <HAL_RCC_GetSysClockFreq+0x1e>
 800123e:	2b0c      	cmp	r3, #12
 8001240:	d020      	beq.n	8001284 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x88>)
 8001244:	481d      	ldr	r0, [pc, #116]	; (80012bc <HAL_RCC_GetSysClockFreq+0x8c>)
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf18      	it	ne
 800124a:	4610      	movne	r0, r2
 800124c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001250:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001252:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001254:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001258:	bf14      	ite	ne
 800125a:	4818      	ldrne	r0, [pc, #96]	; (80012bc <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125c:	4816      	ldreq	r0, [pc, #88]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001262:	bf18      	it	ne
 8001264:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001266:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126a:	fba1 0100 	umull	r0, r1, r1, r0
 800126e:	f7fe ffc9 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x84>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800127a:	3301      	adds	r3, #1
 800127c:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800127e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001282:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001284:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001286:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001288:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800128a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800128e:	bf14      	ite	ne
 8001290:	480a      	ldrne	r0, [pc, #40]	; (80012bc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001292:	4809      	ldreq	r0, [pc, #36]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001294:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001298:	bf18      	it	ne
 800129a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800129c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a0:	fba1 0100 	umull	r0, r1, r1, r0
 80012a4:	f7fe ffae 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x84>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80012b0:	e7e5      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x4e>
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	00f42400 	.word	0x00f42400
 80012bc:	007a1200 	.word	0x007a1200

080012c0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c0:	6803      	ldr	r3, [r0, #0]
{
 80012c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	07df      	lsls	r7, r3, #31
{
 80012c8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	d410      	bmi.n	80012ee <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	079e      	lsls	r6, r3, #30
 80012d0:	d467      	bmi.n	80013a2 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	071a      	lsls	r2, r3, #28
 80012d6:	f100 80b2 	bmi.w	800143e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	075b      	lsls	r3, r3, #29
 80012de:	f100 80d0 	bmi.w	8001482 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e2:	69a2      	ldr	r2, [r4, #24]
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	f040 8139 	bne.w	800155c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80012ea:	2000      	movs	r0, #0
 80012ec:	e01e      	b.n	800132c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012ee:	4b97      	ldr	r3, [pc, #604]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	f002 020c 	and.w	r2, r2, #12
 80012f6:	2a04      	cmp	r2, #4
 80012f8:	d010      	beq.n	800131c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001300:	2a08      	cmp	r2, #8
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	025d      	lsls	r5, r3, #9
 8001308:	d408      	bmi.n	800131c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4b90      	ldr	r3, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001312:	2a0c      	cmp	r2, #12
 8001314:	d10d      	bne.n	8001332 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	0250      	lsls	r0, r2, #9
 800131a:	d50a      	bpl.n	8001332 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0399      	lsls	r1, r3, #14
 8001322:	d5d3      	bpl.n	80012cc <HAL_RCC_OscConfig+0xc>
 8001324:	6863      	ldr	r3, [r4, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1d0      	bne.n	80012cc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
}
 800132c:	b002      	add	sp, #8
 800132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001332:	6862      	ldr	r2, [r4, #4]
 8001334:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001338:	d111      	bne.n	800135e <HAL_RCC_OscConfig+0x9e>
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001340:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001342:	f7ff f931 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4d81      	ldr	r5, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001348:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	039a      	lsls	r2, r3, #14
 800134e:	d4bd      	bmi.n	80012cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff f92a 	bl	80005a8 <HAL_GetTick>
 8001354:	1b80      	subs	r0, r0, r6
 8001356:	2864      	cmp	r0, #100	; 0x64
 8001358:	d9f7      	bls.n	800134a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800135a:	2003      	movs	r0, #3
 800135c:	e7e6      	b.n	800132c <HAL_RCC_OscConfig+0x6c>
 800135e:	4d7b      	ldr	r5, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0xb8>
 8001368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136c:	602b      	str	r3, [r5, #0]
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	602b      	str	r3, [r5, #0]
 8001376:	e7e4      	b.n	8001342 <HAL_RCC_OscConfig+0x82>
 8001378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137c:	602b      	str	r3, [r5, #0]
 800137e:	682b      	ldr	r3, [r5, #0]
 8001380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001384:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001386:	2a00      	cmp	r2, #0
 8001388:	d1db      	bne.n	8001342 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800138a:	f7ff f90d 	bl	80005a8 <HAL_GetTick>
 800138e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	d59a      	bpl.n	80012cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff f907 	bl	80005a8 <HAL_GetTick>
 800139a:	1b80      	subs	r0, r0, r6
 800139c:	2864      	cmp	r0, #100	; 0x64
 800139e:	d9f7      	bls.n	8001390 <HAL_RCC_OscConfig+0xd0>
 80013a0:	e7db      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	f012 0f0c 	tst.w	r2, #12
 80013aa:	d010      	beq.n	80013ce <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013b2:	2a08      	cmp	r2, #8
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	025f      	lsls	r7, r3, #9
 80013ba:	d508      	bpl.n	80013ce <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013bc:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 80013be:	6893      	ldr	r3, [r2, #8]
 80013c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013c4:	2b0c      	cmp	r3, #12
 80013c6:	d111      	bne.n	80013ec <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c8:	6853      	ldr	r3, [r2, #4]
 80013ca:	025e      	lsls	r6, r3, #9
 80013cc:	d40e      	bmi.n	80013ec <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	0795      	lsls	r5, r2, #30
 80013d4:	d502      	bpl.n	80013dc <HAL_RCC_OscConfig+0x11c>
 80013d6:	68e2      	ldr	r2, [r4, #12]
 80013d8:	2a01      	cmp	r2, #1
 80013da:	d1a6      	bne.n	800132a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	6921      	ldr	r1, [r4, #16]
 80013e0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013e4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	e772      	b.n	80012d2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ec:	68e2      	ldr	r2, [r4, #12]
 80013ee:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_RCC_OscConfig+0x290>)
 80013f0:	b1b2      	cbz	r2, 8001420 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013f6:	f7ff f8d7 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fa:	4d54      	ldr	r5, [pc, #336]	; (800154c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80013fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	682b      	ldr	r3, [r5, #0]
 8001400:	0798      	lsls	r0, r3, #30
 8001402:	d507      	bpl.n	8001414 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	6922      	ldr	r2, [r4, #16]
 8001408:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800140c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001410:	602b      	str	r3, [r5, #0]
 8001412:	e75e      	b.n	80012d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff f8c8 	bl	80005a8 <HAL_GetTick>
 8001418:	1b80      	subs	r0, r0, r6
 800141a:	2802      	cmp	r0, #2
 800141c:	d9ef      	bls.n	80013fe <HAL_RCC_OscConfig+0x13e>
 800141e:	e79c      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001420:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001422:	f7ff f8c1 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4d49      	ldr	r5, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001428:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	682b      	ldr	r3, [r5, #0]
 800142c:	0799      	lsls	r1, r3, #30
 800142e:	f57f af50 	bpl.w	80012d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff f8b9 	bl	80005a8 <HAL_GetTick>
 8001436:	1b80      	subs	r0, r0, r6
 8001438:	2802      	cmp	r0, #2
 800143a:	d9f6      	bls.n	800142a <HAL_RCC_OscConfig+0x16a>
 800143c:	e78d      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	6962      	ldr	r2, [r4, #20]
 8001440:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_RCC_OscConfig+0x294>)
 8001442:	b17a      	cbz	r2, 8001464 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001448:	f7ff f8ae 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144c:	4d3f      	ldr	r5, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800144e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001450:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001452:	079f      	lsls	r7, r3, #30
 8001454:	f53f af41 	bmi.w	80012da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff f8a6 	bl	80005a8 <HAL_GetTick>
 800145c:	1b80      	subs	r0, r0, r6
 800145e:	2802      	cmp	r0, #2
 8001460:	d9f6      	bls.n	8001450 <HAL_RCC_OscConfig+0x190>
 8001462:	e77a      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001464:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001466:	f7ff f89f 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146a:	4d38      	ldr	r5, [pc, #224]	; (800154c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800146c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001470:	0798      	lsls	r0, r3, #30
 8001472:	f57f af32 	bpl.w	80012da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff f897 	bl	80005a8 <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f6      	bls.n	800146e <HAL_RCC_OscConfig+0x1ae>
 8001480:	e76b      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 8001484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001486:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800148a:	d128      	bne.n	80014de <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001490:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014a0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4d2d      	ldr	r5, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	05d9      	lsls	r1, r3, #23
 80014a8:	d51b      	bpl.n	80014e2 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014aa:	68a3      	ldr	r3, [r4, #8]
 80014ac:	4d27      	ldr	r5, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d127      	bne.n	8001502 <HAL_RCC_OscConfig+0x242>
 80014b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014ba:	f7ff f875 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	4d23      	ldr	r5, [pc, #140]	; (800154c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80014c0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014c8:	079b      	lsls	r3, r3, #30
 80014ca:	d539      	bpl.n	8001540 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80014cc:	2e00      	cmp	r6, #0
 80014ce:	f43f af08 	beq.w	80012e2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_RCC_OscConfig+0x28c>)
 80014d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	e701      	b.n	80012e2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80014de:	2600      	movs	r6, #0
 80014e0:	e7df      	b.n	80014a2 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014ea:	f7ff f85d 	bl	80005a8 <HAL_GetTick>
 80014ee:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	05da      	lsls	r2, r3, #23
 80014f4:	d4d9      	bmi.n	80014aa <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff f857 	bl	80005a8 <HAL_GetTick>
 80014fa:	1bc0      	subs	r0, r0, r7
 80014fc:	2802      	cmp	r0, #2
 80014fe:	d9f7      	bls.n	80014f0 <HAL_RCC_OscConfig+0x230>
 8001500:	e72b      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001502:	2b05      	cmp	r3, #5
 8001504:	d104      	bne.n	8001510 <HAL_RCC_OscConfig+0x250>
 8001506:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	672b      	str	r3, [r5, #112]	; 0x70
 800150e:	e7d0      	b.n	80014b2 <HAL_RCC_OscConfig+0x1f2>
 8001510:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	672a      	str	r2, [r5, #112]	; 0x70
 8001518:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800151a:	f022 0204 	bic.w	r2, r2, #4
 800151e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ca      	bne.n	80014ba <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001524:	f7ff f840 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800152c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001530:	0798      	lsls	r0, r3, #30
 8001532:	d5cb      	bpl.n	80014cc <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff f838 	bl	80005a8 <HAL_GetTick>
 8001538:	1bc0      	subs	r0, r0, r7
 800153a:	4540      	cmp	r0, r8
 800153c:	d9f7      	bls.n	800152e <HAL_RCC_OscConfig+0x26e>
 800153e:	e70c      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff f832 	bl	80005a8 <HAL_GetTick>
 8001544:	1bc0      	subs	r0, r0, r7
 8001546:	4540      	cmp	r0, r8
 8001548:	d9bd      	bls.n	80014c6 <HAL_RCC_OscConfig+0x206>
 800154a:	e706      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
 800154c:	40023800 	.word	0x40023800
 8001550:	42470000 	.word	0x42470000
 8001554:	42470e80 	.word	0x42470e80
 8001558:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800155c:	4d23      	ldr	r5, [pc, #140]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800155e:	68ab      	ldr	r3, [r5, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	f43f aee0 	beq.w	800132a <HAL_RCC_OscConfig+0x6a>
 800156a:	4e21      	ldr	r6, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x330>)
 800156c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001570:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001572:	d12d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001574:	f7ff f818 	bl	80005a8 <HAL_GetTick>
 8001578:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	682b      	ldr	r3, [r5, #0]
 800157c:	0199      	lsls	r1, r3, #6
 800157e:	d421      	bmi.n	80015c4 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001580:	6a22      	ldr	r2, [r4, #32]
 8001582:	69e3      	ldr	r3, [r4, #28]
 8001584:	4313      	orrs	r3, r2
 8001586:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001588:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800158c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800158e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001592:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001594:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001598:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4c14      	ldr	r4, [pc, #80]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159c:	0852      	lsrs	r2, r2, #1
 800159e:	3a01      	subs	r2, #1
 80015a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015a4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015a6:	2301      	movs	r3, #1
 80015a8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80015aa:	f7fe fffd 	bl	80005a8 <HAL_GetTick>
 80015ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	019a      	lsls	r2, r3, #6
 80015b4:	f53f ae99 	bmi.w	80012ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7fe fff6 	bl	80005a8 <HAL_GetTick>
 80015bc:	1b40      	subs	r0, r0, r5
 80015be:	2802      	cmp	r0, #2
 80015c0:	d9f6      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
 80015c2:	e6ca      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7fe fff0 	bl	80005a8 <HAL_GetTick>
 80015c8:	1bc0      	subs	r0, r0, r7
 80015ca:	2802      	cmp	r0, #2
 80015cc:	d9d5      	bls.n	800157a <HAL_RCC_OscConfig+0x2ba>
 80015ce:	e6c4      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80015d0:	f7fe ffea 	bl	80005a8 <HAL_GetTick>
 80015d4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	f57f ae86 	bpl.w	80012ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015de:	f7fe ffe3 	bl	80005a8 <HAL_GetTick>
 80015e2:	1b00      	subs	r0, r0, r4
 80015e4:	2802      	cmp	r0, #2
 80015e6:	d9f6      	bls.n	80015d6 <HAL_RCC_OscConfig+0x316>
 80015e8:	e6b7      	b.n	800135a <HAL_RCC_OscConfig+0x9a>
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	42470060 	.word	0x42470060

080015f4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_RTC_AlarmIRQHandler>:
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	05d2      	lsls	r2, r2, #23
{  
 80015fe:	b510      	push	{r4, lr}
 8001600:	4604      	mov	r4, r0
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8001602:	d50a      	bpl.n	800161a <HAL_RTC_AlarmIRQHandler+0x22>
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	04d9      	lsls	r1, r3, #19
 8001608:	d507      	bpl.n	800161a <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 800160a:	f7ff fff3 	bl	80015f4 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800160e:	6822      	ldr	r2, [r4, #0]
 8001610:	68d3      	ldr	r3, [r2, #12]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8001618:	60d3      	str	r3, [r2, #12]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	0592      	lsls	r2, r2, #22
 8001620:	d50b      	bpl.n	800163a <HAL_RTC_AlarmIRQHandler+0x42>
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	049b      	lsls	r3, r3, #18
 8001626:	d508      	bpl.n	800163a <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001628:	4620      	mov	r0, r4
 800162a:	f000 fa1b 	bl	8001a64 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800162e:	6822      	ldr	r2, [r4, #0]
 8001630:	68d3      	ldr	r3, [r2, #12]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f463 7320 	orn	r3, r3, #640	; 0x280
 8001638:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800163a:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_RTC_AlarmIRQHandler+0x50>)
 800163c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001640:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY; 
 8001642:	2301      	movs	r3, #1
 8001644:	7763      	strb	r3, [r4, #29]
 8001646:	bd10      	pop	{r4, pc}
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800164c:	6802      	ldr	r2, [r0, #0]
{
 800164e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001650:	68d3      	ldr	r3, [r2, #12]
 8001652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001656:	60d3      	str	r3, [r2, #12]
{
 8001658:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 800165a:	f7fe ffa5 	bl	80005a8 <HAL_GetTick>
 800165e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	069b      	lsls	r3, r3, #26
 8001666:	d501      	bpl.n	800166c <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001668:	2000      	movs	r0, #0
 800166a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800166c:	f7fe ff9c 	bl	80005a8 <HAL_GetTick>
 8001670:	1b40      	subs	r0, r0, r5
 8001672:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001676:	d9f3      	bls.n	8001660 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001678:	2003      	movs	r0, #3
}
 800167a:	bd38      	pop	{r3, r4, r5, pc}

0800167c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800167c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800167e:	6803      	ldr	r3, [r0, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	0652      	lsls	r2, r2, #25
{
 8001684:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001686:	d501      	bpl.n	800168c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001688:	2000      	movs	r0, #0
 800168a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001692:	f7fe ff89 	bl	80005a8 <HAL_GetTick>
 8001696:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	065b      	lsls	r3, r3, #25
 800169e:	d4f3      	bmi.n	8001688 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80016a0:	f7fe ff82 	bl	80005a8 <HAL_GetTick>
 80016a4:	1b40      	subs	r0, r0, r5
 80016a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016aa:	d9f5      	bls.n	8001698 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
}
 80016ae:	bd38      	pop	{r3, r4, r5, pc}

080016b0 <HAL_RTC_Init>:
{
 80016b0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80016b2:	4604      	mov	r4, r0
 80016b4:	b1b8      	cbz	r0, 80016e6 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80016b6:	7f43      	ldrb	r3, [r0, #29]
 80016b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016bc:	b913      	cbnz	r3, 80016c4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80016be:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80016c0:	f001 f952 	bl	8002968 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80016c4:	2302      	movs	r3, #2
 80016c6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	22ca      	movs	r2, #202	; 0xca
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
 80016ce:	2253      	movs	r2, #83	; 0x53
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ffd2 	bl	800167c <RTC_EnterInitMode>
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	4605      	mov	r5, r0
 80016dc:	b128      	cbz	r0, 80016ea <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016de:	22ff      	movs	r2, #255	; 0xff
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80016e2:	2304      	movs	r3, #4
 80016e4:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 80016e6:	2501      	movs	r5, #1
 80016e8:	e02e      	b.n	8001748 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80016ea:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80016ec:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80016ee:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80016f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016f6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80016f8:	6862      	ldr	r2, [r4, #4]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	4302      	orrs	r2, r0
 80016fe:	6960      	ldr	r0, [r4, #20]
 8001700:	4302      	orrs	r2, r0
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001706:	68e2      	ldr	r2, [r4, #12]
 8001708:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	68a1      	ldr	r1, [r4, #8]
 800170e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001712:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800171a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	069b      	lsls	r3, r3, #26
 8001720:	d405      	bmi.n	800172e <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ff92 	bl	800164c <HAL_RTC_WaitForSynchro>
 8001728:	b108      	cbz	r0, 800172e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	e7d7      	b.n	80016de <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800172e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001730:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001734:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800173a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173c:	430a      	orrs	r2, r1
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001744:	2301      	movs	r3, #1
 8001746:	7763      	strb	r3, [r4, #29]
}
 8001748:	4628      	mov	r0, r5
 800174a:	bd38      	pop	{r3, r4, r5, pc}

0800174c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800174c:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 800174e:	2809      	cmp	r0, #9
 8001750:	d803      	bhi.n	800175a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001752:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001756:	b2c0      	uxtb	r0, r0
 8001758:	4770      	bx	lr
    Value -= 10U;
 800175a:	380a      	subs	r0, #10
    bcdhigh++;
 800175c:	3301      	adds	r3, #1
    Value -= 10U;
 800175e:	b2c0      	uxtb	r0, r0
 8001760:	e7f5      	b.n	800174e <RTC_ByteToBcd2+0x2>

08001762 <HAL_RTC_SetDate>:
{
 8001762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001764:	7f03      	ldrb	r3, [r0, #28]
 8001766:	2b01      	cmp	r3, #1
{
 8001768:	4605      	mov	r5, r0
 800176a:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 800176e:	d030      	beq.n	80017d2 <HAL_RTC_SetDate+0x70>
 8001770:	2301      	movs	r3, #1
 8001772:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001774:	7746      	strb	r6, [r0, #29]
 8001776:	784b      	ldrb	r3, [r1, #1]
 8001778:	78c8      	ldrb	r0, [r1, #3]
 800177a:	788e      	ldrb	r6, [r1, #2]
 800177c:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800177e:	2a00      	cmp	r2, #0
 8001780:	d148      	bne.n	8001814 <HAL_RTC_SetDate+0xb2>
 8001782:	06da      	lsls	r2, r3, #27
 8001784:	d503      	bpl.n	800178e <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001786:	f023 0310 	bic.w	r3, r3, #16
 800178a:	330a      	adds	r3, #10
 800178c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800178e:	f7ff ffdd 	bl	800174c <RTC_ByteToBcd2>
 8001792:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001794:	7848      	ldrb	r0, [r1, #1]
 8001796:	f7ff ffd9 	bl	800174c <RTC_ByteToBcd2>
 800179a:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800179c:	4630      	mov	r0, r6
 800179e:	f7ff ffd5 	bl	800174c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80017a2:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 80017a6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80017aa:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017ae:	682b      	ldr	r3, [r5, #0]
 80017b0:	22ca      	movs	r2, #202	; 0xca
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
 80017b4:	2253      	movs	r2, #83	; 0x53
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017b8:	4628      	mov	r0, r5
 80017ba:	f7ff ff5f 	bl	800167c <RTC_EnterInitMode>
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	4606      	mov	r6, r0
 80017c2:	b140      	cbz	r0, 80017d6 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017c8:	2304      	movs	r3, #4
 80017ca:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80017cc:	2300      	movs	r3, #0
 80017ce:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 80017d0:	2601      	movs	r6, #1
}
 80017d2:	4630      	mov	r0, r6
 80017d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80017d6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80017da:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80017de:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	069b      	lsls	r3, r3, #26
 80017ec:	d40a      	bmi.n	8001804 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80017ee:	4628      	mov	r0, r5
 80017f0:	f7ff ff2c 	bl	800164c <HAL_RTC_WaitForSynchro>
 80017f4:	b130      	cbz	r0, 8001804 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	22ff      	movs	r2, #255	; 0xff
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017fc:	2304      	movs	r3, #4
 80017fe:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8001800:	772e      	strb	r6, [r5, #28]
 8001802:	e7e5      	b.n	80017d0 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	22ff      	movs	r2, #255	; 0xff
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800180a:	2301      	movs	r3, #1
 800180c:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800180e:	2300      	movs	r3, #0
 8001810:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8001812:	e7de      	b.n	80017d2 <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 8001814:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001816:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800181a:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800181c:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8001820:	e7c5      	b.n	80017ae <HAL_RTC_SetDate+0x4c>

08001822 <HAL_RTC_SetTime>:
{
 8001822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001824:	7f03      	ldrb	r3, [r0, #28]
 8001826:	2b01      	cmp	r3, #1
{
 8001828:	4606      	mov	r6, r0
 800182a:	460f      	mov	r7, r1
 800182c:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001830:	d02f      	beq.n	8001892 <HAL_RTC_SetTime+0x70>
 8001832:	2301      	movs	r3, #1
 8001834:	7703      	strb	r3, [r0, #28]
 8001836:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001838:	7745      	strb	r5, [r0, #29]
 800183a:	7808      	ldrb	r0, [r1, #0]
 800183c:	784d      	ldrb	r5, [r1, #1]
 800183e:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001840:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001842:	bb42      	cbnz	r2, 8001896 <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001844:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001848:	bf08      	it	eq
 800184a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800184c:	f7ff ff7e 	bl	800174c <RTC_ByteToBcd2>
 8001850:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001852:	4628      	mov	r0, r5
 8001854:	f7ff ff7a 	bl	800174c <RTC_ByteToBcd2>
 8001858:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff ff76 	bl	800174c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001860:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001866:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800186a:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800186e:	6833      	ldr	r3, [r6, #0]
 8001870:	22ca      	movs	r2, #202	; 0xca
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
 8001874:	2253      	movs	r2, #83	; 0x53
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001878:	4630      	mov	r0, r6
 800187a:	f7ff feff 	bl	800167c <RTC_EnterInitMode>
 800187e:	6833      	ldr	r3, [r6, #0]
 8001880:	4605      	mov	r5, r0
 8001882:	b1a8      	cbz	r0, 80018b0 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001884:	22ff      	movs	r2, #255	; 0xff
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001888:	2304      	movs	r3, #4
 800188a:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 800188c:	2300      	movs	r3, #0
 800188e:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001890:	2501      	movs	r5, #1
}
 8001892:	4628      	mov	r0, r5
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001896:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800189a:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 800189e:	bf08      	it	eq
 80018a0:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80018a2:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80018a6:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80018a8:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80018aa:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80018ae:	e7de      	b.n	800186e <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80018b0:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80018b4:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80018b8:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80018ba:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018bc:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80018be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018c2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	4302      	orrs	r2, r0
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d4:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	069b      	lsls	r3, r3, #26
 80018da:	d40a      	bmi.n	80018f2 <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80018dc:	4630      	mov	r0, r6
 80018de:	f7ff feb5 	bl	800164c <HAL_RTC_WaitForSynchro>
 80018e2:	b130      	cbz	r0, 80018f2 <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80018e4:	6833      	ldr	r3, [r6, #0]
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80018ea:	2304      	movs	r3, #4
 80018ec:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 80018ee:	7735      	strb	r5, [r6, #28]
 80018f0:	e7ce      	b.n	8001890 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018f2:	6833      	ldr	r3, [r6, #0]
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80018f8:	2301      	movs	r3, #1
 80018fa:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 80018fc:	2300      	movs	r3, #0
 80018fe:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001900:	e7c7      	b.n	8001892 <HAL_RTC_SetTime+0x70>
	...

08001904 <HAL_RTC_SetAlarm_IT>:
{
 8001904:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001908:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <HAL_RTC_SetAlarm_IT+0x158>)
{
 800190a:	4605      	mov	r5, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001912:	fbb3 f0f0 	udiv	r0, r3, r0
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	4343      	muls	r3, r0
 800191c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 800191e:	7f2b      	ldrb	r3, [r5, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f04f 0002 	mov.w	r0, #2
 8001926:	d04b      	beq.n	80019c0 <HAL_RTC_SetAlarm_IT+0xbc>
 8001928:	2301      	movs	r3, #1
 800192a:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800192c:	7768      	strb	r0, [r5, #29]
 800192e:	682b      	ldr	r3, [r5, #0]
 8001930:	7808      	ldrb	r0, [r1, #0]
 8001932:	784f      	ldrb	r7, [r1, #1]
 8001934:	f891 8002 	ldrb.w	r8, [r1, #2]
 8001938:	f891 6020 	ldrb.w	r6, [r1, #32]
 800193c:	69cc      	ldr	r4, [r1, #28]
 800193e:	f8d1 a014 	ldr.w	sl, [r1, #20]
  if(Format == RTC_FORMAT_BIN)
 8001942:	2a00      	cmp	r2, #0
 8001944:	d13f      	bne.n	80019c6 <HAL_RTC_SetAlarm_IT+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800194c:	bf08      	it	eq
 800194e:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001950:	f7ff fefc 	bl	800174c <RTC_ByteToBcd2>
 8001954:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001956:	4638      	mov	r0, r7
 8001958:	f7ff fef8 	bl	800174c <RTC_ByteToBcd2>
 800195c:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800195e:	4640      	mov	r0, r8
 8001960:	f7ff fef4 	bl	800174c <RTC_ByteToBcd2>
 8001964:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001966:	4630      	mov	r0, r6
 8001968:	f7ff fef0 	bl	800174c <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800196c:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800196e:	ea44 040a 	orr.w	r4, r4, sl
 8001972:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001976:	433b      	orrs	r3, r7
 8001978:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
 800197c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001980:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001984:	698b      	ldr	r3, [r1, #24]
 8001986:	684c      	ldr	r4, [r1, #4]
 8001988:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	22ca      	movs	r2, #202	; 0xca
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
 8001990:	2253      	movs	r2, #83	; 0x53
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001994:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001996:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800199a:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800199c:	d143      	bne.n	8001a26 <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800199e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80019ac:	60da      	str	r2, [r3, #12]
      if (count-- == 0U)
 80019ae:	9a01      	ldr	r2, [sp, #4]
 80019b0:	1e51      	subs	r1, r2, #1
 80019b2:	9101      	str	r1, [sp, #4]
 80019b4:	b9d2      	cbnz	r2, 80019ec <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019b6:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80019b8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019ba:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80019bc:	7768      	strb	r0, [r5, #29]
        __HAL_UNLOCK(hrtc);
 80019be:	772a      	strb	r2, [r5, #28]
}
 80019c0:	b002      	add	sp, #8
 80019c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80019c6:	689a      	ldr	r2, [r3, #8]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80019c8:	ea44 040a 	orr.w	r4, r4, sl
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80019cc:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80019d0:	bf08      	it	eq
 80019d2:	70ca      	strbeq	r2, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80019d4:	ea44 0408 	orr.w	r4, r4, r8
 80019d8:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80019dc:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80019de:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 80019e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80019e6:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 80019ea:	e7cb      	b.n	8001984 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	07d1      	lsls	r1, r2, #31
 80019f0:	d5dd      	bpl.n	80019ae <HAL_RTC_SetAlarm_IT+0xaa>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80019f2:	61d8      	str	r0, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80019f4:	645c      	str	r4, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019fc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001a04:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_RTC_SetAlarm_IT+0x15c>)
 8001a08:	6811      	ldr	r1, [r2, #0]
 8001a0a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001a0e:	6011      	str	r1, [r2, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001a10:	6891      	ldr	r1, [r2, #8]
 8001a12:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001a16:	6091      	str	r1, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001a18:	22ff      	movs	r2, #255	; 0xff
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);  
 8001a1c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY; 
 8001a1e:	2301      	movs	r3, #1
 8001a20:	776b      	strb	r3, [r5, #29]
  __HAL_UNLOCK(hrtc);  
 8001a22:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 8001a24:	e7cc      	b.n	80019c0 <HAL_RTC_SetAlarm_IT+0xbc>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001a26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a2a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001a34:	60da      	str	r2, [r3, #12]
      if (count-- == 0U)
 8001a36:	9a01      	ldr	r2, [sp, #4]
 8001a38:	1e51      	subs	r1, r2, #1
 8001a3a:	9101      	str	r1, [sp, #4]
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	d0ba      	beq.n	80019b6 <HAL_RTC_SetAlarm_IT+0xb2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	0792      	lsls	r2, r2, #30
 8001a44:	d5f7      	bpl.n	8001a36 <HAL_RTC_SetAlarm_IT+0x132>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001a46:	6218      	str	r0, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001a48:	649c      	str	r4, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a50:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a58:	e7d4      	b.n	8001a04 <HAL_RTC_SetAlarm_IT+0x100>
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001a64:	4770      	bx	lr
	...

08001a68 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a68:	6a03      	ldr	r3, [r0, #32]
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a70:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001a72:	6842      	ldr	r2, [r0, #4]
{
 8001a74:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a76:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a7a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a7e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a80:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a82:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a86:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001a88:	4c0c      	ldr	r4, [pc, #48]	; (8001abc <TIM_OC1_SetConfig+0x54>)
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d009      	beq.n	8001aa2 <TIM_OC1_SetConfig+0x3a>
 8001a8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a92:	42a0      	cmp	r0, r4
 8001a94:	d005      	beq.n	8001aa2 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a96:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a98:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a9a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001a9c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001a9e:	6203      	str	r3, [r0, #32]
} 
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001aa2:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001aa4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001aa6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001aaa:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001aac:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001aae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ab2:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ab8:	4322      	orrs	r2, r4
 8001aba:	e7ec      	b.n	8001a96 <TIM_OC1_SetConfig+0x2e>
 8001abc:	40010000 	.word	0x40010000

08001ac0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ac0:	6a03      	ldr	r3, [r0, #32]
 8001ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ac8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001aca:	6842      	ldr	r2, [r0, #4]
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ace:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ad0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001ad2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ad6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ad8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001ada:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ade:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ae2:	4c0e      	ldr	r4, [pc, #56]	; (8001b1c <TIM_OC3_SetConfig+0x5c>)
 8001ae4:	42a0      	cmp	r0, r4
 8001ae6:	d009      	beq.n	8001afc <TIM_OC3_SetConfig+0x3c>
 8001ae8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aec:	42a0      	cmp	r0, r4
 8001aee:	d005      	beq.n	8001afc <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001af0:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001af2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001af4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001af6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001af8:	6203      	str	r3, [r0, #32]
}
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001afc:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001afe:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b04:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b08:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b0a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b0e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b14:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001b18:	e7ea      	b.n	8001af0 <TIM_OC3_SetConfig+0x30>
 8001b1a:	bf00      	nop
 8001b1c:	40010000 	.word	0x40010000

08001b20 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b20:	6a03      	ldr	r3, [r0, #32]
 8001b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b26:	6203      	str	r3, [r0, #32]
{
 8001b28:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b2a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001b2c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b2e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b30:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b32:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b3c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b40:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b44:	4d09      	ldr	r5, [pc, #36]	; (8001b6c <TIM_OC4_SetConfig+0x4c>)
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d009      	beq.n	8001b5e <TIM_OC4_SetConfig+0x3e>
 8001b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d005      	beq.n	8001b5e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b52:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b54:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001b56:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001b58:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b5a:	6204      	str	r4, [r0, #32]
}
 8001b5c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b5e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b64:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001b68:	e7f3      	b.n	8001b52 <TIM_OC4_SetConfig+0x32>
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000

08001b70 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b70:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001b72:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b74:	4290      	cmp	r0, r2
 8001b76:	d012      	beq.n	8001b9e <TIM_Base_SetConfig+0x2e>
 8001b78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b7c:	d00f      	beq.n	8001b9e <TIM_Base_SetConfig+0x2e>
 8001b7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b82:	4290      	cmp	r0, r2
 8001b84:	d00b      	beq.n	8001b9e <TIM_Base_SetConfig+0x2e>
 8001b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b8a:	4290      	cmp	r0, r2
 8001b8c:	d007      	beq.n	8001b9e <TIM_Base_SetConfig+0x2e>
 8001b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b92:	4290      	cmp	r0, r2
 8001b94:	d003      	beq.n	8001b9e <TIM_Base_SetConfig+0x2e>
 8001b96:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001b9a:	4290      	cmp	r0, r2
 8001b9c:	d11d      	bne.n	8001bda <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001b9e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ba4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001ba6:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <TIM_Base_SetConfig+0xbc>)
 8001ba8:	4290      	cmp	r0, r2
 8001baa:	d104      	bne.n	8001bb6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	e028      	b.n	8001c08 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001bb6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bba:	d0f7      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <TIM_Base_SetConfig+0xc0>)
 8001bbe:	4290      	cmp	r0, r2
 8001bc0:	d0f4      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bc6:	4290      	cmp	r0, r2
 8001bc8:	d0f0      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bce:	4290      	cmp	r0, r2
 8001bd0:	d0ec      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001bd2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001bd6:	4290      	cmp	r0, r2
 8001bd8:	d0e8      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <TIM_Base_SetConfig+0xc4>)
 8001bdc:	4290      	cmp	r0, r2
 8001bde:	d0e5      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001be4:	4290      	cmp	r0, r2
 8001be6:	d0e1      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bec:	4290      	cmp	r0, r2
 8001bee:	d0dd      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001bf0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001bf4:	4290      	cmp	r0, r2
 8001bf6:	d0d9      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001bf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bfc:	4290      	cmp	r0, r2
 8001bfe:	d0d5      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
 8001c00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c04:	4290      	cmp	r0, r2
 8001c06:	d0d1      	beq.n	8001bac <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001c08:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0a:	688b      	ldr	r3, [r1, #8]
 8001c0c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c0e:	680b      	ldr	r3, [r1, #0]
 8001c10:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <TIM_Base_SetConfig+0xbc>)
 8001c14:	4298      	cmp	r0, r3
 8001c16:	d006      	beq.n	8001c26 <TIM_Base_SetConfig+0xb6>
 8001c18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1c:	4298      	cmp	r0, r3
 8001c1e:	d002      	beq.n	8001c26 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001c20:	2301      	movs	r3, #1
 8001c22:	6143      	str	r3, [r0, #20]
}
 8001c24:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001c26:	690b      	ldr	r3, [r1, #16]
 8001c28:	6303      	str	r3, [r0, #48]	; 0x30
 8001c2a:	e7f9      	b.n	8001c20 <TIM_Base_SetConfig+0xb0>
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40014000 	.word	0x40014000

08001c38 <HAL_TIM_PWM_Init>:
{
 8001c38:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	b1a0      	cbz	r0, 8001c68 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c46:	b91b      	cbnz	r3, 8001c50 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c48:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001c4c:	f000 fea4 	bl	8002998 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001c50:	2302      	movs	r3, #2
 8001c52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	1d21      	adds	r1, r4, #4
 8001c5a:	f7ff ff89 	bl	8001b70 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001c64:	2000      	movs	r0, #0
 8001c66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
}  
 8001c6a:	bd10      	pop	{r4, pc}

08001c6c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c6c:	6a03      	ldr	r3, [r0, #32]
 8001c6e:	f023 0310 	bic.w	r3, r3, #16
 8001c72:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c74:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001c76:	6842      	ldr	r2, [r0, #4]
{
 8001c78:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001c7a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c7e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c82:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c86:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001c88:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c8c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c90:	4c0d      	ldr	r4, [pc, #52]	; (8001cc8 <TIM_OC2_SetConfig+0x5c>)
 8001c92:	42a0      	cmp	r0, r4
 8001c94:	d009      	beq.n	8001caa <TIM_OC2_SetConfig+0x3e>
 8001c96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c9a:	42a0      	cmp	r0, r4
 8001c9c:	d005      	beq.n	8001caa <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001c9e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ca0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ca2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ca4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001ca6:	6203      	str	r3, [r0, #32]
}
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001caa:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cac:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cb2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cb6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cbc:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cc2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001cc6:	e7ea      	b.n	8001c9e <TIM_OC2_SetConfig+0x32>
 8001cc8:	40010000 	.word	0x40010000

08001ccc <HAL_TIM_PWM_ConfigChannel>:
{
 8001ccc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001cce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cd2:	2b01      	cmp	r3, #1
{
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001cda:	d025      	beq.n	8001d28 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001ce6:	2a0c      	cmp	r2, #12
 8001ce8:	d818      	bhi.n	8001d1c <HAL_TIM_PWM_ConfigChannel+0x50>
 8001cea:	e8df f002 	tbb	[pc, r2]
 8001cee:	1707      	.short	0x1707
 8001cf0:	171e1717 	.word	0x171e1717
 8001cf4:	172f1717 	.word	0x172f1717
 8001cf8:	1717      	.short	0x1717
 8001cfa:	40          	.byte	0x40
 8001cfb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	f7ff feb3 	bl	8001a68 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d02:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d04:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	f042 0208 	orr.w	r2, r2, #8
 8001d0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	f022 0204 	bic.w	r2, r2, #4
 8001d14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d1a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d1c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001d24:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001d28:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d2a:	6820      	ldr	r0, [r4, #0]
 8001d2c:	f7ff ff9e 	bl	8001c6c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d4a:	e7e6      	b.n	8001d1a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d4c:	6820      	ldr	r0, [r4, #0]
 8001d4e:	f7ff feb7 	bl	8001ac0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d52:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d54:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d56:	69da      	ldr	r2, [r3, #28]
 8001d58:	f042 0208 	orr.w	r2, r2, #8
 8001d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d5e:	69da      	ldr	r2, [r3, #28]
 8001d60:	f022 0204 	bic.w	r2, r2, #4
 8001d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d66:	69da      	ldr	r2, [r3, #28]
 8001d68:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d6a:	61da      	str	r2, [r3, #28]
    break;
 8001d6c:	e7d6      	b.n	8001d1c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d6e:	6820      	ldr	r0, [r4, #0]
 8001d70:	f7ff fed6 	bl	8001b20 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d74:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d76:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d8e:	e7ec      	b.n	8001d6a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001d90 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001d90:	6a03      	ldr	r3, [r0, #32]
{
 8001d92:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001d94:	2401      	movs	r4, #1
 8001d96:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001d98:	ea23 0304 	bic.w	r3, r3, r4
 8001d9c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d9e:	6a03      	ldr	r3, [r0, #32]
 8001da0:	408a      	lsls	r2, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	6202      	str	r2, [r0, #32]
 8001da6:	bd10      	pop	{r4, pc}

08001da8 <HAL_TIM_PWM_Start>:
{
 8001da8:	b510      	push	{r4, lr}
 8001daa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6800      	ldr	r0, [r0, #0]
 8001db0:	f7ff ffee 	bl	8001d90 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_TIM_PWM_Start+0x30>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_TIM_PWM_Start+0x1c>
 8001dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d103      	bne.n	8001dcc <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
} 
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	bd10      	pop	{r4, pc}
 8001dd8:	40010000 	.word	0x40010000

08001ddc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001ddc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001de0:	2b01      	cmp	r3, #1
{
 8001de2:	b510      	push	{r4, lr}
 8001de4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001de8:	d018      	beq.n	8001e1c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001dea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001dee:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001df0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001df2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001df4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001df6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dfa:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4322      	orrs	r2, r4
 8001e00:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e08:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001e16:	2300      	movs	r3, #0
 8001e18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001e1c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001e1e:	bd10      	pop	{r4, pc}

08001e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001e20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d01f      	beq.n	8001e68 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001e28:	68cb      	ldr	r3, [r1, #12]
 8001e2a:	688a      	ldr	r2, [r1, #8]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001e32:	684a      	ldr	r2, [r1, #4]
 8001e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001e3a:	680a      	ldr	r2, [r1, #0]
 8001e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001e42:	690a      	ldr	r2, [r1, #16]
 8001e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001e4a:	694a      	ldr	r2, [r1, #20]
 8001e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001e52:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001e54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e58:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001e5a:	6802      	ldr	r2, [r0, #0]
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001e64:	4618      	mov	r0, r3
 8001e66:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001e68:	2002      	movs	r0, #2
}
 8001e6a:	4770      	bx	lr

08001e6c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001e70:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e72:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001e74:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e76:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e7c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001e7e:	6133      	str	r3, [r6, #16]
{
 8001e80:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e82:	6883      	ldr	r3, [r0, #8]
 8001e84:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001e86:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e88:	4303      	orrs	r3, r0
 8001e8a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e8c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e90:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e92:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e96:	430b      	orrs	r3, r1
 8001e98:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001e9a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001e9c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001e9e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001ea4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001eaa:	6173      	str	r3, [r6, #20]
 8001eac:	4b7a      	ldr	r3, [pc, #488]	; (8002098 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eae:	d17c      	bne.n	8001faa <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001eb0:	429e      	cmp	r6, r3
 8001eb2:	d003      	beq.n	8001ebc <UART_SetConfig+0x50>
 8001eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb8:	429e      	cmp	r6, r3
 8001eba:	d144      	bne.n	8001f46 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ebc:	f7fe ffa0 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001ec0:	2519      	movs	r5, #25
 8001ec2:	fb05 f300 	mul.w	r3, r5, r0
 8001ec6:	6860      	ldr	r0, [r4, #4]
 8001ec8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ecc:	0040      	lsls	r0, r0, #1
 8001ece:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ed2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ed6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001eda:	f7fe ff91 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001ede:	6863      	ldr	r3, [r4, #4]
 8001ee0:	4368      	muls	r0, r5
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ee8:	f7fe ff8a 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	4368      	muls	r0, r5
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001efa:	fb09 7313 	mls	r3, r9, r3, r7
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	3332      	adds	r3, #50	; 0x32
 8001f02:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001f0c:	f7fe ff78 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001f10:	6862      	ldr	r2, [r4, #4]
 8001f12:	4368      	muls	r0, r5
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	fbb0 faf2 	udiv	sl, r0, r2
 8001f1a:	f7fe ff71 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f1e:	6863      	ldr	r3, [r4, #4]
 8001f20:	4368      	muls	r0, r5
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f28:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f2c:	fb09 a313 	mls	r3, r9, r3, sl
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	3332      	adds	r3, #50	; 0x32
 8001f34:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f3e:	443b      	add	r3, r7
 8001f40:	60b3      	str	r3, [r6, #8]
 8001f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f46:	f7fe ff4b 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8001f4a:	2519      	movs	r5, #25
 8001f4c:	fb05 f300 	mul.w	r3, r5, r0
 8001f50:	6860      	ldr	r0, [r4, #4]
 8001f52:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f56:	0040      	lsls	r0, r0, #1
 8001f58:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f64:	f7fe ff3c 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8001f68:	6863      	ldr	r3, [r4, #4]
 8001f6a:	4368      	muls	r0, r5
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f72:	f7fe ff35 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8001f76:	6863      	ldr	r3, [r4, #4]
 8001f78:	4368      	muls	r0, r5
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f80:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f84:	fb09 7313 	mls	r3, r9, r3, r7
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	3332      	adds	r3, #50	; 0x32
 8001f8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001f96:	f7fe ff23 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8001f9a:	6862      	ldr	r2, [r4, #4]
 8001f9c:	4368      	muls	r0, r5
 8001f9e:	0052      	lsls	r2, r2, #1
 8001fa0:	fbb0 faf2 	udiv	sl, r0, r2
 8001fa4:	f7fe ff1c 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8001fa8:	e7b9      	b.n	8001f1e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001faa:	429e      	cmp	r6, r3
 8001fac:	d002      	beq.n	8001fb4 <UART_SetConfig+0x148>
 8001fae:	4b3b      	ldr	r3, [pc, #236]	; (800209c <UART_SetConfig+0x230>)
 8001fb0:	429e      	cmp	r6, r3
 8001fb2:	d140      	bne.n	8002036 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fb4:	f7fe ff24 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	6867      	ldr	r7, [r4, #4]
 8001fba:	2519      	movs	r5, #25
 8001fbc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fc0:	fb05 f300 	mul.w	r3, r5, r0
 8001fc4:	00bf      	lsls	r7, r7, #2
 8001fc6:	fbb3 f3f7 	udiv	r3, r3, r7
 8001fca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fce:	011f      	lsls	r7, r3, #4
 8001fd0:	f7fe ff16 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001fd4:	6863      	ldr	r3, [r4, #4]
 8001fd6:	4368      	muls	r0, r5
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	fbb0 f8f3 	udiv	r8, r0, r3
 8001fde:	f7fe ff0f 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8001fe2:	6863      	ldr	r3, [r4, #4]
 8001fe4:	4368      	muls	r0, r5
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fec:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ff0:	fb09 8313 	mls	r3, r9, r3, r8
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	3332      	adds	r3, #50	; 0x32
 8001ff8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ffc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002000:	f7fe fefe 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
 8002004:	6862      	ldr	r2, [r4, #4]
 8002006:	4368      	muls	r0, r5
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	fbb0 faf2 	udiv	sl, r0, r2
 800200e:	f7fe fef7 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002012:	6863      	ldr	r3, [r4, #4]
 8002014:	4368      	muls	r0, r5
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fbb0 f3f3 	udiv	r3, r0, r3
 800201c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002020:	fb09 a313 	mls	r3, r9, r3, sl
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	3332      	adds	r3, #50	; 0x32
 8002028:	fbb3 f3f9 	udiv	r3, r3, r9
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	ea43 0308 	orr.w	r3, r3, r8
 8002034:	e783      	b.n	8001f3e <UART_SetConfig+0xd2>
 8002036:	f7fe fed3 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 800203a:	6867      	ldr	r7, [r4, #4]
 800203c:	2519      	movs	r5, #25
 800203e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002042:	fb05 f300 	mul.w	r3, r5, r0
 8002046:	00bf      	lsls	r7, r7, #2
 8002048:	fbb3 f3f7 	udiv	r3, r3, r7
 800204c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002050:	011f      	lsls	r7, r3, #4
 8002052:	f7fe fec5 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8002056:	6863      	ldr	r3, [r4, #4]
 8002058:	4368      	muls	r0, r5
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002060:	f7fe febe 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8002064:	6863      	ldr	r3, [r4, #4]
 8002066:	4368      	muls	r0, r5
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002072:	fb09 8313 	mls	r3, r9, r3, r8
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	3332      	adds	r3, #50	; 0x32
 800207a:	fbb3 f3f9 	udiv	r3, r3, r9
 800207e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002082:	f7fe fead 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8002086:	6862      	ldr	r2, [r4, #4]
 8002088:	4368      	muls	r0, r5
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	fbb0 faf2 	udiv	sl, r0, r2
 8002090:	f7fe fea6 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8002094:	e7bd      	b.n	8002012 <UART_SetConfig+0x1a6>
 8002096:	bf00      	nop
 8002098:	40011000 	.word	0x40011000
 800209c:	40011400 	.word	0x40011400

080020a0 <HAL_UART_Init>:
{
 80020a0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80020a2:	4604      	mov	r4, r0
 80020a4:	b340      	cbz	r0, 80020f8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80020a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020ae:	b91b      	cbnz	r3, 80020b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80020b4:	f000 fd34 	bl	8002b20 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020ba:	2324      	movs	r3, #36	; 0x24
 80020bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020c0:	68d3      	ldr	r3, [r2, #12]
 80020c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020c8:	4620      	mov	r0, r4
 80020ca:	f7ff fecf 	bl	8001e6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80020ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80020ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80020f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80020f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020f8:	2001      	movs	r0, #1
}
 80020fa:	bd10      	pop	{r4, pc}

080020fc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // I2C Module adress

void lcd_send_cmd (char cmd)
{
 80020fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80020fe:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8002102:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002104:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 8002108:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002112:	f040 030c 	orr.w	r3, r0, #12
 8002116:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800211a:	f040 0008 	orr.w	r0, r0, #8
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800211e:	2364      	movs	r3, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002120:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002124:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	aa03      	add	r2, sp, #12
 800212c:	2304      	movs	r3, #4
 800212e:	214e      	movs	r1, #78	; 0x4e
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <lcd_send_cmd+0x40>)
 8002132:	f7fe fce5 	bl	8000b00 <HAL_I2C_Master_Transmit>
}
 8002136:	b005      	add	sp, #20
 8002138:	f85d fb04 	ldr.w	pc, [sp], #4
 800213c:	200000b8 	.word	0x200000b8

08002140 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002142:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002146:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002148:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 800214c:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800214e:	f043 0309 	orr.w	r3, r3, #9
 8002152:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002156:	f040 030d 	orr.w	r3, r0, #13
 800215a:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800215e:	f040 0009 	orr.w	r0, r0, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002162:	2364      	movs	r3, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002164:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002168:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	aa03      	add	r2, sp, #12
 8002170:	2304      	movs	r3, #4
 8002172:	214e      	movs	r1, #78	; 0x4e
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <lcd_send_data+0x40>)
 8002176:	f7fe fcc3 	bl	8000b00 <HAL_I2C_Master_Transmit>
}
 800217a:	b005      	add	sp, #20
 800217c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002180:	200000b8 	.word	0x200000b8

08002184 <lcd_init>:


void lcd_init (void)
{
 8002184:	b510      	push	{r4, lr}
	uint8_t i=0;
	HAL_Delay(100);
 8002186:	2064      	movs	r0, #100	; 0x64
 8002188:	f7fe fa14 	bl	80005b4 <HAL_Delay>
 800218c:	2403      	movs	r4, #3
	for(i=0;i<3;i++)  //sending 3 times: select 4-bit mode
	{
		lcd_send_cmd(0x03);
 800218e:	2003      	movs	r0, #3
 8002190:	f7ff ffb4 	bl	80020fc <lcd_send_cmd>
 8002194:	3c01      	subs	r4, #1
		HAL_Delay(45);
 8002196:	202d      	movs	r0, #45	; 0x2d
 8002198:	f7fe fa0c 	bl	80005b4 <HAL_Delay>
	for(i=0;i<3;i++)  //sending 3 times: select 4-bit mode
 800219c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80021a0:	d1f5      	bne.n	800218e <lcd_init+0xa>
	}
	lcd_send_cmd (0x02);
 80021a2:	2002      	movs	r0, #2
 80021a4:	f7ff ffaa 	bl	80020fc <lcd_send_cmd>
	HAL_Delay(100);
 80021a8:	2064      	movs	r0, #100	; 0x64
 80021aa:	f7fe fa03 	bl	80005b4 <HAL_Delay>
	lcd_send_cmd (0x28);
 80021ae:	2028      	movs	r0, #40	; 0x28
 80021b0:	f7ff ffa4 	bl	80020fc <lcd_send_cmd>
	HAL_Delay(1);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe f9fd 	bl	80005b4 <HAL_Delay>
	lcd_send_cmd (0x0c);
 80021ba:	200c      	movs	r0, #12
 80021bc:	f7ff ff9e 	bl	80020fc <lcd_send_cmd>
	HAL_Delay(1);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7fe f9f7 	bl	80005b4 <HAL_Delay>
	lcd_send_cmd (0x80);
 80021c6:	2080      	movs	r0, #128	; 0x80
 80021c8:	f7ff ff98 	bl	80020fc <lcd_send_cmd>
	HAL_Delay(1);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7fe f9f1 	bl	80005b4 <HAL_Delay>
	lcd_send_cmd (0x01);
 80021d2:	2001      	movs	r0, #1
}
 80021d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_send_cmd (0x01);
 80021d8:	f7ff bf90 	b.w	80020fc <lcd_send_cmd>

080021dc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80021dc:	b510      	push	{r4, lr}
 80021de:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 80021e0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80021e4:	b900      	cbnz	r0, 80021e8 <lcd_send_string+0xc>
}
 80021e6:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 80021e8:	f7ff ffaa 	bl	8002140 <lcd_send_data>
 80021ec:	e7f8      	b.n	80021e0 <lcd_send_string+0x4>
	...

080021f0 <cursor_jumpto_r_c>:

// Spring mit Cursor zur Reihe und Spalte
void cursor_jumpto_r_c (uint8_t row, uint8_t column)
{
 80021f0:	3801      	subs	r0, #1
 80021f2:	b2c0      	uxtb	r0, r0
 80021f4:	2803      	cmp	r0, #3
 80021f6:	bf9a      	itte	ls
 80021f8:	4b03      	ldrls	r3, [pc, #12]	; (8002208 <cursor_jumpto_r_c+0x18>)
 80021fa:	5c18      	ldrbls	r0, [r3, r0]
 80021fc:	2000      	movhi	r0, #0

		case 3: mycmd = 0x94;break;		// 1-010 1000

		case 4: mycmd = 0xD4;break;		// 1-011 1100
	}
	mycmd += (column-1);
 80021fe:	3901      	subs	r1, #1
 8002200:	4408      	add	r0, r1
	lcd_send_cmd (mycmd);
 8002202:	b2c0      	uxtb	r0, r0
 8002204:	f7ff bf7a 	b.w	80020fc <lcd_send_cmd>
 8002208:	08002cfc 	.word	0x08002cfc

0800220c <cursor_shift_left>:
}

// Shift cursor einmal nach links
void cursor_shift_left(void)
{
	lcd_send_cmd (0x10);
 800220c:	2010      	movs	r0, #16
 800220e:	f7ff bf75 	b.w	80020fc <lcd_send_cmd>

08002212 <cursor_shift_left_ntime>:
	lcd_send_cmd (0x14);
}

//Shift cursor n-mal nach links
void cursor_shift_left_ntime(uint8_t number)
{
 8002212:	b538      	push	{r3, r4, r5, lr}
 8002214:	4605      	mov	r5, r0
	for(int i = 0 ; i < number ; i++)
 8002216:	2400      	movs	r4, #0
 8002218:	42ac      	cmp	r4, r5
 800221a:	db00      	blt.n	800221e <cursor_shift_left_ntime+0xc>
		{
			cursor_shift_left();
		}
}
 800221c:	bd38      	pop	{r3, r4, r5, pc}
			cursor_shift_left();
 800221e:	f7ff fff5 	bl	800220c <cursor_shift_left>
	for(int i = 0 ; i < number ; i++)
 8002222:	3401      	adds	r4, #1
 8002224:	e7f8      	b.n	8002218 <cursor_shift_left_ntime+0x6>

08002226 <delete_some_chars>:
	lcd_send_data (delete_me);			// Ueberschreibe mit leerem Char
	cursor_shift_left();
}

void delete_some_chars (uint8_t number)
{
 8002226:	b598      	push	{r3, r4, r7, lr}
	char delete_me[number];
 8002228:	1dc3      	adds	r3, r0, #7
 800222a:	f023 0307 	bic.w	r3, r3, #7
{
 800222e:	af00      	add	r7, sp, #0
	char delete_me[number];
 8002230:	ebad 0d03 	sub.w	sp, sp, r3
{
 8002234:	4604      	mov	r4, r0

	for (int i=0; i<number; i++){
 8002236:	466b      	mov	r3, sp
	char delete_me[number];
 8002238:	4668      	mov	r0, sp
		delete_me[i]=' ';
 800223a:	2120      	movs	r1, #32
	for (int i=0; i<number; i++){
 800223c:	1a1a      	subs	r2, r3, r0
 800223e:	4294      	cmp	r4, r2
 8002240:	dc06      	bgt.n	8002250 <delete_some_chars+0x2a>
	}
	lcd_send_string (&delete_me);		// Ueberschreibe mit leerem String
 8002242:	f7ff ffcb 	bl	80021dc <lcd_send_string>
	cursor_shift_left_ntime(number);	// laufe mit dem Cursor zurueck
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff ffe3 	bl	8002212 <cursor_shift_left_ntime>
}
 800224c:	46bd      	mov	sp, r7
 800224e:	bd98      	pop	{r3, r4, r7, pc}
		delete_me[i]=' ';
 8002250:	f803 1b01 	strb.w	r1, [r3], #1
 8002254:	e7f2      	b.n	800223c <delete_some_chars+0x16>
	...

08002258 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(int duty)
{
 8002258:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225a:	2400      	movs	r4, #0
{
 800225c:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225e:	4621      	mov	r1, r4
{
 8002260:	4606      	mov	r6, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002262:	221c      	movs	r2, #28
 8002264:	a803      	add	r0, sp, #12

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002266:	4d15      	ldr	r5, [pc, #84]	; (80022bc <MX_TIM4_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002268:	9401      	str	r4, [sp, #4]
 800226a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226c:	f000 fd2c 	bl	8002cc8 <memset>
  htim4.Init.Prescaler = 840;
 8002270:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <MX_TIM4_Init+0x68>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 840;
 8002274:	f44f 7352 	mov.w	r3, #840	; 0x348
 8002278:	e885 000c 	stmia.w	r5, {r2, r3}
  htim4.Init.Period = 100;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800227c:	4628      	mov	r0, r5
  htim4.Init.Period = 100;
 800227e:	2364      	movs	r3, #100	; 0x64
 8002280:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002282:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002284:	f7ff fcd8 	bl	8001c38 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002288:	a901      	add	r1, sp, #4
 800228a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002290:	f7ff fda4 	bl	8001ddc <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002294:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = duty;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002296:	4622      	mov	r2, r4
 8002298:	a903      	add	r1, sp, #12
 800229a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800229c:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = duty;
 800229e:	9604      	str	r6, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a0:	9405      	str	r4, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a2:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a4:	f7ff fd12 	bl	8001ccc <HAL_TIM_PWM_ConfigChannel>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80022a8:	4621      	mov	r1, r4
 80022aa:	4628      	mov	r0, r5
 80022ac:	f7ff fd7c 	bl	8001da8 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022b0:	4628      	mov	r0, r5
 80022b2:	f000 fbbd 	bl	8002a30 <HAL_TIM_MspPostInit>

}
 80022b6:	b00a      	add	sp, #40	; 0x28
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	bf00      	nop
 80022bc:	2000007c 	.word	0x2000007c
 80022c0:	40000800 	.word	0x40000800

080022c4 <MX_TIM3_Init>:
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c6:	2500      	movs	r5, #0
{
 80022c8:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ca:	4629      	mov	r1, r5
{
 80022cc:	4606      	mov	r6, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ce:	221c      	movs	r2, #28
 80022d0:	a803      	add	r0, sp, #12
  htim3.Instance = TIM3;
 80022d2:	4c15      	ldr	r4, [pc, #84]	; (8002328 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	9501      	str	r5, [sp, #4]
 80022d6:	9502      	str	r5, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d8:	f000 fcf6 	bl	8002cc8 <memset>
  htim3.Init.Prescaler = 840;
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 840;
 80022e0:	f44f 7352 	mov.w	r3, #840	; 0x348
 80022e4:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022e8:	4620      	mov	r0, r4
  htim3.Init.Period = 100;
 80022ea:	2364      	movs	r3, #100	; 0x64
 80022ec:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022f0:	f7ff fca2 	bl	8001c38 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022f4:	a901      	add	r1, sp, #4
 80022f6:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fa:	9502      	str	r5, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022fc:	f7ff fd6e 	bl	8001ddc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002300:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002302:	2204      	movs	r2, #4
 8002304:	a903      	add	r1, sp, #12
 8002306:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002308:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = duty;
 800230a:	9604      	str	r6, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800230c:	9505      	str	r5, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230e:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002310:	f7ff fcdc 	bl	8001ccc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002314:	2104      	movs	r1, #4
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fd46 	bl	8001da8 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim3);
 800231c:	4620      	mov	r0, r4
 800231e:	f000 fb87 	bl	8002a30 <HAL_TIM_MspPostInit>
}
 8002322:	b00a      	add	sp, #40	; 0x28
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	bf00      	nop
 8002328:	2000010c 	.word	0x2000010c
 800232c:	40000400 	.word	0x40000400

08002330 <MX_TIM2_Init>:
{
 8002330:	b570      	push	{r4, r5, r6, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002332:	2400      	movs	r4, #0
{
 8002334:	b08a      	sub	sp, #40	; 0x28
  htim2.Instance = TIM2;
 8002336:	4d16      	ldr	r5, [pc, #88]	; (8002390 <MX_TIM2_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233a:	221c      	movs	r2, #28
 800233c:	4621      	mov	r1, r4
{
 800233e:	4606      	mov	r6, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002340:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002342:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002344:	f000 fcc0 	bl	8002cc8 <memset>
  htim2.Instance = TIM2;
 8002348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800234c:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 0;
 800234e:	e885 0018 	stmia.w	r5, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002352:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8002354:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002358:	f7ff fc6e 	bl	8001c38 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800235c:	a901      	add	r1, sp, #4
 800235e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002360:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002362:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002364:	f7ff fd3a 	bl	8001ddc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002368:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800236a:	2208      	movs	r2, #8
 800236c:	a903      	add	r1, sp, #12
 800236e:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002370:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = brightness;
 8002372:	9604      	str	r6, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002374:	9405      	str	r4, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002376:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002378:	f7ff fca8 	bl	8001ccc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800237c:	2108      	movs	r1, #8
 800237e:	4628      	mov	r0, r5
 8002380:	f7ff fd12 	bl	8001da8 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim2);
 8002384:	4628      	mov	r0, r5
 8002386:	f000 fb53 	bl	8002a30 <HAL_TIM_MspPostInit>
}
 800238a:	b00a      	add	sp, #40	; 0x28
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	bf00      	nop
 8002390:	20000168 	.word	0x20000168

08002394 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(int duty)
{
 8002394:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002396:	2400      	movs	r4, #0
{
 8002398:	b090      	sub	sp, #64	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239a:	251c      	movs	r5, #28
{
 800239c:	4606      	mov	r6, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239e:	462a      	mov	r2, r5
 80023a0:	4621      	mov	r1, r4
 80023a2:	a802      	add	r0, sp, #8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	9400      	str	r4, [sp, #0]
 80023a6:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a8:	f000 fc8e 	bl	8002cc8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ac:	4621      	mov	r1, r4
 80023ae:	462a      	mov	r2, r5
 80023b0:	a809      	add	r0, sp, #36	; 0x24

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023b2:	4d1c      	ldr	r5, [pc, #112]	; (8002424 <MX_TIM8_Init+0x90>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023b4:	f000 fc88 	bl	8002cc8 <memset>
  htim8.Init.Prescaler = 840;
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <MX_TIM8_Init+0x94>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	60ac      	str	r4, [r5, #8]
  htim8.Init.Prescaler = 840;
 80023bc:	f44f 7352 	mov.w	r3, #840	; 0x348
 80023c0:	e885 000c 	stmia.w	r5, {r2, r3}
  htim8.Init.Period = 100;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023c4:	4628      	mov	r0, r5
  htim8.Init.Period = 100;
 80023c6:	2364      	movs	r3, #100	; 0x64
 80023c8:	60eb      	str	r3, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ca:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 80023cc:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023ce:	f7ff fc33 	bl	8001c38 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023d2:	4669      	mov	r1, sp
 80023d4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d6:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023da:	f7ff fcff 	bl	8001ddc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023de:	2204      	movs	r2, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023e2:	a902      	add	r1, sp, #8
 80023e4:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e6:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = duty;
 80023e8:	9603      	str	r6, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ea:	9404      	str	r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023ec:	9405      	str	r4, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ee:	9406      	str	r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023f0:	9407      	str	r4, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023f2:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023f4:	f7ff fc6a 	bl	8001ccc <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023fc:	a909      	add	r1, sp, #36	; 0x24
 80023fe:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002400:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002402:	9409      	str	r4, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002404:	940a      	str	r4, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002406:	940b      	str	r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002408:	940c      	str	r4, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800240a:	940d      	str	r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800240c:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800240e:	f7ff fd07 	bl	8001e20 <HAL_TIMEx_ConfigBreakDeadTime>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8002412:	2104      	movs	r1, #4
 8002414:	4628      	mov	r0, r5
 8002416:	f7ff fcc7 	bl	8001da8 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800241a:	4628      	mov	r0, r5
 800241c:	f000 fb08 	bl	8002a30 <HAL_TIM_MspPostInit>

}
 8002420:	b010      	add	sp, #64	; 0x40
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	20000040 	.word	0x20000040
 8002428:	40010400 	.word	0x40010400

0800242c <SystemClock_Config>:
{
 800242c:	b530      	push	{r4, r5, lr}
 800242e:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002430:	2234      	movs	r2, #52	; 0x34
 8002432:	2100      	movs	r1, #0
 8002434:	a808      	add	r0, sp, #32
 8002436:	f000 fc47 	bl	8002cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243a:	2214      	movs	r2, #20
 800243c:	2100      	movs	r1, #0
 800243e:	a803      	add	r0, sp, #12
 8002440:	f000 fc42 	bl	8002cc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002444:	2100      	movs	r1, #0
 8002446:	225c      	movs	r2, #92	; 0x5c
 8002448:	a815      	add	r0, sp, #84	; 0x54
 800244a:	f000 fc3d 	bl	8002cc8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2500      	movs	r5, #0
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <SystemClock_Config+0xac>)
 8002452:	9501      	str	r5, [sp, #4]
 8002454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002456:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002468:	9502      	str	r5, [sp, #8]
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002478:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800247a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002482:	2306      	movs	r3, #6
 8002484:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002486:	2301      	movs	r3, #1
 8002488:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800248a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800248c:	2310      	movs	r3, #16
 800248e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002490:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002492:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002498:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800249c:	2304      	movs	r3, #4
 800249e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024a2:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024a4:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a6:	f7fe ff0b 	bl	80012c0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024aa:	230f      	movs	r3, #15
 80024ac:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ae:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ba:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024bc:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024be:	f7fe fbf5 	bl	8000cac <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024c2:	2320      	movs	r3, #32
 80024c4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c6:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024cc:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ce:	f7fe fca7 	bl	8000e20 <HAL_RCCEx_PeriphCLKConfig>
}
 80024d2:	b02d      	add	sp, #180	; 0xb4
 80024d4:	bd30      	pop	{r4, r5, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40007000 	.word	0x40007000

080024e0 <menu_print_cursor>:
  	switch(linenumber){
 80024e0:	2802      	cmp	r0, #2
  {
 80024e2:	b510      	push	{r4, lr}
 80024e4:	4604      	mov	r4, r0
  	switch(linenumber){
 80024e6:	d01a      	beq.n	800251e <menu_print_cursor+0x3e>
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d029      	beq.n	8002540 <menu_print_cursor+0x60>
 80024ec:	2801      	cmp	r0, #1
 80024ee:	d138      	bne.n	8002562 <menu_print_cursor+0x82>
  		case 1: cursor_jumpto_r_c (3, 2);
 80024f0:	2102      	movs	r1, #2
 80024f2:	2003      	movs	r0, #3
 80024f4:	f7ff fe7c 	bl	80021f0 <cursor_jumpto_r_c>
  				delete_some_chars(2);
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7ff fe94 	bl	8002226 <delete_some_chars>
  				cursor_jumpto_r_c (4, 2);
 80024fe:	2102      	movs	r1, #2
 8002500:	2004      	movs	r0, #4
 8002502:	f7ff fe75 	bl	80021f0 <cursor_jumpto_r_c>
   				delete_some_chars(2);
 8002506:	2002      	movs	r0, #2
 8002508:	f7ff fe8d 	bl	8002226 <delete_some_chars>
  				cursor_jumpto_r_c (1, 2);
 800250c:	2102      	movs	r1, #2
 800250e:	4620      	mov	r0, r4
				cursor_jumpto_r_c (4, 2);
 8002510:	f7ff fe6e 	bl	80021f0 <cursor_jumpto_r_c>
  				lcd_send_string("->");
 8002514:	4813      	ldr	r0, [pc, #76]	; (8002564 <menu_print_cursor+0x84>)
  }
 8002516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  				lcd_send_string("->");
 800251a:	f7ff be5f 	b.w	80021dc <lcd_send_string>
  		case 2: cursor_jumpto_r_c (1, 2);
 800251e:	4601      	mov	r1, r0
 8002520:	2001      	movs	r0, #1
 8002522:	f7ff fe65 	bl	80021f0 <cursor_jumpto_r_c>
				delete_some_chars(2);
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fe7d 	bl	8002226 <delete_some_chars>
				cursor_jumpto_r_c (4, 2);
 800252c:	4621      	mov	r1, r4
 800252e:	2004      	movs	r0, #4
 8002530:	f7ff fe5e 	bl	80021f0 <cursor_jumpto_r_c>
				delete_some_chars(2);
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff fe76 	bl	8002226 <delete_some_chars>
  				cursor_jumpto_r_c (3, 2);
 800253a:	4621      	mov	r1, r4
 800253c:	2003      	movs	r0, #3
 800253e:	e7e7      	b.n	8002510 <menu_print_cursor+0x30>
  		case 3: cursor_jumpto_r_c (1, 2);
 8002540:	2102      	movs	r1, #2
 8002542:	2001      	movs	r0, #1
 8002544:	f7ff fe54 	bl	80021f0 <cursor_jumpto_r_c>
				delete_some_chars(2);
 8002548:	2002      	movs	r0, #2
 800254a:	f7ff fe6c 	bl	8002226 <delete_some_chars>
				cursor_jumpto_r_c (3, 2);
 800254e:	2102      	movs	r1, #2
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff fe4d 	bl	80021f0 <cursor_jumpto_r_c>
				delete_some_chars(2);
 8002556:	2002      	movs	r0, #2
 8002558:	f7ff fe65 	bl	8002226 <delete_some_chars>
				cursor_jumpto_r_c (4, 2);
 800255c:	2102      	movs	r1, #2
 800255e:	2004      	movs	r0, #4
 8002560:	e7d6      	b.n	8002510 <menu_print_cursor+0x30>
 8002562:	bd10      	pop	{r4, pc}
 8002564:	08002d06 	.word	0x08002d06

08002568 <menu_print_text>:
  {
 8002568:	b508      	push	{r3, lr}
	cursor_jumpto_r_c(1, 5);
 800256a:	2105      	movs	r1, #5
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff fe3f 	bl	80021f0 <cursor_jumpto_r_c>
  	lcd_send_string("TIME");
 8002572:	4809      	ldr	r0, [pc, #36]	; (8002598 <menu_print_text+0x30>)
 8002574:	f7ff fe32 	bl	80021dc <lcd_send_string>
  	cursor_jumpto_r_c(3, 5);
 8002578:	2105      	movs	r1, #5
 800257a:	2003      	movs	r0, #3
 800257c:	f7ff fe38 	bl	80021f0 <cursor_jumpto_r_c>
  	lcd_send_string("SUNRISE");
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <menu_print_text+0x34>)
 8002582:	f7ff fe2b 	bl	80021dc <lcd_send_string>
  	cursor_jumpto_r_c(4, 5);
 8002586:	2004      	movs	r0, #4
 8002588:	2105      	movs	r1, #5
 800258a:	f7ff fe31 	bl	80021f0 <cursor_jumpto_r_c>
  	lcd_send_string("SUNSET");
 800258e:	4804      	ldr	r0, [pc, #16]	; (80025a0 <menu_print_text+0x38>)
  }
 8002590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	lcd_send_string("SUNSET");
 8002594:	f7ff be22 	b.w	80021dc <lcd_send_string>
 8002598:	08002d09 	.word	0x08002d09
 800259c:	08002d0e 	.word	0x08002d0e
 80025a0:	08002d16 	.word	0x08002d16

080025a4 <menu_print_time>:
  {
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4605      	mov	r5, r0
 80025a8:	460c      	mov	r4, r1
  	cursor_jumpto_r_c(3, 15);
 80025aa:	2003      	movs	r0, #3
 80025ac:	210f      	movs	r1, #15
 80025ae:	f7ff fe1f 	bl	80021f0 <cursor_jumpto_r_c>
  	delete_some_chars(5);
 80025b2:	2005      	movs	r0, #5
 80025b4:	f7ff fe37 	bl	8002226 <delete_some_chars>
	lcd_send_string(time_am);
 80025b8:	4628      	mov	r0, r5
 80025ba:	f7ff fe0f 	bl	80021dc <lcd_send_string>
  	cursor_jumpto_r_c(4, 15);
 80025be:	210f      	movs	r1, #15
 80025c0:	2004      	movs	r0, #4
 80025c2:	f7ff fe15 	bl	80021f0 <cursor_jumpto_r_c>
  	delete_some_chars(5);
 80025c6:	2005      	movs	r0, #5
 80025c8:	f7ff fe2d 	bl	8002226 <delete_some_chars>
  	lcd_send_string(time_pm);
 80025cc:	4620      	mov	r0, r4
  }
 80025ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  	lcd_send_string(time_pm);
 80025d2:	f7ff be03 	b.w	80021dc <lcd_send_string>

080025d6 <set_RGB>:

}

/* USER CODE BEGIN 4 */
void set_RGB(int red, int green, int blue)
{
 80025d6:	b538      	push	{r3, r4, r5, lr}
 80025d8:	460d      	mov	r5, r1
 80025da:	4614      	mov	r4, r2
	MX_TIM4_Init(red);
 80025dc:	f7ff fe3c 	bl	8002258 <MX_TIM4_Init>
	MX_TIM3_Init(green);
 80025e0:	4628      	mov	r0, r5
 80025e2:	f7ff fe6f 	bl	80022c4 <MX_TIM3_Init>
	MX_TIM8_Init(blue);
 80025e6:	4620      	mov	r0, r4
}
 80025e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MX_TIM8_Init(blue);
 80025ec:	f7ff bed2 	b.w	8002394 <MX_TIM8_Init>

080025f0 <main>:
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 80025f4:	f7fd ffb2 	bl	800055c <HAL_Init>
  SystemClock_Config();
 80025f8:	f7ff ff18 	bl	800242c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	2214      	movs	r2, #20
 80025fe:	2100      	movs	r1, #0
 8002600:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002602:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f000 fb60 	bl	8002cc8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002608:	4b9b      	ldr	r3, [pc, #620]	; (8002878 <main+0x288>)
 800260a:	9401      	str	r4, [sp, #4]
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800260e:	489b      	ldr	r0, [pc, #620]	; (800287c <main+0x28c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002610:	4e9b      	ldr	r6, [pc, #620]	; (8002880 <main+0x290>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002612:	f042 0204 	orr.w	r2, r2, #4
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	f002 0204 	and.w	r2, r2, #4
 800261e:	9201      	str	r2, [sp, #4]
 8002620:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002622:	9402      	str	r4, [sp, #8]
 8002624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
 800262c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002632:	9202      	str	r2, [sp, #8]
 8002634:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	9403      	str	r4, [sp, #12]
 8002638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
 8002640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002642:	f002 0201 	and.w	r2, r2, #1
 8002646:	9203      	str	r2, [sp, #12]
 8002648:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	9404      	str	r4, [sp, #16]
 800264c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264e:	f042 0202 	orr.w	r2, r2, #2
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800265c:	4622      	mov	r2, r4
 800265e:	2160      	movs	r1, #96	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002660:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8002662:	f7fe f8fd 	bl	8000860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002666:	4622      	mov	r2, r4
 8002668:	2120      	movs	r1, #32
 800266a:	4886      	ldr	r0, [pc, #536]	; (8002884 <main+0x294>)
 800266c:	f7fe f8f8 	bl	8000860 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002674:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002676:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002678:	4b83      	ldr	r3, [pc, #524]	; (8002888 <main+0x298>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800267a:	4884      	ldr	r0, [pc, #528]	; (800288c <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800267c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800267e:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002682:	f7fe f813 	bl	80006ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002686:	a90a      	add	r1, sp, #40	; 0x28
 8002688:	4880      	ldr	r0, [pc, #512]	; (800288c <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800268a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800268e:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f7fe f80b 	bl	80006ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8002696:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	a90a      	add	r1, sp, #40	; 0x28
 800269a:	4878      	ldr	r0, [pc, #480]	; (800287c <main+0x28c>)
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 800269c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269e:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f7fe f802 	bl	80006ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026a8:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	a90a      	add	r1, sp, #40	; 0x28
 80026ae:	4873      	ldr	r0, [pc, #460]	; (800287c <main+0x28c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026b0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026b2:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026b4:	f04f 0820 	mov.w	r8, #32
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b8:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f7fd fff7 	bl	80006ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	a90a      	add	r1, sp, #40	; 0x28
 80026c0:	4870      	ldr	r0, [pc, #448]	; (8002884 <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026c2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c6:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f7fd ffee 	bl	80006ac <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80026d0:	4622      	mov	r2, r4
 80026d2:	4621      	mov	r1, r4
 80026d4:	2007      	movs	r0, #7
 80026d6:	f7fd ff93 	bl	8000600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80026da:	2007      	movs	r0, #7
 80026dc:	f7fd ffc4 	bl	8000668 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026e0:	4622      	mov	r2, r4
 80026e2:	4621      	mov	r1, r4
 80026e4:	2017      	movs	r0, #23
 80026e6:	f7fd ff8b 	bl	8000600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026ea:	2017      	movs	r0, #23
 80026ec:	f7fd ffbc 	bl	8000668 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026f0:	4621      	mov	r1, r4
 80026f2:	4622      	mov	r2, r4
 80026f4:	2028      	movs	r0, #40	; 0x28
 80026f6:	f7fd ff83 	bl	8000600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026fa:	2028      	movs	r0, #40	; 0x28
 80026fc:	f7fd ffb4 	bl	8000668 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8002700:	4863      	ldr	r0, [pc, #396]	; (8002890 <main+0x2a0>)
  huart2.Init.BaudRate = 115200;
 8002702:	4a64      	ldr	r2, [pc, #400]	; (8002894 <main+0x2a4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002704:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002706:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800270a:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800270e:	230c      	movs	r3, #12
 8002710:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002712:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002714:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002716:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800271a:	f7ff fcc1 	bl	80020a0 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 800271e:	485e      	ldr	r0, [pc, #376]	; (8002898 <main+0x2a8>)
  hi2c1.Init.ClockSpeed = 100000;
 8002720:	495e      	ldr	r1, [pc, #376]	; (800289c <main+0x2ac>)
 8002722:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <main+0x2b0>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002724:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002726:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800272e:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8002730:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002732:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002734:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002736:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002738:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800273a:	f7fe f973 	bl	8000a24 <HAL_I2C_Init>
  MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff fd8a 	bl	8002258 <MX_TIM4_Init>
  MX_TIM3_Init(0);
 8002744:	4620      	mov	r0, r4
 8002746:	f7ff fdbd 	bl	80022c4 <MX_TIM3_Init>
  MX_TIM8_Init(0);
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff fe22 	bl	8002394 <MX_TIM8_Init>
  MX_TIM2_Init(0);
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff fded 	bl	8002330 <MX_TIM2_Init>
  RTC_TimeTypeDef sTime = {0};
 8002756:	2214      	movs	r2, #20
 8002758:	4621      	mov	r1, r4
 800275a:	eb0d 0002 	add.w	r0, sp, r2
 800275e:	f000 fab3 	bl	8002cc8 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8002762:	2228      	movs	r2, #40	; 0x28
 8002764:	4621      	mov	r1, r4
 8002766:	eb0d 0002 	add.w	r0, sp, r2
  hrtc.Instance = RTC;
 800276a:	4e4e      	ldr	r6, [pc, #312]	; (80028a4 <main+0x2b4>)
  RTC_DateTypeDef sDate = {0};
 800276c:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800276e:	f000 faab 	bl	8002cc8 <memset>
  hrtc.Instance = RTC;
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <main+0x2b8>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002774:	6134      	str	r4, [r6, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002776:	e886 0018 	stmia.w	r6, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 800277a:	237f      	movs	r3, #127	; 0x7f
 800277c:	60b3      	str	r3, [r6, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800277e:	4630      	mov	r0, r6
  hrtc.Init.SynchPrediv = 255;
 8002780:	23ff      	movs	r3, #255	; 0xff
 8002782:	60f3      	str	r3, [r6, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002784:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002786:	61b4      	str	r4, [r6, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002788:	f7fe ff92 	bl	80016b0 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800278c:	462a      	mov	r2, r5
 800278e:	a905      	add	r1, sp, #20
 8002790:	4630      	mov	r0, r6
  sTime.Hours = 0x0;
 8002792:	f88d 4014 	strb.w	r4, [sp, #20]
  sTime.Minutes = 0x0;
 8002796:	f88d 4015 	strb.w	r4, [sp, #21]
  sTime.Seconds = 0x0;
 800279a:	f88d 4016 	strb.w	r4, [sp, #22]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800279e:	9408      	str	r4, [sp, #32]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027a0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027a2:	f7ff f83e 	bl	8001822 <HAL_RTC_SetTime>
  sDate.Year = 0x18;
 80027a6:	2318      	movs	r3, #24
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027a8:	462a      	mov	r2, r5
 80027aa:	4669      	mov	r1, sp
 80027ac:	4630      	mov	r0, r6
  sDate.Year = 0x18;
 80027ae:	f88d 3003 	strb.w	r3, [sp, #3]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027b2:	f88d 5000 	strb.w	r5, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 80027b6:	f88d 5001 	strb.w	r5, [sp, #1]
  sDate.Date = 0x1;
 80027ba:	f88d 5002 	strb.w	r5, [sp, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027be:	f7fe ffd0 	bl	8001762 <HAL_RTC_SetDate>
  sAlarm.Alarm = RTC_ALARM_A;
 80027c2:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027c6:	462a      	mov	r2, r5
 80027c8:	a90a      	add	r1, sp, #40	; 0x28
 80027ca:	4630      	mov	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 80027cc:	9313      	str	r3, [sp, #76]	; 0x4c
  sAlarm.AlarmTime.Hours = 0x0;
 80027ce:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  sAlarm.AlarmTime.Minutes = 0x0;
 80027d2:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  sAlarm.AlarmTime.Seconds = 0x0;
 80027d6:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80027da:	940b      	str	r4, [sp, #44]	; 0x2c
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027dc:	940d      	str	r4, [sp, #52]	; 0x34
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027de:	940e      	str	r4, [sp, #56]	; 0x38
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027e0:	940f      	str	r4, [sp, #60]	; 0x3c
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027e2:	9410      	str	r4, [sp, #64]	; 0x40
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027e4:	9411      	str	r4, [sp, #68]	; 0x44
  sAlarm.AlarmDateWeekDay = 0x1;
 80027e6:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027ea:	f7ff f88b 	bl	8001904 <HAL_RTC_SetAlarm_IT>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80027ee:	462a      	mov	r2, r5
 80027f0:	4641      	mov	r1, r8
 80027f2:	4822      	ldr	r0, [pc, #136]	; (800287c <main+0x28c>)
 80027f4:	f7fe f834 	bl	8000860 <HAL_GPIO_WritePin>
   lcd_init();
 80027f8:	f7ff fcc4 	bl	8002184 <lcd_init>
   menu_print_cursor (1);
 80027fc:	4628      	mov	r0, r5
 80027fe:	f7ff fe6f 	bl	80024e0 <menu_print_cursor>
   menu_print_text();
 8002802:	f7ff feb1 	bl	8002568 <menu_print_text>
   char AM[] = "08:15";
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <main+0x2bc>)
   char PM[12] = "18:12";
 8002808:	f8cd 402e 	str.w	r4, [sp, #46]	; 0x2e
   char AM[] = "08:15";
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	889b      	ldrh	r3, [r3, #4]
 8002810:	f8ad 3018 	strh.w	r3, [sp, #24]
   char PM[12] = "18:12";
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <main+0x2c0>)
   char AM[] = "08:15";
 8002816:	9005      	str	r0, [sp, #20]
   char PM[12] = "18:12";
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	900a      	str	r0, [sp, #40]	; 0x28
 800281c:	889b      	ldrh	r3, [r3, #4]
 800281e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   menu_print_time(&AM, &PM);
 8002822:	a90a      	add	r1, sp, #40	; 0x28
 8002824:	a805      	add	r0, sp, #20
   char PM[12] = "18:12";
 8002826:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
   menu_print_time(&AM, &PM);
 800282a:	f7ff febb 	bl	80025a4 <menu_print_time>
   menu_print_cursor(3);
 800282e:	2003      	movs	r0, #3
 8002830:	f7ff fe56 	bl	80024e0 <menu_print_cursor>
   menu_print_text();
 8002834:	f7ff fe98 	bl	8002568 <menu_print_text>
   menu_print_cursor(2);
 8002838:	4638      	mov	r0, r7
 800283a:	f7ff fe51 	bl	80024e0 <menu_print_cursor>
	set_RGB(25,0,0);
 800283e:	2200      	movs	r2, #0
 8002840:	4611      	mov	r1, r2
 8002842:	2019      	movs	r0, #25
 8002844:	f7ff fec7 	bl	80025d6 <set_RGB>
	HAL_Delay(1000);
 8002848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800284c:	f7fd feb2 	bl	80005b4 <HAL_Delay>
	set_RGB(75,0,0);
 8002850:	2200      	movs	r2, #0
 8002852:	4611      	mov	r1, r2
 8002854:	204b      	movs	r0, #75	; 0x4b
 8002856:	f7ff febe 	bl	80025d6 <set_RGB>
	HAL_Delay(1000);
 800285a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800285e:	f7fd fea9 	bl	80005b4 <HAL_Delay>
	set_RGB(100,0,0);
 8002862:	2200      	movs	r2, #0
 8002864:	4611      	mov	r1, r2
 8002866:	2064      	movs	r0, #100	; 0x64
 8002868:	f7ff feb5 	bl	80025d6 <set_RGB>
	HAL_Delay(1000);
 800286c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002870:	f7fd fea0 	bl	80005b4 <HAL_Delay>
 8002874:	e7e3      	b.n	800283e <main+0x24e>
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40020000 	.word	0x40020000
 8002880:	10110000 	.word	0x10110000
 8002884:	40020400 	.word	0x40020400
 8002888:	10210000 	.word	0x10210000
 800288c:	40020800 	.word	0x40020800
 8002890:	200001a4 	.word	0x200001a4
 8002894:	40004400 	.word	0x40004400
 8002898:	200000b8 	.word	0x200000b8
 800289c:	40005400 	.word	0x40005400
 80028a0:	000186a0 	.word	0x000186a0
 80028a4:	20000148 	.word	0x20000148
 80028a8:	40002800 	.word	0x40002800
 80028ac:	08002d00 	.word	0x08002d00
 80028b0:	08002cf0 	.word	0x08002cf0

080028b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_MspInit+0x3c>)
 80028b8:	2100      	movs	r1, #0
 80028ba:	9100      	str	r1, [sp, #0]
 80028bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
 80028c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80028ca:	9200      	str	r2, [sp, #0]
 80028cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	9101      	str	r1, [sp, #4]
 80028d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028e0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028e4:	f7fd fe7a 	bl	80005dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e8:	b003      	add	sp, #12
 80028ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f4:	b530      	push	{r4, r5, lr}
 80028f6:	4604      	mov	r4, r0
 80028f8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fa:	2214      	movs	r2, #20
 80028fc:	2100      	movs	r1, #0
 80028fe:	a803      	add	r0, sp, #12
 8002900:	f000 f9e2 	bl	8002cc8 <memset>
  if(hi2c->Instance==I2C1)
 8002904:	6822      	ldr	r2, [r4, #0]
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_I2C_MspInit+0x68>)
 8002908:	429a      	cmp	r2, r3
 800290a:	d124      	bne.n	8002956 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290c:	4c14      	ldr	r4, [pc, #80]	; (8002960 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	4815      	ldr	r0, [pc, #84]	; (8002964 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002910:	2500      	movs	r5, #0
 8002912:	9501      	str	r5, [sp, #4]
 8002914:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	6323      	str	r3, [r4, #48]	; 0x30
 800291c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800292a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292c:	2312      	movs	r3, #18
 800292e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002930:	2301      	movs	r3, #1
 8002932:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800293a:	2304      	movs	r3, #4
 800293c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f7fd feb5 	bl	80006ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002942:	9502      	str	r5, [sp, #8]
 8002944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294a:	6423      	str	r3, [r4, #64]	; 0x40
 800294c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800294e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002956:	b009      	add	sp, #36	; 0x24
 8002958:	bd30      	pop	{r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	40005400 	.word	0x40005400
 8002960:	40023800 	.word	0x40023800
 8002964:	40020400 	.word	0x40020400

08002968 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002968:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 800296a:	6802      	ldr	r2, [r0, #0]
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_RTC_MspInit+0x28>)
 800296e:	429a      	cmp	r2, r3
 8002970:	d10c      	bne.n	800298c <HAL_RTC_MspInit+0x24>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RTC_MspInit+0x2c>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002978:	2200      	movs	r2, #0
 800297a:	2029      	movs	r0, #41	; 0x29
 800297c:	4611      	mov	r1, r2
 800297e:	f7fd fe3f 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002982:	2029      	movs	r0, #41	; 0x29
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002988:	f7fd be6e 	b.w	8000668 <HAL_NVIC_EnableIRQ>
 800298c:	bd08      	pop	{r3, pc}
 800298e:	bf00      	nop
 8002990:	40002800 	.word	0x40002800
 8002994:	42470e3c 	.word	0x42470e3c

08002998 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8002998:	6803      	ldr	r3, [r0, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800299e:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM2)
 80029a0:	d10d      	bne.n	80029be <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_TIM_PWM_MspInit+0x88>)
 80029a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029ba:	b004      	add	sp, #16
 80029bc:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM3)
 80029be:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_TIM_PWM_MspInit+0x8c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10c      	bne.n	80029de <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_TIM_PWM_MspInit+0x88>)
 80029ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029cc:	f042 0202 	orr.w	r2, r2, #2
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	9b01      	ldr	r3, [sp, #4]
 80029dc:	e7ed      	b.n	80029ba <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM4)
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <HAL_TIM_PWM_MspInit+0x90>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10c      	bne.n	80029fe <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	9302      	str	r3, [sp, #8]
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <HAL_TIM_PWM_MspInit+0x88>)
 80029ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ec:	f042 0204 	orr.w	r2, r2, #4
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	9302      	str	r3, [sp, #8]
 80029fa:	9b02      	ldr	r3, [sp, #8]
 80029fc:	e7dd      	b.n	80029ba <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM8)
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_TIM_PWM_MspInit+0x94>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d1da      	bne.n	80029ba <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	9303      	str	r3, [sp, #12]
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_TIM_PWM_MspInit+0x88>)
 8002a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0c:	f042 0202 	orr.w	r2, r2, #2
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	9303      	str	r3, [sp, #12]
 8002a1a:	9b03      	ldr	r3, [sp, #12]
}
 8002a1c:	e7cd      	b.n	80029ba <HAL_TIM_PWM_MspInit+0x22>
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40000800 	.word	0x40000800
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a30:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a32:	2214      	movs	r2, #20
{
 8002a34:	b08a      	sub	sp, #40	; 0x28
 8002a36:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	2100      	movs	r1, #0
 8002a3a:	eb0d 0002 	add.w	r0, sp, r2
 8002a3e:	f000 f943 	bl	8002cc8 <memset>
  if(htim->Instance==TIM2)
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d115      	bne.n	8002a76 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_TIM_MspPostInit+0xd4>)
 8002a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a52:	f042 0202 	orr.w	r2, r2, #2
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	9b01      	ldr	r3, [sp, #4]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a66:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a6c:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a6e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	a905      	add	r1, sp, #20
 8002a72:	4825      	ldr	r0, [pc, #148]	; (8002b08 <HAL_TIM_MspPostInit+0xd8>)
 8002a74:	e015      	b.n	8002aa2 <HAL_TIM_MspPostInit+0x72>
  else if(htim->Instance==TIM3)
 8002a76:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <HAL_TIM_MspPostInit+0xdc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d116      	bne.n	8002aaa <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9302      	str	r3, [sp, #8]
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_TIM_MspPostInit+0xd4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	4823      	ldr	r0, [pc, #140]	; (8002b10 <HAL_TIM_MspPostInit+0xe0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	9302      	str	r3, [sp, #8]
 8002a94:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a9e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	f7fd fe03 	bl	80006ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002aa6:	b00a      	add	sp, #40	; 0x28
 8002aa8:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_TIM_MspPostInit+0xe4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d110      	bne.n	8002ad2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9303      	str	r3, [sp, #12]
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <HAL_TIM_MspPostInit+0xd4>)
 8002ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab8:	f042 0202 	orr.w	r2, r2, #2
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	9303      	str	r3, [sp, #12]
 8002ac6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ac8:	2340      	movs	r3, #64	; 0x40
 8002aca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	9306      	str	r3, [sp, #24]
 8002ad0:	e7cd      	b.n	8002a6e <HAL_TIM_MspPostInit+0x3e>
  else if(htim->Instance==TIM8)
 8002ad2:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <HAL_TIM_MspPostInit+0xe8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d1e6      	bne.n	8002aa6 <HAL_TIM_MspPostInit+0x76>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9304      	str	r3, [sp, #16]
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_TIM_MspPostInit+0xd4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ade:	480f      	ldr	r0, [pc, #60]	; (8002b1c <HAL_TIM_MspPostInit+0xec>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae2:	f042 0204 	orr.w	r2, r2, #4
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	9304      	str	r3, [sp, #16]
 8002af0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002afa:	2303      	movs	r3, #3
 8002afc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afe:	a905      	add	r1, sp, #20
 8002b00:	e7cf      	b.n	8002aa2 <HAL_TIM_MspPostInit+0x72>
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40000800 	.word	0x40000800
 8002b18:	40010400 	.word	0x40010400
 8002b1c:	40020800 	.word	0x40020800

08002b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b20:	b510      	push	{r4, lr}
 8002b22:	4604      	mov	r4, r0
 8002b24:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b26:	2214      	movs	r2, #20
 8002b28:	2100      	movs	r1, #0
 8002b2a:	a803      	add	r0, sp, #12
 8002b2c:	f000 f8cc 	bl	8002cc8 <memset>
  if(huart->Instance==USART2)
 8002b30:	6822      	ldr	r2, [r4, #0]
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_UART_MspInit+0x68>)
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d124      	bne.n	8002b82 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b38:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	9101      	str	r1, [sp, #4]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	4812      	ldr	r0, [pc, #72]	; (8002b8c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
 8002b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002b50:	9201      	str	r2, [sp, #4]
 8002b52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	9102      	str	r1, [sp, #8]
 8002b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b70:	2301      	movs	r3, #1
 8002b72:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b78:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f7fd fd95 	bl	80006ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b82:	b008      	add	sp, #32
 8002b84:	bd10      	pop	{r4, pc}
 8002b86:	bf00      	nop
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40020000 	.word	0x40020000

08002b90 <NMI_Handler>:
 8002b90:	4770      	bx	lr

08002b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	e7fe      	b.n	8002b94 <MemManage_Handler>

08002b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b96:	e7fe      	b.n	8002b96 <BusFault_Handler>

08002b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b98:	e7fe      	b.n	8002b98 <UsageFault_Handler>

08002b9a <SVC_Handler>:
 8002b9a:	4770      	bx	lr

08002b9c <DebugMon_Handler>:
 8002b9c:	4770      	bx	lr

08002b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9e:	4770      	bx	lr

08002ba0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba0:	f7fd bcf6 	b.w	8000590 <HAL_IncTick>

08002ba4 <EXTI1_IRQHandler>:
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  // TODO what happens when button is pushed?

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f7fd be61 	b.w	800086c <HAL_GPIO_EXTI_IRQHandler>
	...

08002bac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */


  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <EXTI9_5_IRQHandler+0x1c>)
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
	  //TODO what happens when the rotary encoder is turned and pulls potential of this pin to ground?
	  //TODO check for set flag in main (polling) and call menu function if flag is set
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 8002bb0:	f44f 7080 	mov.w	r0, #256	; 0x100
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
 8002bb4:	695a      	ldr	r2, [r3, #20]
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
 8002bb6:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 8002bb8:	f7fd fe58 	bl	800086c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 8002bbc:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 8002bc4:	f7fd be52 	b.w	800086c <HAL_GPIO_EXTI_IRQHandler>
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002bcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bd0:	f7fd be4c 	b.w	800086c <HAL_GPIO_EXTI_IRQHandler>

08002bd4 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002bd4:	4801      	ldr	r0, [pc, #4]	; (8002bdc <RTC_Alarm_IRQHandler+0x8>)
 8002bd6:	f7fe bd0f 	b.w	80015f8 <HAL_RTC_AlarmIRQHandler>
 8002bda:	bf00      	nop
 8002bdc:	20000148 	.word	0x20000148

08002be0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be0:	490f      	ldr	r1, [pc, #60]	; (8002c20 <SystemInit+0x40>)
 8002be2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002be6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <SystemInit+0x44>)
 8002bf0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002bf2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002bfa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c06:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <SystemInit+0x48>)
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c12:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c14:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c1a:	608b      	str	r3, [r1, #8]
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000ed00 	.word	0xe000ed00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	24003010 	.word	0x24003010

08002c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c32:	e003      	b.n	8002c3c <LoopCopyDataInit>

08002c34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c3a:	3104      	adds	r1, #4

08002c3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c3c:	480b      	ldr	r0, [pc, #44]	; (8002c6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c44:	d3f6      	bcc.n	8002c34 <CopyDataInit>
  ldr  r2, =_sbss
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c48:	e002      	b.n	8002c50 <LoopFillZerobss>

08002c4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c4c:	f842 3b04 	str.w	r3, [r2], #4

08002c50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c54:	d3f9      	bcc.n	8002c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c56:	f7ff ffc3 	bl	8002be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f000 f811 	bl	8002c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5e:	f7ff fcc7 	bl	80025f0 <main>
  bx  lr    
 8002c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c68:	08002d48 	.word	0x08002d48
  ldr  r0, =_sdata
 8002c6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c70:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002c74:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002c78:	200001e4 	.word	0x200001e4

08002c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC_IRQHandler>
	...

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	4e0d      	ldr	r6, [pc, #52]	; (8002cb8 <__libc_init_array+0x38>)
 8002c84:	4c0d      	ldr	r4, [pc, #52]	; (8002cbc <__libc_init_array+0x3c>)
 8002c86:	1ba4      	subs	r4, r4, r6
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	42a5      	cmp	r5, r4
 8002c8e:	d109      	bne.n	8002ca4 <__libc_init_array+0x24>
 8002c90:	4e0b      	ldr	r6, [pc, #44]	; (8002cc0 <__libc_init_array+0x40>)
 8002c92:	4c0c      	ldr	r4, [pc, #48]	; (8002cc4 <__libc_init_array+0x44>)
 8002c94:	f000 f820 	bl	8002cd8 <_init>
 8002c98:	1ba4      	subs	r4, r4, r6
 8002c9a:	10a4      	asrs	r4, r4, #2
 8002c9c:	2500      	movs	r5, #0
 8002c9e:	42a5      	cmp	r5, r4
 8002ca0:	d105      	bne.n	8002cae <__libc_init_array+0x2e>
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ca8:	4798      	blx	r3
 8002caa:	3501      	adds	r5, #1
 8002cac:	e7ee      	b.n	8002c8c <__libc_init_array+0xc>
 8002cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cb2:	4798      	blx	r3
 8002cb4:	3501      	adds	r5, #1
 8002cb6:	e7f2      	b.n	8002c9e <__libc_init_array+0x1e>
 8002cb8:	08002d40 	.word	0x08002d40
 8002cbc:	08002d40 	.word	0x08002d40
 8002cc0:	08002d40 	.word	0x08002d40
 8002cc4:	08002d44 	.word	0x08002d44

08002cc8 <memset>:
 8002cc8:	4402      	add	r2, r0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <memset+0xa>
 8002cd0:	4770      	bx	lr
 8002cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd6:	e7f9      	b.n	8002ccc <memset+0x4>

08002cd8 <_init>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr

08002ce4 <_fini>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr
>>>>>>> LCD
=======
08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4e0d      	ldr	r6, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1ba4      	subs	r4, r4, r6
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2500      	movs	r5, #0
 8004214:	42a5      	cmp	r5, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4e0b      	ldr	r6, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f000 f820 	bl	8004260 <_init>
 8004220:	1ba4      	subs	r4, r4, r6
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2500      	movs	r5, #0
 8004226:	42a5      	cmp	r5, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004230:	4798      	blx	r3
 8004232:	3501      	adds	r5, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800423a:	4798      	blx	r3
 800423c:	3501      	adds	r5, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	08004298 	.word	0x08004298
 8004244:	08004298 	.word	0x08004298
 8004248:	08004298 	.word	0x08004298
 800424c:	0800429c 	.word	0x0800429c

08004250 <memset>:
 8004250:	4402      	add	r2, r0
 8004252:	4603      	mov	r3, r0
 8004254:	4293      	cmp	r3, r2
 8004256:	d100      	bne.n	800425a <memset+0xa>
 8004258:	4770      	bx	lr
 800425a:	f803 1b01 	strb.w	r1, [r3], #1
 800425e:	e7f9      	b.n	8004254 <memset+0x4>

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
>>>>>>> sunset_sunrise
