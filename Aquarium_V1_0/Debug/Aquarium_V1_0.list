
Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080044dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  20000010  080044ec  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000234  080044ec  00020234  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165ac  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002548  00000000  00000000  000365ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fd8  00000000  00000000  00038b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee0  00000000  00000000  00039b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007607  00000000  00000000  0003a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f3d  00000000  00000000  00041ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046f34  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043cc  00000000  00000000  00046fb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800449c 	.word	0x0800449c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	0800449c 	.word	0x0800449c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f925 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 fcc6 	bl	8003ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f93d 	bl	80007f6 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f905 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	2000004c 	.word	0x2000004c

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000004c 	.word	0x2000004c

080005f8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <NVIC_EnableIRQ+0x30>)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	095b      	lsrs	r3, r3, #5
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	f002 021f 	and.w	r2, r2, #31
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da0b      	bge.n	80006bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	490d      	ldr	r1, [pc, #52]	; (80006dc <NVIC_SetPriority+0x4c>)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	3b04      	subs	r3, #4
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ba:	e009      	b.n	80006d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	4908      	ldr	r1, [pc, #32]	; (80006e0 <NVIC_SetPriority+0x50>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	2201      	movs	r2, #1
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	401a      	ands	r2, r3
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072a:	2101      	movs	r1, #1
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	1e59      	subs	r1, r3, #1
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff90 	bl	8000690 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff2f 	bl	80005f8 <NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff44 	bl	8000640 <NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff37 	bl	800065c <NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e165      	b.n	8000af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8154 	bne.w	8000af2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0x4a>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b12      	cmp	r3, #18
 8000858:	d123      	bne.n	80008a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	220f      	movs	r2, #15
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	08da      	lsrs	r2, r3, #3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0203 	and.w	r2, r3, #3
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d00b      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d007      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ea:	2b11      	cmp	r3, #17
 80008ec:	d003      	beq.n	80008f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d130      	bne.n	8000958 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4313      	orrs	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	f003 0201 	and.w	r2, r3, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80ae 	beq.w	8000af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4a5c      	ldr	r2, [pc, #368]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099c:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 800099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b2:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <HAL_GPIO_Init+0x300>)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <HAL_GPIO_Init+0x304>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x21a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4d      	ldr	r2, [pc, #308]	; (8000b18 <HAL_GPIO_Init+0x308>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x216>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_GPIO_Init+0x30c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x212>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4b      	ldr	r2, [pc, #300]	; (8000b20 <HAL_GPIO_Init+0x310>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x20e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4a      	ldr	r2, [pc, #296]	; (8000b24 <HAL_GPIO_Init+0x314>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x20a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <HAL_GPIO_Init+0x318>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a48      	ldr	r2, [pc, #288]	; (8000b2c <HAL_GPIO_Init+0x31c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x202>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x21c>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a98:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_GPIO_Init+0x320>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	f67f ae96 	bls.w	800082c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b00:	bf00      	nop
 8000b02:	3724      	adds	r7, #36	; 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b50:	e003      	b.n	8000b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	041a      	lsls	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	619a      	str	r2, [r3, #24]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f806 	bl	8000b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40013c00 	.word	0x40013c00

08000b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0c8      	b.n	8000d5c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d106      	bne.n	8000be4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f003 f9a2 	bl	8003f28 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2224      	movs	r2, #36	; 0x24
 8000be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	f022 0201 	bic.w	r2, r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bfc:	f000 f9a6 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 8000c00:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <HAL_I2C_Init+0x1b4>)
 8000c06:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0a:	0c9b      	lsrs	r3, r3, #18
 8000c0c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4952      	ldr	r1, [pc, #328]	; (8000d68 <HAL_I2C_Init+0x1b8>)
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d802      	bhi.n	8000c2a <HAL_I2C_Init+0x7a>
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	e009      	b.n	8000c3e <HAL_I2C_Init+0x8e>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c30:	fb01 f303 	mul.w	r3, r1, r3
 8000c34:	494d      	ldr	r1, [pc, #308]	; (8000d6c <HAL_I2C_Init+0x1bc>)
 8000c36:	fba1 1303 	umull	r1, r3, r1, r3
 8000c3a:	099b      	lsrs	r3, r3, #6
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a47      	ldr	r2, [pc, #284]	; (8000d68 <HAL_I2C_Init+0x1b8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d812      	bhi.n	8000c74 <HAL_I2C_Init+0xc4>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d906      	bls.n	8000c70 <HAL_I2C_Init+0xc0>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	e045      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e043      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10f      	bne.n	8000c9c <HAL_I2C_Init+0xec>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	e010      	b.n	8000cbe <HAL_I2C_Init+0x10e>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009a      	lsls	r2, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_I2C_Init+0x116>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e01a      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10a      	bne.n	8000ce4 <HAL_I2C_Init+0x134>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce2:	e00b      	b.n	8000cfc <HAL_I2C_Init+0x14c>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	009a      	lsls	r2, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	69d1      	ldr	r1, [r2, #28]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6a12      	ldr	r2, [r2, #32]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6911      	ldr	r1, [r2, #16]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68d2      	ldr	r2, [r2, #12]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6951      	ldr	r1, [r2, #20]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6992      	ldr	r2, [r2, #24]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	f042 0201 	orr.w	r2, r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2220      	movs	r2, #32
 8000d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	431bde83 	.word	0x431bde83
 8000d68:	000186a0 	.word	0x000186a0
 8000d6c:	10624dd3 	.word	0x10624dd3

08000d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0ca      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d84:	4b67      	ldr	r3, [pc, #412]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 020f 	and.w	r2, r3, #15
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d20c      	bcs.n	8000dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d9a:	4b62      	ldr	r3, [pc, #392]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 020f 	and.w	r2, r3, #15
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e0b6      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d020      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000dc4:	4a58      	ldr	r2, [pc, #352]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dde:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000de8:	494f      	ldr	r1, [pc, #316]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d044      	beq.n	8000e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d107      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d119      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e07d      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d003      	beq.n	8000e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d107      	bne.n	8000e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e06d      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e065      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e4e:	4936      	ldr	r1, [pc, #216]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f023 0203 	bic.w	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e60:	f7ff fbbe 	bl	80005e0 <HAL_GetTick>
 8000e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e66:	e00a      	b.n	8000e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e68:	f7ff fbba 	bl	80005e0 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e04d      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 020c 	and.w	r2, r3, #12
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d1eb      	bne.n	8000e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 020f 	and.w	r2, r3, #15
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d90c      	bls.n	8000eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 020f 	and.w	r2, r3, #15
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d001      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e030      	b.n	8000f1a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ec4:	4918      	ldr	r1, [pc, #96]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d009      	beq.n	8000ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ee2:	4911      	ldr	r1, [pc, #68]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ef6:	f000 fb7b 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 8000efa:	4601      	mov	r1, r0
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_RCC_ClockConfig+0x1bc>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_RCC_ClockConfig+0x1c0>)
 8000f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fb20 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	080044b4 	.word	0x080044b4
 8000f30:	2000000c 	.word	0x2000000c

08000f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f50:	f7ff fff0 	bl	8000f34 <HAL_RCC_GetHCLKFreq>
 8000f54:	4601      	mov	r1, r0
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	0a9b      	lsrs	r3, r3, #10
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	080044c4 	.word	0x080044c4

08000f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f78:	f7ff ffdc 	bl	8000f34 <HAL_RCC_GetHCLKFreq>
 8000f7c:	4601      	mov	r1, r0
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	0b5b      	lsrs	r3, r3, #13
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	080044c4 	.word	0x080044c4

08000f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d010      	beq.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000fd4:	496f      	ldr	r1, [pc, #444]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fdc:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d010      	beq.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001002:	4964      	ldr	r1, [pc, #400]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100a:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001012:	4313      	orrs	r3, r2
 8001014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001020:	2301      	movs	r3, #1
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d017      	beq.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001030:	4958      	ldr	r1, [pc, #352]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001032:	4b58      	ldr	r3, [pc, #352]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4313      	orrs	r3, r2
 8001042:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800104e:	d101      	bne.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d017      	beq.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800106c:	4949      	ldr	r1, [pc, #292]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800106e:	4b49      	ldr	r3, [pc, #292]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107c:	4313      	orrs	r3, r2
 800107e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800108a:	d101      	bne.n	8001090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 808a 	beq.w	80011be <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4a39      	ldr	r2, [pc, #228]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010b0:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80010c6:	4a34      	ldr	r2, [pc, #208]	; (8001198 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010d2:	f7ff fa85 	bl	80005e0 <HAL_GetTick>
 80010d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010da:	f7ff fa81 	bl	80005e0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e278      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001100:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d02f      	beq.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	429a      	cmp	r2, r3
 8001114:	d028      	beq.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800111e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d014      	beq.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fa4f 	bl	80005e0 <HAL_GetTick>
 8001142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fa4b 	bl	80005e0 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e240      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ee      	beq.n	8001146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001174:	d114      	bne.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001176:	4907      	ldr	r1, [pc, #28]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
 8001190:	e00c      	b.n	80011ac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000
 800119c:	42470e40 	.word	0x42470e40
 80011a0:	4a4a      	ldr	r2, [pc, #296]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011a2:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80011aa:	6093      	str	r3, [r2, #8]
 80011ac:	4947      	ldr	r1, [pc, #284]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ba:	4313      	orrs	r3, r2
 80011bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80011ca:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80011d2:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00a      	beq.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80011e0:	493a      	ldr	r1, [pc, #232]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011e2:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4313      	orrs	r3, r2
 80011f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001202:	4932      	ldr	r1, [pc, #200]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	4313      	orrs	r3, r2
 8001214:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d011      	beq.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001224:	4929      	ldr	r1, [pc, #164]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	4313      	orrs	r3, r2
 8001236:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001242:	d101      	bne.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001244:	2301      	movs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00a      	beq.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001254:	491d      	ldr	r1, [pc, #116]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	4313      	orrs	r3, r2
 8001266:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	2b00      	cmp	r3, #0
 8001274:	d011      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001276:	4915      	ldr	r1, [pc, #84]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001286:	4313      	orrs	r3, r2
 8001288:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001294:	d101      	bne.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001296:	2301      	movs	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	2b01      	cmp	r3, #1
 800129e:	d005      	beq.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012a8:	f040 80ff 	bne.w	80014aa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80012b2:	f7ff f995 	bl	80005e0 <HAL_GetTick>
 80012b6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012b8:	e00e      	b.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80012ba:	f7ff f991 	bl	80005e0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d907      	bls.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e188      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80012cc:	40023800 	.word	0x40023800
 80012d0:	424711e0 	.word	0x424711e0
 80012d4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012d8:	4b7e      	ldr	r3, [pc, #504]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ea      	bne.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001300:	2b00      	cmp	r3, #0
 8001302:	d028      	beq.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d124      	bne.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800130c:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800130e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	3301      	adds	r3, #1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001324:	0e1b      	lsrs	r3, r3, #24
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800132c:	4969      	ldr	r1, [pc, #420]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	019b      	lsls	r3, r3, #6
 8001338:	431a      	orrs	r2, r3
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	3b01      	subs	r3, #1
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	061b      	lsls	r3, r3, #24
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	071b      	lsls	r3, r3, #28
 8001350:	4313      	orrs	r3, r2
 8001352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800136a:	d00a      	beq.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001374:	2b00      	cmp	r3, #0
 8001376:	d035      	beq.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001380:	d130      	bne.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001382:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	3301      	adds	r3, #1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001394:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800139a:	0f1b      	lsrs	r3, r3, #28
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80013a2:	494c      	ldr	r1, [pc, #304]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	019b      	lsls	r3, r3, #6
 80013ae:	431a      	orrs	r2, r3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	3b01      	subs	r3, #1
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	061b      	lsls	r3, r3, #24
 80013c0:	431a      	orrs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	071b      	lsls	r3, r3, #28
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80013cc:	4941      	ldr	r1, [pc, #260]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d4:	f023 021f 	bic.w	r2, r3, #31
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	3b01      	subs	r3, #1
 80013de:	4313      	orrs	r3, r2
 80013e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d029      	beq.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f8:	d124      	bne.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013fa:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800140e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001412:	0f1b      	lsrs	r3, r3, #28
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800141a:	492e      	ldr	r1, [pc, #184]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	3b01      	subs	r3, #1
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	061b      	lsls	r3, r3, #24
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	071b      	lsls	r3, r3, #28
 800143e:	4313      	orrs	r3, r2
 8001440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800144c:	2b00      	cmp	r3, #0
 800144e:	d016      	beq.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001450:	4920      	ldr	r1, [pc, #128]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	019b      	lsls	r3, r3, #6
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	3b01      	subs	r3, #1
 8001466:	041b      	lsls	r3, r3, #16
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	061b      	lsls	r3, r3, #24
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	071b      	lsls	r3, r3, #28
 8001478:	4313      	orrs	r3, r2
 800147a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff f8ac 	bl	80005e0 <HAL_GetTick>
 8001488:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800148c:	f7ff f8a8 	bl	80005e0 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e09f      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 8095 	bne.w	80015dc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff f892 	bl	80005e0 <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014be:	e00f      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80014c0:	f7ff f88e 	bl	80005e0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d908      	bls.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e085      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	42470068 	.word	0x42470068
 80014dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ec:	d0e8      	beq.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800150a:	2b00      	cmp	r3, #0
 800150c:	d02b      	beq.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001512:	2b00      	cmp	r3, #0
 8001514:	d127      	bne.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	3301      	adds	r3, #1
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001528:	492f      	ldr	r1, [pc, #188]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	431a      	orrs	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	3b01      	subs	r3, #1
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	4313      	orrs	r3, r2
 8001548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800154c:	4926      	ldr	r1, [pc, #152]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001554:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	3b01      	subs	r3, #1
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	4313      	orrs	r3, r2
 8001562:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01d      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800157a:	d118      	bne.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	0e1b      	lsrs	r3, r3, #24
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800158a:	4917      	ldr	r1, [pc, #92]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	3b01      	subs	r3, #1
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	061b      	lsls	r3, r3, #24
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015b4:	f7ff f814 	bl	80005e0 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80015bc:	f7ff f810 	bl	80005e0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e007      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015da:	d1ef      	bne.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3730      	adds	r7, #48	; 0x30
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470070 	.word	0x42470070

080015f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f4:	b0a1      	sub	sp, #132	; 0x84
 80015f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800160c:	4ba0      	ldr	r3, [pc, #640]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b0c      	cmp	r3, #12
 8001616:	f200 8193 	bhi.w	8001940 <HAL_RCC_GetSysClockFreq+0x350>
 800161a:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <HAL_RCC_GetSysClockFreq+0x30>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	08001655 	.word	0x08001655
 8001624:	08001941 	.word	0x08001941
 8001628:	08001941 	.word	0x08001941
 800162c:	08001941 	.word	0x08001941
 8001630:	0800165b 	.word	0x0800165b
 8001634:	08001941 	.word	0x08001941
 8001638:	08001941 	.word	0x08001941
 800163c:	08001941 	.word	0x08001941
 8001640:	08001661 	.word	0x08001661
 8001644:	08001941 	.word	0x08001941
 8001648:	08001941 	.word	0x08001941
 800164c:	08001941 	.word	0x08001941
 8001650:	080017dd 	.word	0x080017dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001656:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001658:	e175      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165a:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <HAL_RCC_GetSysClockFreq+0x2a8>)
 800165c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800165e:	e172      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b8b      	ldr	r3, [pc, #556]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166a:	4b89      	ldr	r3, [pc, #548]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d056      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001676:	4b86      	ldr	r3, [pc, #536]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	099b      	lsrs	r3, r3, #6
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	ea01 0103 	and.w	r1, r1, r3
 800168c:	ea02 0204 	and.w	r2, r2, r4
 8001690:	460b      	mov	r3, r1
 8001692:	4614      	mov	r4, r2
 8001694:	0160      	lsls	r0, r4, #5
 8001696:	6678      	str	r0, [r7, #100]	; 0x64
 8001698:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800169a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800169e:	6678      	str	r0, [r7, #100]	; 0x64
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	663b      	str	r3, [r7, #96]	; 0x60
 80016a4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80016a8:	1a5b      	subs	r3, r3, r1
 80016aa:	eb64 0402 	sbc.w	r4, r4, r2
 80016ae:	01a0      	lsls	r0, r4, #6
 80016b0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016b4:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80016b8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016ba:	0198      	lsls	r0, r3, #6
 80016bc:	65b8      	str	r0, [r7, #88]	; 0x58
 80016be:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80016c2:	1aed      	subs	r5, r5, r3
 80016c4:	eb66 0604 	sbc.w	r6, r6, r4
 80016c8:	4633      	mov	r3, r6
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	657b      	str	r3, [r7, #84]	; 0x54
 80016ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d0:	4628      	mov	r0, r5
 80016d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016d6:	657b      	str	r3, [r7, #84]	; 0x54
 80016d8:	462b      	mov	r3, r5
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	653b      	str	r3, [r7, #80]	; 0x50
 80016de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80016e2:	461d      	mov	r5, r3
 80016e4:	4626      	mov	r6, r4
 80016e6:	186b      	adds	r3, r5, r1
 80016e8:	eb46 0402 	adc.w	r4, r6, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	4621      	mov	r1, r4
 80016f0:	460b      	mov	r3, r1
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f8:	4602      	mov	r2, r0
 80016fa:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001700:	4603      	mov	r3, r0
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	64bb      	str	r3, [r7, #72]	; 0x48
 8001706:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800170a:	4618      	mov	r0, r3
 800170c:	4621      	mov	r1, r4
 800170e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001710:	f04f 0400 	mov.w	r4, #0
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	f7fe fd74 	bl	8000204 <__aeabi_uldivmod>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001722:	e04d      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	f04f 0400 	mov.w	r4, #0
 800172e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	ea01 0103 	and.w	r1, r1, r3
 800173a:	ea02 0204 	and.w	r2, r2, r4
 800173e:	460b      	mov	r3, r1
 8001740:	4614      	mov	r4, r2
 8001742:	0160      	lsls	r0, r4, #5
 8001744:	6478      	str	r0, [r7, #68]	; 0x44
 8001746:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001748:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800174c:	6478      	str	r0, [r7, #68]	; 0x44
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
 8001752:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001756:	1a5b      	subs	r3, r3, r1
 8001758:	eb64 0402 	sbc.w	r4, r4, r2
 800175c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001760:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001764:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001768:	ebba 0a03 	subs.w	sl, sl, r3
 800176c:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
 8001784:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001788:	eb1a 0a01 	adds.w	sl, sl, r1
 800178c:	eb4b 0b02 	adc.w	fp, fp, r2
 8001790:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
 8001796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001798:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
 800179e:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
 80017a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80017a8:	4650      	mov	r0, sl
 80017aa:	4659      	mov	r1, fp
 80017ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ae:	f04f 0400 	mov.w	r4, #0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4623      	mov	r3, r4
 80017b6:	f7fe fd25 	bl	8000204 <__aeabi_uldivmod>
 80017ba:	4603      	mov	r3, r0
 80017bc:	460c      	mov	r4, r1
 80017be:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c0:	4b33      	ldr	r3, [pc, #204]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 80017d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80017da:	e0b4      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d054      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	f04f 0400 	mov.w	r4, #0
 80017fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	ea01 0103 	and.w	r1, r1, r3
 8001808:	ea02 0204 	and.w	r2, r2, r4
 800180c:	460b      	mov	r3, r1
 800180e:	4614      	mov	r4, r2
 8001810:	0160      	lsls	r0, r4, #5
 8001812:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001816:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800181a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001820:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001824:	1a5b      	subs	r3, r3, r1
 8001826:	eb64 0402 	sbc.w	r4, r4, r2
 800182a:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800182e:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001832:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001836:	ebb8 0803 	subs.w	r8, r8, r3
 800183a:	eb69 0904 	sbc.w	r9, r9, r4
 800183e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001850:	623b      	str	r3, [r7, #32]
 8001852:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001856:	eb18 0801 	adds.w	r8, r8, r1
 800185a:	eb49 0902 	adc.w	r9, r9, r2
 800185e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001876:	4640      	mov	r0, r8
 8001878:	4649      	mov	r1, r9
 800187a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	461a      	mov	r2, r3
 8001882:	4623      	mov	r3, r4
 8001884:	f7fe fcbe 	bl	8000204 <__aeabi_uldivmod>
 8001888:	4603      	mov	r3, r0
 800188a:	460c      	mov	r4, r1
 800188c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800188e:	e04b      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x338>
 8001890:	40023800 	.word	0x40023800
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_GetSysClockFreq+0x364>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	ea01 0103 	and.w	r1, r1, r3
 80018b2:	ea02 0204 	and.w	r2, r2, r4
 80018b6:	460b      	mov	r3, r1
 80018b8:	4614      	mov	r4, r2
 80018ba:	0160      	lsls	r0, r4, #5
 80018bc:	6178      	str	r0, [r7, #20]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80018c4:	6178      	str	r0, [r7, #20]
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018ce:	1a5b      	subs	r3, r3, r1
 80018d0:	eb64 0402 	sbc.w	r4, r4, r2
 80018d4:	01a6      	lsls	r6, r4, #6
 80018d6:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80018da:	019d      	lsls	r5, r3, #6
 80018dc:	1aed      	subs	r5, r5, r3
 80018de:	eb66 0604 	sbc.w	r6, r6, r4
 80018e2:	00f3      	lsls	r3, r6, #3
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	00eb      	lsls	r3, r5, #3
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80018f6:	186d      	adds	r5, r5, r1
 80018f8:	eb46 0602 	adc.w	r6, r6, r2
 80018fc:	02b3      	lsls	r3, r6, #10
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	02ab      	lsls	r3, r5, #10
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001910:	4628      	mov	r0, r5
 8001912:	4631      	mov	r1, r6
 8001914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	461a      	mov	r2, r3
 800191c:	4623      	mov	r3, r4
 800191e:	f7fe fc71 	bl	8000204 <__aeabi_uldivmod>
 8001922:	4603      	mov	r3, r0
 8001924:	460c      	mov	r4, r1
 8001926:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_RCC_GetSysClockFreq+0x364>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0f1b      	lsrs	r3, r3, #28
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001934:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800193e:	e002      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetSysClockFreq+0x368>)
 8001942:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001948:	4618      	mov	r0, r3
 800194a:	3784      	adds	r7, #132	; 0x84
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400

0800195c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8083 	beq.w	8001a7c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001976:	4b95      	ldr	r3, [pc, #596]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b04      	cmp	r3, #4
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001982:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800198e:	4b8f      	ldr	r3, [pc, #572]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800199a:	d00c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199c:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d112      	bne.n	80019ce <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a8:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b4:	d10b      	bne.n	80019ce <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b6:	4b85      	ldr	r3, [pc, #532]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d05b      	beq.n	8001a7a <HAL_RCC_OscConfig+0x11e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d157      	bne.n	8001a7a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e216      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x8a>
 80019d8:	4a7c      	ldr	r2, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e01d      	b.n	8001a22 <HAL_RCC_OscConfig+0xc6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0xae>
 80019f0:	4a76      	ldr	r2, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4a73      	ldr	r2, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0xc6>
 8001a0a:	4a70      	ldr	r2, [pc, #448]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4a6d      	ldr	r2, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a18:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d013      	beq.n	8001a52 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7fe fdd9 	bl	80005e0 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a32:	f7fe fdd5 	bl	80005e0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1db      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a44:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0xd6>
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7fe fdc5 	bl	80005e0 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fdc1 	bl	80005e0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1c7      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6c:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0xfe>
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d06f      	beq.n	8001b68 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d017      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a94:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aac:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d11c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d116      	bne.n	8001af2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac4:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_OscConfig+0x180>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e18f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	493b      	ldr	r1, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af0:	e03a      	b.n	8001b68 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d020      	beq.n	8001b3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7fe fd6e 	bl	80005e0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b08:	f7fe fd6a 	bl	80005e0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e170      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4929      	ldr	r1, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
 8001b3a:	e015      	b.n	8001b68 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7fe fd4d 	bl	80005e0 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7fe fd49 	bl	80005e0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e14f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d037      	beq.n	8001be4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d016      	beq.n	8001baa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7fe fd2d 	bl	80005e0 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7fe fd29 	bl	80005e0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e12f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x22e>
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7fe fd16 	bl	80005e0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb6:	e00f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7fe fd12 	bl	80005e0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d908      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e118      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	42470000 	.word	0x42470000
 8001bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b8a      	ldr	r3, [pc, #552]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e9      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8097 	beq.w	8001d20 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4a7f      	ldr	r2, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4a76      	ldr	r2, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7fe fcd1 	bl	80005e0 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7fe fccd 	bl	80005e0 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0d3      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b6c      	ldr	r3, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x31a>
 8001c68:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c6a:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x354>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x33c>
 8001c7e:	4a61      	ldr	r2, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c80:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c8c:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x354>
 8001c98:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001ca6:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7fe fc92 	bl	80005e0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7fe fc8e 	bl	80005e0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e092      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ee      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x364>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7fe fc7c 	bl	80005e0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7fe fc78 	bl	80005e0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e07c      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ee      	bne.n	8001cec <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d068      	beq.n	8001dfa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d060      	beq.n	8001df6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d145      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7fe fc4d 	bl	80005e0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe fc49 	bl	80005e0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e04f      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d68:	4926      	ldr	r1, [pc, #152]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	071b      	lsls	r3, r3, #28
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7fe fc1e 	bl	80005e0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe fc1a 	bl	80005e0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e020      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x44c>
 8001dc6:	e018      	b.n	8001dfa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7fe fc07 	bl	80005e0 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7fe fc03 	bl	80005e0 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e009      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x4a8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x47a>
 8001df4:	e001      	b.n	8001dfa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42470060 	.word	0x42470060

08001e10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e083      	b.n	8001f2a <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7f5b      	ldrb	r3, [r3, #29]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f002 f8c0 	bl	8003fb8 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	22ca      	movs	r2, #202	; 0xca
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2253      	movs	r2, #83	; 0x53
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fc54 	bl	80026fc <RTC_EnterInitMode>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	22ff      	movs	r2, #255	; 0xff
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e05e      	b.n	8001f2a <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e7e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	6891      	ldr	r1, [r2, #8]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6850      	ldr	r0, [r2, #4]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6912      	ldr	r2, [r2, #16]
 8001e92:	4310      	orrs	r0, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6952      	ldr	r2, [r2, #20]
 8001e98:	4302      	orrs	r2, r0
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	6911      	ldr	r1, [r2, #16]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6892      	ldr	r2, [r2, #8]
 8001eb6:	0412      	lsls	r2, r2, #16
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fbe6 	bl	80026ac <HAL_RTC_WaitForSynchro>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	22ff      	movs	r2, #255	; 0xff
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e018      	b.n	8001f2a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6992      	ldr	r2, [r2, #24]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
  }
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f32:	b590      	push	{r4, r7, lr}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	7f1b      	ldrb	r3, [r3, #28]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_RTC_SetTime+0x1c>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e0b2      	b.n	80020b4 <HAL_RTC_SetTime+0x182>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2202      	movs	r2, #2
 8001f58:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d126      	bne.n	8001fae <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fbeb 	bl	8002754 <RTC_ByteToBcd2>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fbe4 	bl	8002754 <RTC_ByteToBcd2>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f90:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fbdc 	bl	8002754 <RTC_ByteToBcd2>
 8001f9c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f9e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e020      	b.n	8001ff0 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fbe5 	bl	8002790 <RTC_Bcd2ToByte>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e002      	b.n	8001fd2 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	785b      	ldrb	r3, [r3, #1]
 8001fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fde:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fe4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	78db      	ldrb	r3, [r3, #3]
 8001fea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	22ca      	movs	r2, #202	; 0xca
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2253      	movs	r2, #83	; 0x53
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fb7b 	bl	80026fc <RTC_EnterInitMode>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2204      	movs	r2, #4
 8002018:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e047      	b.n	80020b4 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800202e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002032:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	6892      	ldr	r2, [r2, #8]
 800203e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002042:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	6891      	ldr	r1, [r2, #8]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	68d0      	ldr	r0, [r2, #12]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	6912      	ldr	r2, [r2, #16]
 8002056:	4302      	orrs	r2, r0
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206a:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d111      	bne.n	800209e <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fb16 	bl	80026ac <HAL_RTC_WaitForSynchro>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	22ff      	movs	r2, #255	; 0xff
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2204      	movs	r2, #4
 8002092:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00a      	b.n	80020b4 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 80020b2:	2300      	movs	r3, #0
  }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}

080020bc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80020ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	0c1b      	lsrs	r3, r3, #16
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11a      	bne.n	800216e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fb27 	bl	8002790 <RTC_Bcd2ToByte>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fb1e 	bl	8002790 <RTC_Bcd2ToByte>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	789b      	ldrb	r3, [r3, #2]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fb15 	bl	8002790 <RTC_Bcd2ToByte>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	7f1b      	ldrb	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_RTC_SetDate+0x1c>
 8002190:	2302      	movs	r3, #2
 8002192:	e094      	b.n	80022be <HAL_RTC_SetDate+0x146>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2202      	movs	r2, #2
 800219e:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10e      	bne.n	80021c4 <HAL_RTC_SetDate+0x4c>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	f023 0310 	bic.w	r3, r3, #16
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	330a      	adds	r3, #10
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11c      	bne.n	8002204 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	78db      	ldrb	r3, [r3, #3]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fac0 	bl	8002754 <RTC_ByteToBcd2>
 80021d4:	4603      	mov	r3, r0
 80021d6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fab9 	bl	8002754 <RTC_ByteToBcd2>
 80021e2:	4603      	mov	r3, r0
 80021e4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021e6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fab1 	bl	8002754 <RTC_ByteToBcd2>
 80021f2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021f4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e00e      	b.n	8002222 <HAL_RTC_SetDate+0xaa>
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(datetmpreg));
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002210:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002216:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ca      	movs	r2, #202	; 0xca
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2253      	movs	r2, #83	; 0x53
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa62 	bl	80026fc <RTC_EnterInitMode>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2204      	movs	r2, #4
 800224a:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e033      	b.n	80022be <HAL_RTC_SetDate+0x146>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002260:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002264:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	68d2      	ldr	r2, [r2, #12]
 8002270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002274:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fa11 	bl	80026ac <HAL_RTC_WaitForSynchro>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_RTC_SetDate+0x130>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	22ff      	movs	r2, #255	; 0xff
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2204      	movs	r2, #4
 800229c:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00a      	b.n	80022be <HAL_RTC_SetDate+0x146>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	22ff      	movs	r2, #255	; 0xff
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 80022bc:	2300      	movs	r3, #0
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}

080022c6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
          
  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	0b5b      	lsrs	r3, r3, #13
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11a      	bne.n	800235a <HAL_RTC_GetDate+0x94>
  {    
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	78db      	ldrb	r3, [r3, #3]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fa31 	bl	8002790 <RTC_Bcd2ToByte>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fa28 	bl	8002790 <RTC_Bcd2ToByte>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	789b      	ldrb	r3, [r3, #2]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fa1f 	bl	8002790 <RTC_Bcd2ToByte>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002378:	4ba1      	ldr	r3, [pc, #644]	; (8002600 <HAL_RTC_SetAlarm_IT+0x29c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4aa1      	ldr	r2, [pc, #644]	; (8002604 <HAL_RTC_SetAlarm_IT+0x2a0>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0adb      	lsrs	r3, r3, #11
 8002384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	7f1b      	ldrb	r3, [r3, #28]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_RTC_SetAlarm_IT+0x36>
 8002396:	2302      	movs	r3, #2
 8002398:	e12e      	b.n	80025f8 <HAL_RTC_SetAlarm_IT+0x294>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2202      	movs	r2, #2
 80023a4:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d137      	bne.n	800241c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f9c5 	bl	8002754 <RTC_ByteToBcd2>
 80023ca:	4603      	mov	r3, r0
 80023cc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f9be 	bl	8002754 <RTC_ByteToBcd2>
 80023d8:	4603      	mov	r3, r0
 80023da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80023dc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	789b      	ldrb	r3, [r3, #2]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f9b6 	bl	8002754 <RTC_ByteToBcd2>
 80023e8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80023ea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	78db      	ldrb	r3, [r3, #3]
 80023f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80023f4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f9a8 	bl	8002754 <RTC_ByteToBcd2>
 8002404:	4603      	mov	r3, r0
 8002406:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002408:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002410:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002416:	4313      	orrs	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e040      	b.n	800249e <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f9ae 	bl	8002790 <RTC_Bcd2ToByte>
 8002434:	4603      	mov	r3, r0
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e002      	b.n	8002440 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d108      	bne.n	800245a <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f99e 	bl	8002790 <RTC_Bcd2ToByte>
 8002454:	4603      	mov	r3, r0
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	e007      	b.n	800246a <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f995 	bl	8002790 <RTC_Bcd2ToByte>
 8002466:	4603      	mov	r3, r0
 8002468:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002476:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800247c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	78db      	ldrb	r3, [r3, #3]
 8002482:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002484:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800248e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002494:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800249a:	4313      	orrs	r3, r2
 800249c:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	22ca      	movs	r2, #202	; 0xca
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2253      	movs	r2, #83	; 0x53
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c2:	d141      	bne.n	8002548 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
 80024ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	68d2      	ldr	r2, [r2, #12]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80024e4:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	617a      	str	r2, [r7, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2203      	movs	r2, #3
 80024fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e077      	b.n	80025f8 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0e7      	beq.n	80024e6 <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	6892      	ldr	r2, [r2, #8]
 8002530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002534:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	6892      	ldr	r2, [r2, #8]
 8002540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	e040      	b.n	80025ca <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	6892      	ldr	r2, [r2, #8]
 8002552:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002556:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	68d2      	ldr	r2, [r2, #12]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002568:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	617a      	str	r2, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2203      	movs	r2, #3
 8002580:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e035      	b.n	80025f8 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0e7      	beq.n	800256a <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	6892      	ldr	r2, [r2, #8]
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e0:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	22ff      	movs	r2, #255	; 0xff
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3724      	adds	r7, #36	; 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}
 8002600:	2000000c 	.word	0x2000000c
 8002604:	10624dd3 	.word	0x10624dd3
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d012      	beq.n	8002648 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f831 	bl	8002698 <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	68d2      	ldr	r2, [r2, #12]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002646:	60da      	str	r2, [r3, #12]
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8b1 	bl	80027cc <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	68d2      	ldr	r2, [r2, #12]
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f462 7220 	orn	r2, r2, #640	; 0x280
 800267a:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RTC_AlarmIRQHandler+0x88>)
 800267e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002682:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	775a      	strb	r2, [r3, #29]
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	68d2      	ldr	r2, [r2, #12]
 80026c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fd ff8a 	bl	80005e0 <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026ce:	e009      	b.n	80026e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026d0:	f7fd ff86 	bl	80005e0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026de:	d901      	bls.n	80026e4 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e007      	b.n	80026f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ee      	beq.n	80026d0 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f04f 32ff 	mov.w	r2, #4294967295
 800271e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002720:	f7fd ff5e 	bl	80005e0 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002726:	e009      	b.n	800273c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002728:	f7fd ff5a 	bl	80005e0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002736:	d901      	bls.n	800273c <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e007      	b.n	800274c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ee      	beq.n	8002728 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 8002762:	e005      	b.n	8002770 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3301      	adds	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	3b0a      	subs	r3, #10
 800276e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2b09      	cmp	r3, #9
 8002774:	d8f6      	bhi.n	8002764 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	b2da      	uxtb	r2, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4313      	orrs	r3, r2
 8002782:	b2db      	uxtb	r3, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4413      	add	r3, r2
 80027be:	b2db      	uxtb	r3, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e01d      	b.n	800282e <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f001 fbf2 	bl	8003ff0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f000 f904 	bl	8002a2c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}  
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2201      	movs	r2, #1
 8002848:	6839      	ldr	r1, [r7, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fa10 	bl	8002c70 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_TIM_PWM_Start+0x60>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_TIM_PWM_Start+0x2c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_TIM_PWM_Start+0x64>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_TIM_PWM_Start+0x30>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_TIM_PWM_Start+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
} 
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40010000 	.word	0x40010000
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e0b4      	b.n	8002a24 <HAL_TIM_PWM_ConfigChannel+0x184>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	f200 809f 	bhi.w	8002a10 <HAL_TIM_PWM_ConfigChannel+0x170>
 80028d2:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	0800290d 	.word	0x0800290d
 80028dc:	08002a11 	.word	0x08002a11
 80028e0:	08002a11 	.word	0x08002a11
 80028e4:	08002a11 	.word	0x08002a11
 80028e8:	0800294d 	.word	0x0800294d
 80028ec:	08002a11 	.word	0x08002a11
 80028f0:	08002a11 	.word	0x08002a11
 80028f4:	08002a11 	.word	0x08002a11
 80028f8:	0800298f 	.word	0x0800298f
 80028fc:	08002a11 	.word	0x08002a11
 8002900:	08002a11 	.word	0x08002a11
 8002904:	08002a11 	.word	0x08002a11
 8002908:	080029cf 	.word	0x080029cf
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f9d0 	bl	8002cb8 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	6992      	ldr	r2, [r2, #24]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	6992      	ldr	r2, [r2, #24]
 8002932:	f022 0204 	bic.w	r2, r2, #4
 8002936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	6991      	ldr	r1, [r2, #24]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	6912      	ldr	r2, [r2, #16]
 8002946:	430a      	orrs	r2, r1
 8002948:	619a      	str	r2, [r3, #24]
    }
    break;
 800294a:	e062      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f914 	bl	8002b80 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	6992      	ldr	r2, [r2, #24]
 8002962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002966:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	6992      	ldr	r2, [r2, #24]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	6991      	ldr	r1, [r2, #24]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	6912      	ldr	r2, [r2, #16]
 8002986:	0212      	lsls	r2, r2, #8
 8002988:	430a      	orrs	r2, r1
 800298a:	619a      	str	r2, [r3, #24]
    }
    break;
 800298c:	e041      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fa03 	bl	8002da0 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	69d2      	ldr	r2, [r2, #28]
 80029a4:	f042 0208 	orr.w	r2, r2, #8
 80029a8:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	69d2      	ldr	r2, [r2, #28]
 80029b4:	f022 0204 	bic.w	r2, r2, #4
 80029b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	69d1      	ldr	r1, [r2, #28]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	6912      	ldr	r2, [r2, #16]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	61da      	str	r2, [r3, #28]
    }
    break;
 80029cc:	e021      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fa5b 	bl	8002e90 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	69d2      	ldr	r2, [r2, #28]
 80029e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e8:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	69d2      	ldr	r2, [r2, #28]
 80029f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	69d1      	ldr	r1, [r2, #28]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	6912      	ldr	r2, [r2, #16]
 8002a08:	0212      	lsls	r2, r2, #8
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	61da      	str	r2, [r3, #28]
    }
    break;
 8002a0e:	e000      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8002a10:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4e:	d00f      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a41      	ldr	r2, [pc, #260]	; (8002b58 <TIM_Base_SetConfig+0x12c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00b      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a40      	ldr	r2, [pc, #256]	; (8002b5c <TIM_Base_SetConfig+0x130>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d007      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <TIM_Base_SetConfig+0x134>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3e      	ldr	r2, [pc, #248]	; (8002b64 <TIM_Base_SetConfig+0x138>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <TIM_Base_SetConfig+0x48>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <TIM_Base_SetConfig+0x4a>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a31      	ldr	r2, [pc, #196]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d02b      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d027      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a2e      	ldr	r2, [pc, #184]	; (8002b58 <TIM_Base_SetConfig+0x12c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d023      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <TIM_Base_SetConfig+0x130>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d01f      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <TIM_Base_SetConfig+0x134>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01b      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <TIM_Base_SetConfig+0x138>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d017      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <TIM_Base_SetConfig+0x13c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <TIM_Base_SetConfig+0x140>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00f      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <TIM_Base_SetConfig+0x144>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <TIM_Base_SetConfig+0x148>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <TIM_Base_SetConfig+0x14c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0xc0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <TIM_Base_SetConfig+0x150>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <TIM_Base_SetConfig+0xc4>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <TIM_Base_SetConfig+0xc6>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_Base_SetConfig+0x102>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <TIM_Base_SetConfig+0x138>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <TIM_Base_SetConfig+0x106>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <TIM_Base_SetConfig+0x108>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	615a      	str	r2, [r3, #20]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40010400 	.word	0x40010400
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40014400 	.word	0x40014400
 8002b70:	40014800 	.word	0x40014800
 8002b74:	40001800 	.word	0x40001800
 8002b78:	40001c00 	.word	0x40001c00
 8002b7c:	40002000 	.word	0x40002000

08002b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0210 	bic.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0320 	bic.w	r3, r3, #32
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <TIM_OC2_SetConfig+0xe8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_OC2_SetConfig+0x74>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <TIM_OC2_SetConfig+0xec>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <TIM_OC2_SetConfig+0x78>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <TIM_OC2_SetConfig+0x7a>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d021      	beq.n	8002c42 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c18:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40010400 	.word	0x40010400

08002c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002c80:	2201      	movs	r2, #1
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1a      	ldr	r2, [r3, #32]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	401a      	ands	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 0302 	bic.w	r3, r3, #2
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <TIM_OC1_SetConfig+0xe0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_OC1_SetConfig+0x70>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <TIM_OC1_SetConfig+0xe4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d101      	bne.n	8002d2c <TIM_OC1_SetConfig+0x74>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <TIM_OC1_SetConfig+0x76>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01e      	beq.n	8002d70 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f023 0308 	bic.w	r3, r3, #8
 8002d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f023 0304 	bic.w	r3, r3, #4
 8002d4a:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	621a      	str	r2, [r3, #32]
} 
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40010400 	.word	0x40010400

08002da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <TIM_OC3_SetConfig+0xe8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <TIM_OC3_SetConfig+0x72>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <TIM_OC3_SetConfig+0xec>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <TIM_OC3_SetConfig+0x76>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <TIM_OC3_SetConfig+0x78>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d021      	beq.n	8002e60 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e36:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40010400 	.word	0x40010400

08002e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed2:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	031b      	lsls	r3, r3, #12
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <TIM_OC4_SetConfig+0xb8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d003      	beq.n	8002f04 <TIM_OC4_SetConfig+0x74>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <TIM_OC4_SetConfig+0xbc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <TIM_OC4_SetConfig+0x78>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <TIM_OC4_SetConfig+0x7a>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e032      	b.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	6852      	ldr	r2, [r2, #4]
 8002f82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f86:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	6851      	ldr	r1, [r2, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	6892      	ldr	r2, [r2, #8]
 8002fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa8:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	6891      	ldr	r1, [r2, #8]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	6852      	ldr	r2, [r2, #4]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
} 
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e044      	b.n	8003080 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e03f      	b.n	800311e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f001 f8ac 	bl	8004210 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ce:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f829 	bl	8003128 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	6912      	ldr	r2, [r2, #16]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	6952      	ldr	r2, [r2, #20]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f4:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	68d2      	ldr	r2, [r2, #12]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003104:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003142:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003164:	f023 030c 	bic.w	r3, r3, #12
 8003168:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4313      	orrs	r3, r2
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b8:	f040 80e4 	bne.w	8003384 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4aab      	ldr	r2, [pc, #684]	; (8003470 <UART_SetConfig+0x348>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <UART_SetConfig+0xa8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4aaa      	ldr	r2, [pc, #680]	; (8003474 <UART_SetConfig+0x34c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d16c      	bne.n	80032aa <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681c      	ldr	r4, [r3, #0]
 80031d4:	f7fd fece 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009a      	lsls	r2, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	4aa2      	ldr	r2, [pc, #648]	; (8003478 <UART_SetConfig+0x350>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	011d      	lsls	r5, r3, #4
 80031f8:	f7fd febc 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009a      	lsls	r2, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003212:	f7fd feaf 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 8003216:	4602      	mov	r2, r0
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	4a92      	ldr	r2, [pc, #584]	; (8003478 <UART_SetConfig+0x350>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2264      	movs	r2, #100	; 0x64
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	1af3      	subs	r3, r6, r3
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	3332      	adds	r3, #50	; 0x32
 8003240:	4a8d      	ldr	r2, [pc, #564]	; (8003478 <UART_SetConfig+0x350>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800324e:	441d      	add	r5, r3
 8003250:	f7fd fe90 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 8003254:	4602      	mov	r2, r0
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009a      	lsls	r2, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fbb2 f6f3 	udiv	r6, r2, r3
 800326a:	f7fd fe83 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 800326e:	4602      	mov	r2, r0
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <UART_SetConfig+0x350>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2264      	movs	r2, #100	; 0x64
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	1af3      	subs	r3, r6, r3
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a77      	ldr	r2, [pc, #476]	; (8003478 <UART_SetConfig+0x350>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	442b      	add	r3, r5
 80032a6:	60a3      	str	r3, [r4, #8]
 80032a8:	e154      	b.n	8003554 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681c      	ldr	r4, [r3, #0]
 80032ae:	f7fd fe4d 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	4a6b      	ldr	r2, [pc, #428]	; (8003478 <UART_SetConfig+0x350>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	011d      	lsls	r5, r3, #4
 80032d2:	f7fd fe3b 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80032ec:	f7fd fe2e 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009a      	lsls	r2, r3, #2
 80032fa:	441a      	add	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	4a5c      	ldr	r2, [pc, #368]	; (8003478 <UART_SetConfig+0x350>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	2264      	movs	r2, #100	; 0x64
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	1af3      	subs	r3, r6, r3
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	3332      	adds	r3, #50	; 0x32
 800331a:	4a57      	ldr	r2, [pc, #348]	; (8003478 <UART_SetConfig+0x350>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003328:	441d      	add	r5, r3
 800332a:	f7fd fe0f 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 800332e:	4602      	mov	r2, r0
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009a      	lsls	r2, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fbb2 f6f3 	udiv	r6, r2, r3
 8003344:	f7fd fe02 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 8003348:	4602      	mov	r2, r0
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	4a46      	ldr	r2, [pc, #280]	; (8003478 <UART_SetConfig+0x350>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2264      	movs	r2, #100	; 0x64
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	1af3      	subs	r3, r6, r3
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a41      	ldr	r2, [pc, #260]	; (8003478 <UART_SetConfig+0x350>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	442b      	add	r3, r5
 8003380:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003382:	e0e7      	b.n	8003554 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a39      	ldr	r2, [pc, #228]	; (8003470 <UART_SetConfig+0x348>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <UART_SetConfig+0x270>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a38      	ldr	r2, [pc, #224]	; (8003474 <UART_SetConfig+0x34c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d171      	bne.n	800347c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681c      	ldr	r4, [r3, #0]
 800339c:	f7fd fdea 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	4a30      	ldr	r2, [pc, #192]	; (8003478 <UART_SetConfig+0x350>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	011d      	lsls	r5, r3, #4
 80033c0:	f7fd fdd8 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009a      	lsls	r2, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80033da:	f7fd fdcb 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009a      	lsls	r2, r3, #2
 80033e8:	441a      	add	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <UART_SetConfig+0x350>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2264      	movs	r2, #100	; 0x64
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	1af3      	subs	r3, r6, r3
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	3332      	adds	r3, #50	; 0x32
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <UART_SetConfig+0x350>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003414:	441d      	add	r5, r3
 8003416:	f7fd fdad 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 800341a:	4602      	mov	r2, r0
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003430:	f7fd fda0 	bl	8000f74 <HAL_RCC_GetPCLK2Freq>
 8003434:	4602      	mov	r2, r0
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009a      	lsls	r2, r3, #2
 800343e:	441a      	add	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	4a0b      	ldr	r2, [pc, #44]	; (8003478 <UART_SetConfig+0x350>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	2264      	movs	r2, #100	; 0x64
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	1af3      	subs	r3, r6, r3
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	3332      	adds	r3, #50	; 0x32
 800345e:	4a06      	ldr	r2, [pc, #24]	; (8003478 <UART_SetConfig+0x350>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	442b      	add	r3, r5
 800346c:	60a3      	str	r3, [r4, #8]
 800346e:	e071      	b.n	8003554 <UART_SetConfig+0x42c>
 8003470:	40011000 	.word	0x40011000
 8003474:	40011400 	.word	0x40011400
 8003478:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681c      	ldr	r4, [r3, #0]
 8003480:	f7fd fd64 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 8003484:	4602      	mov	r2, r0
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009a      	lsls	r2, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	4a30      	ldr	r2, [pc, #192]	; (800355c <UART_SetConfig+0x434>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	011d      	lsls	r5, r3, #4
 80034a4:	f7fd fd52 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009a      	lsls	r2, r3, #2
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80034be:	f7fd fd45 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80034c2:	4602      	mov	r2, r0
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009a      	lsls	r2, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <UART_SetConfig+0x434>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2264      	movs	r2, #100	; 0x64
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	1af3      	subs	r3, r6, r3
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	3332      	adds	r3, #50	; 0x32
 80034ec:	4a1b      	ldr	r2, [pc, #108]	; (800355c <UART_SetConfig+0x434>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	441d      	add	r5, r3
 80034fa:	f7fd fd27 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 80034fe:	4602      	mov	r2, r0
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009a      	lsls	r2, r3, #2
 8003508:	441a      	add	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	fbb2 f6f3 	udiv	r6, r2, r3
 8003514:	f7fd fd1a 	bl	8000f4c <HAL_RCC_GetPCLK1Freq>
 8003518:	4602      	mov	r2, r0
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009a      	lsls	r2, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <UART_SetConfig+0x434>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	2264      	movs	r2, #100	; 0x64
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	1af3      	subs	r3, r6, r3
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	3332      	adds	r3, #50	; 0x32
 8003542:	4a06      	ldr	r2, [pc, #24]	; (800355c <UART_SetConfig+0x434>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	442b      	add	r3, r5
 8003550:	60a3      	str	r3, [r4, #8]
}
 8003552:	e7ff      	b.n	8003554 <UART_SetConfig+0x42c>
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355c:	51eb851f 	.word	0x51eb851f

08003560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003564:	f7fc ffd6 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003568:	f000 f8ce 	bl	8003708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800356c:	f000 fbe2 	bl	8003d34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003570:	f000 fbb6 	bl	8003ce0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003574:	f000 f958 	bl	8003828 <MX_I2C1_Init>
  MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 8003578:	2000      	movs	r0, #0
 800357a:	f000 fac9 	bl	8003b10 <MX_TIM4_Init>
  MX_TIM3_Init(0);
 800357e:	2000      	movs	r0, #0
 8003580:	f000 fa68 	bl	8003a54 <MX_TIM3_Init>
  MX_TIM8_Init(0);
 8003584:	2000      	movs	r0, #0
 8003586:	f000 fb21 	bl	8003bcc <MX_TIM8_Init>
  MX_TIM2_Init(0);
 800358a:	2000      	movs	r0, #0
 800358c:	f000 fa06 	bl	800399c <MX_TIM2_Init>
  MX_RTC_Init();
 8003590:	f000 f978 	bl	8003884 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003594:	2201      	movs	r2, #1
 8003596:	2120      	movs	r1, #32
 8003598:	4844      	ldr	r0, [pc, #272]	; (80036ac <main+0x14c>)
 800359a:	f7fd facb 	bl	8000b34 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */
  //Set time, data and alarm
  	//1) Set time
  	myTime.Hours = 12;
 800359e:	4b44      	ldr	r3, [pc, #272]	; (80036b0 <main+0x150>)
 80035a0:	220c      	movs	r2, #12
 80035a2:	701a      	strb	r2, [r3, #0]
  	myTime.Minutes = 59;
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <main+0x150>)
 80035a6:	223b      	movs	r2, #59	; 0x3b
 80035a8:	705a      	strb	r2, [r3, #1]
  	myTime.Seconds = 45;
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <main+0x150>)
 80035ac:	222d      	movs	r2, #45	; 0x2d
 80035ae:	709a      	strb	r2, [r3, #2]
  	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80035b0:	2200      	movs	r2, #0
 80035b2:	493f      	ldr	r1, [pc, #252]	; (80036b0 <main+0x150>)
 80035b4:	483f      	ldr	r0, [pc, #252]	; (80036b4 <main+0x154>)
 80035b6:	f7fe fcbc 	bl	8001f32 <HAL_RTC_SetTime>
  	//2) Set date
  	myDate.Date = 6;
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <main+0x158>)
 80035bc:	2206      	movs	r2, #6
 80035be:	709a      	strb	r2, [r3, #2]
  	myDate.Month = RTC_MONTH_DECEMBER;
 80035c0:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <main+0x158>)
 80035c2:	2212      	movs	r2, #18
 80035c4:	705a      	strb	r2, [r3, #1]
  	myDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80035c6:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <main+0x158>)
 80035c8:	2204      	movs	r2, #4
 80035ca:	701a      	strb	r2, [r3, #0]
  	myDate.Year = 18;
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <main+0x158>)
 80035ce:	2212      	movs	r2, #18
 80035d0:	70da      	strb	r2, [r3, #3]
  	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 80035d2:	2200      	movs	r2, #0
 80035d4:	4938      	ldr	r1, [pc, #224]	; (80036b8 <main+0x158>)
 80035d6:	4837      	ldr	r0, [pc, #220]	; (80036b4 <main+0x154>)
 80035d8:	f7fe fdce 	bl	8002178 <HAL_RTC_SetDate>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	RTC_get_Time_and_Date();
 80035dc:	f000 f880 	bl	80036e0 <RTC_get_Time_and_Date>
	if((red<=100) && (green<=100) && (blue<=100))
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <main+0x15c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	dc4f      	bgt.n	8003688 <main+0x128>
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <main+0x160>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b64      	cmp	r3, #100	; 0x64
 80035ee:	dc4b      	bgt.n	8003688 <main+0x128>
 80035f0:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <main+0x164>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b64      	cmp	r3, #100	; 0x64
 80035f6:	dc47      	bgt.n	8003688 <main+0x128>
	{
		if(sunrise_timer<myTime.Seconds)
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <main+0x150>)
 80035fa:	789b      	ldrb	r3, [r3, #2]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <main+0x168>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	dd3b      	ble.n	800367e <main+0x11e>
		{
			red_counter++;
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <main+0x16c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3301      	adds	r3, #1
 800360c:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <main+0x16c>)
 800360e:	6013      	str	r3, [r2, #0]
			green_counter++;
 8003610:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <main+0x170>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <main+0x170>)
 8003618:	6013      	str	r3, [r2, #0]
			blue_counter++;
 800361a:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <main+0x174>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <main+0x174>)
 8003622:	6013      	str	r3, [r2, #0]
			if(red_counter>=1)
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <main+0x16c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	dd07      	ble.n	800363c <main+0xdc>
			{
				red_counter=0;
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <main+0x16c>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
				red++;
 8003632:	4b22      	ldr	r3, [pc, #136]	; (80036bc <main+0x15c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a20      	ldr	r2, [pc, #128]	; (80036bc <main+0x15c>)
 800363a:	6013      	str	r3, [r2, #0]
			}
			if(green_counter>=2)
 800363c:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <main+0x170>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	dd07      	ble.n	8003654 <main+0xf4>
			{
				green_counter=0;
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <main+0x170>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
				green++;
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <main+0x160>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <main+0x160>)
 8003652:	6013      	str	r3, [r2, #0]
			}
			if(blue_counter>=20)
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <main+0x174>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b13      	cmp	r3, #19
 800365a:	dd07      	ble.n	800366c <main+0x10c>
			{
				blue_counter=0;
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <main+0x174>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
				blue++;
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <main+0x164>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <main+0x164>)
 800366a:	6013      	str	r3, [r2, #0]
			}
			set_RGB(red,green,blue);
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <main+0x15c>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <main+0x160>)
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <main+0x164>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	f000 fc13 	bl	8003ea4 <set_RGB>
		}
		sunrise_timer=myTime.Seconds;
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <main+0x150>)
 8003680:	789b      	ldrb	r3, [r3, #2]
 8003682:	461a      	mov	r2, r3
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <main+0x168>)
 8003686:	601a      	str	r2, [r3, #0]





	switch (flag) {	 		// Interrupt triggers menu display and enables navigation
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <main+0x178>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d004      	beq.n	800369a <main+0x13a>
 8003690:	2b03      	cmp	r3, #3
 8003692:	d004      	beq.n	800369e <main+0x13e>
 8003694:	2b01      	cmp	r3, #1
 8003696:	d004      	beq.n	80036a2 <main+0x142>
	case 3:
		// TODO start countdown LCD illuminance timer
		// TODO start menu navigation
		break;
	default:
		break;
 8003698:	e004      	b.n	80036a4 <main+0x144>
		break;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <main+0x144>
		break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <main+0x144>
		break;
 80036a2:	bf00      	nop

	}

	pflag = 0;
 80036a4:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <main+0x17c>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
	RTC_get_Time_and_Date();
 80036aa:	e797      	b.n	80035dc <main+0x7c>
 80036ac:	40020000 	.word	0x40020000
 80036b0:	20000050 	.word	0x20000050
 80036b4:	20000170 	.word	0x20000170
 80036b8:	2000016c 	.word	0x2000016c
 80036bc:	20000040 	.word	0x20000040
 80036c0:	20000044 	.word	0x20000044
 80036c4:	20000048 	.word	0x20000048
 80036c8:	20000030 	.word	0x20000030
 80036cc:	20000034 	.word	0x20000034
 80036d0:	20000038 	.word	0x20000038
 80036d4:	2000003c 	.word	0x2000003c
 80036d8:	2000002c 	.word	0x2000002c
 80036dc:	20000008 	.word	0x20000008

080036e0 <RTC_get_Time_and_Date>:



/* USER CODE BEGIN RTC_ShowTime */
void RTC_get_Time_and_Date(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	  //1)Get time
	  HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80036e4:	2200      	movs	r2, #0
 80036e6:	4905      	ldr	r1, [pc, #20]	; (80036fc <RTC_get_Time_and_Date+0x1c>)
 80036e8:	4805      	ldr	r0, [pc, #20]	; (8003700 <RTC_get_Time_and_Date+0x20>)
 80036ea:	f7fe fce7 	bl	80020bc <HAL_RTC_GetTime>
	  //2)Get data
	  HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 80036ee:	2200      	movs	r2, #0
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <RTC_get_Time_and_Date+0x24>)
 80036f2:	4803      	ldr	r0, [pc, #12]	; (8003700 <RTC_get_Time_and_Date+0x20>)
 80036f4:	f7fe fde7 	bl	80022c6 <HAL_RTC_GetDate>

}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000050 	.word	0x20000050
 8003700:	20000170 	.word	0x20000170
 8003704:	2000016c 	.word	0x2000016c

08003708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b0ac      	sub	sp, #176	; 0xb0
 800370c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003712:	2234      	movs	r2, #52	; 0x34
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f000 feb8 	bl	800448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800372c:	f107 030c 	add.w	r3, r7, #12
 8003730:	225c      	movs	r2, #92	; 0x5c
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fea9 	bl	800448c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	4a38      	ldr	r2, [pc, #224]	; (8003820 <SystemClock_Config+0x118>)
 8003740:	4b37      	ldr	r3, [pc, #220]	; (8003820 <SystemClock_Config+0x118>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
 800374a:	4b35      	ldr	r3, [pc, #212]	; (8003820 <SystemClock_Config+0x118>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	4a32      	ldr	r2, [pc, #200]	; (8003824 <SystemClock_Config+0x11c>)
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <SystemClock_Config+0x11c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <SystemClock_Config+0x11c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003776:	2306      	movs	r3, #6
 8003778:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800377a:	2301      	movs	r3, #1
 800377c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003780:	2301      	movs	r3, #1
 8003782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003786:	2310      	movs	r3, #16
 8003788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800378c:	2302      	movs	r3, #2
 800378e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003798:	2310      	movs	r3, #16
 800379a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800379e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80037a6:	2304      	movs	r3, #4
 80037a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037ac:	2302      	movs	r3, #2
 80037ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe f8cd 	bl	800195c <HAL_RCC_OscConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80037c8:	f000 fb7f 	bl	8003eca <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037cc:	230f      	movs	r3, #15
 80037ce:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d0:	2302      	movs	r3, #2
 80037d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d4:	2300      	movs	r3, #0
 80037d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037de:	2300      	movs	r3, #0
 80037e0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fac1 	bl	8000d70 <HAL_RCC_ClockConfig>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80037f4:	f000 fb69 	bl	8003eca <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037f8:	2320      	movs	r3, #32
 80037fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80037fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fbc8 	bl	8000f9c <HAL_RCCEx_PeriphCLKConfig>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8003812:	f000 fb5a 	bl	8003eca <Error_Handler>
  }
}
 8003816:	bf00      	nop
 8003818:	37b0      	adds	r7, #176	; 0xb0
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40007000 	.word	0x40007000

08003828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <MX_I2C1_Init+0x50>)
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <MX_I2C1_Init+0x54>)
 8003830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <MX_I2C1_Init+0x50>)
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <MX_I2C1_Init+0x58>)
 8003836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <MX_I2C1_Init+0x50>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <MX_I2C1_Init+0x50>)
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <MX_I2C1_Init+0x50>)
 8003846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800384a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <MX_I2C1_Init+0x50>)
 800384e:	2200      	movs	r2, #0
 8003850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <MX_I2C1_Init+0x50>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <MX_I2C1_Init+0x50>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <MX_I2C1_Init+0x50>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003864:	4804      	ldr	r0, [pc, #16]	; (8003878 <MX_I2C1_Init+0x50>)
 8003866:	f7fd f9a3 	bl	8000bb0 <HAL_I2C_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003870:	f000 fb2b 	bl	8003eca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	200000dc 	.word	0x200000dc
 800387c:	40005400 	.word	0x40005400
 8003880:	000186a0 	.word	0x000186a0

08003884 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b090      	sub	sp, #64	; 0x40
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800388a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800389a:	2300      	movs	r3, #0
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800389e:	463b      	mov	r3, r7
 80038a0:	2228      	movs	r2, #40	; 0x28
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fdf1 	bl	800448c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80038aa:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <MX_RTC_Init+0x110>)
 80038ac:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <MX_RTC_Init+0x114>)
 80038ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80038b0:	4b38      	ldr	r3, [pc, #224]	; (8003994 <MX_RTC_Init+0x110>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80038b6:	4b37      	ldr	r3, [pc, #220]	; (8003994 <MX_RTC_Init+0x110>)
 80038b8:	227f      	movs	r2, #127	; 0x7f
 80038ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80038bc:	4b35      	ldr	r3, [pc, #212]	; (8003994 <MX_RTC_Init+0x110>)
 80038be:	22ff      	movs	r2, #255	; 0xff
 80038c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80038c2:	4b34      	ldr	r3, [pc, #208]	; (8003994 <MX_RTC_Init+0x110>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80038c8:	4b32      	ldr	r3, [pc, #200]	; (8003994 <MX_RTC_Init+0x110>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80038ce:	4b31      	ldr	r3, [pc, #196]	; (8003994 <MX_RTC_Init+0x110>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80038d4:	482f      	ldr	r0, [pc, #188]	; (8003994 <MX_RTC_Init+0x110>)
 80038d6:	f7fe fa9b 	bl	8001e10 <HAL_RTC_Init>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80038e0:	f000 faf3 	bl	8003eca <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003902:	2201      	movs	r2, #1
 8003904:	4619      	mov	r1, r3
 8003906:	4823      	ldr	r0, [pc, #140]	; (8003994 <MX_RTC_Init+0x110>)
 8003908:	f7fe fb13 	bl	8001f32 <HAL_RTC_SetTime>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003912:	f000 fada 	bl	8003eca <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x18;
 8003928:	2318      	movs	r3, #24
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800392e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003932:	2201      	movs	r2, #1
 8003934:	4619      	mov	r1, r3
 8003936:	4817      	ldr	r0, [pc, #92]	; (8003994 <MX_RTC_Init+0x110>)
 8003938:	f7fe fc1e 	bl	8002178 <HAL_RTC_SetDate>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003942:	f000 fac2 	bl	8003eca <Error_Handler>
  }
  /**Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003946:	2300      	movs	r3, #0
 8003948:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800394a:	2300      	movs	r3, #0
 800394c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800394e:	2300      	movs	r3, #0
 8003950:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003976:	463b      	mov	r3, r7
 8003978:	2201      	movs	r2, #1
 800397a:	4619      	mov	r1, r3
 800397c:	4805      	ldr	r0, [pc, #20]	; (8003994 <MX_RTC_Init+0x110>)
 800397e:	f7fe fcf1 	bl	8002364 <HAL_RTC_SetAlarm_IT>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003988:	f000 fa9f 	bl	8003eca <Error_Handler>
  }


}
 800398c:	bf00      	nop
 800398e:	3740      	adds	r7, #64	; 0x40
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000170 	.word	0x20000170
 8003998:	40002800 	.word	0x40002800

0800399c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(int brightness)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	615a      	str	r2, [r3, #20]
 80039c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <MX_TIM2_Init+0xb4>)
 80039c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <MX_TIM2_Init+0xb4>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d0:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <MX_TIM2_Init+0xb4>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <MX_TIM2_Init+0xb4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <MX_TIM2_Init+0xb4>)
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80039e2:	481b      	ldr	r0, [pc, #108]	; (8003a50 <MX_TIM2_Init+0xb4>)
 80039e4:	f7fe fefc 	bl	80027e0 <HAL_TIM_PWM_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80039ee:	f000 fa6c 	bl	8003eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039fe:	4619      	mov	r1, r3
 8003a00:	4813      	ldr	r0, [pc, #76]	; (8003a50 <MX_TIM2_Init+0xb4>)
 8003a02:	f7ff faa5 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003a0c:	f000 fa5d 	bl	8003eca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a10:	2360      	movs	r3, #96	; 0x60
 8003a12:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = brightness;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	2208      	movs	r2, #8
 8003a26:	4619      	mov	r1, r3
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <MX_TIM2_Init+0xb4>)
 8003a2a:	f7fe ff39 	bl	80028a0 <HAL_TIM_PWM_ConfigChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003a34:	f000 fa49 	bl	8003eca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8003a38:	2108      	movs	r1, #8
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <MX_TIM2_Init+0xb4>)
 8003a3c:	f7fe fefc 	bl	8002838 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <MX_TIM2_Init+0xb4>)
 8003a42:	f000 fb37 	bl	80040b4 <HAL_TIM_MspPostInit>

}
 8003a46:	bf00      	nop
 8003a48:	3730      	adds	r7, #48	; 0x30
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000190 	.word	0x20000190

08003a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(int duty)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	611a      	str	r2, [r3, #16]
 8003a76:	615a      	str	r2, [r3, #20]
 8003a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a7a:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003a7c:	4a23      	ldr	r2, [pc, #140]	; (8003b0c <MX_TIM3_Init+0xb8>)
 8003a7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003a82:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003a90:	2264      	movs	r2, #100	; 0x64
 8003a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a94:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a9a:	481b      	ldr	r0, [pc, #108]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003a9c:	f7fe fea0 	bl	80027e0 <HAL_TIM_PWM_Init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003aa6:	f000 fa10 	bl	8003eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4813      	ldr	r0, [pc, #76]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003aba:	f7ff fa49 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8003ac4:	f000 fa01 	bl	8003eca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ac8:	2360      	movs	r3, #96	; 0x60
 8003aca:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	2204      	movs	r2, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4809      	ldr	r0, [pc, #36]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003ae2:	f7fe fedd 	bl	80028a0 <HAL_TIM_PWM_ConfigChannel>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003aec:	f000 f9ed 	bl	8003eca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003af0:	2104      	movs	r1, #4
 8003af2:	4805      	ldr	r0, [pc, #20]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003af4:	f7fe fea0 	bl	8002838 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003af8:	4803      	ldr	r0, [pc, #12]	; (8003b08 <MX_TIM3_Init+0xb4>)
 8003afa:	f000 fadb 	bl	80040b4 <HAL_TIM_MspPostInit>

}
 8003afe:	bf00      	nop
 8003b00:	3730      	adds	r7, #48	; 0x30
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000130 	.word	0x20000130
 8003b0c:	40000400 	.word	0x40000400

08003b10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(int duty)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	611a      	str	r2, [r3, #16]
 8003b32:	615a      	str	r2, [r3, #20]
 8003b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b36:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <MX_TIM4_Init+0xb8>)
 8003b3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b3e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003b42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b4c:	2264      	movs	r2, #100	; 0x64
 8003b4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b50:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003b56:	481b      	ldr	r0, [pc, #108]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b58:	f7fe fe42 	bl	80027e0 <HAL_TIM_PWM_Init>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003b62:	f000 f9b2 	bl	8003eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b72:	4619      	mov	r1, r3
 8003b74:	4813      	ldr	r0, [pc, #76]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b76:	f7ff f9eb 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8003b80:	f000 f9a3 	bl	8003eca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b84:	2360      	movs	r3, #96	; 0x60
 8003b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4809      	ldr	r0, [pc, #36]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003b9e:	f7fe fe7f 	bl	80028a0 <HAL_TIM_PWM_ConfigChannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003ba8:	f000 f98f 	bl	8003eca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8003bac:	2100      	movs	r1, #0
 8003bae:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003bb0:	f7fe fe42 	bl	8002838 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003bb4:	4803      	ldr	r0, [pc, #12]	; (8003bc4 <MX_TIM4_Init+0xb4>)
 8003bb6:	f000 fa7d 	bl	80040b4 <HAL_TIM_MspPostInit>

}
 8003bba:	bf00      	nop
 8003bbc:	3730      	adds	r7, #48	; 0x30
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200000a0 	.word	0x200000a0
 8003bc8:	40000800 	.word	0x40000800

08003bcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(int duty)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b092      	sub	sp, #72	; 0x48
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	615a      	str	r2, [r3, #20]
 8003bf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	615a      	str	r2, [r3, #20]
 8003c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c08:	4a34      	ldr	r2, [pc, #208]	; (8003cdc <MX_TIM8_Init+0x110>)
 8003c0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840;
 8003c0c:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c0e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003c12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c20:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003c2c:	482a      	ldr	r0, [pc, #168]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c2e:	f7fe fdd7 	bl	80027e0 <HAL_TIM_PWM_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8003c38:	f000 f947 	bl	8003eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4823      	ldr	r0, [pc, #140]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c4c:	f7ff f980 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8003c56:	f000 f938 	bl	8003eca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c5a:	2360      	movs	r3, #96	; 0x60
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = duty;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c66:	2300      	movs	r3, #0
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4816      	ldr	r0, [pc, #88]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003c80:	f7fe fe0e 	bl	80028a0 <HAL_TIM_PWM_ConfigChannel>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003c8a:	f000 f91e 	bl	8003eca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ca6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003cac:	f107 0308 	add.w	r3, r7, #8
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4809      	ldr	r0, [pc, #36]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003cb4:	f7ff f991 	bl	8002fda <HAL_TIMEx_ConfigBreakDeadTime>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003cbe:	f000 f904 	bl	8003eca <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	4804      	ldr	r0, [pc, #16]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003cc6:	f7fe fdb7 	bl	8002838 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003cca:	4803      	ldr	r0, [pc, #12]	; (8003cd8 <MX_TIM8_Init+0x10c>)
 8003ccc:	f000 f9f2 	bl	80040b4 <HAL_TIM_MspPostInit>

}
 8003cd0:	bf00      	nop
 8003cd2:	3748      	adds	r7, #72	; 0x48
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000064 	.word	0x20000064
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <MX_USART2_UART_Init+0x50>)
 8003ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003d06:	220c      	movs	r2, #12
 8003d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d16:	4805      	ldr	r0, [pc, #20]	; (8003d2c <MX_USART2_UART_Init+0x4c>)
 8003d18:	f7ff f9b8 	bl	800308c <HAL_UART_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d22:	f000 f8d2 	bl	8003eca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200001cc 	.word	0x200001cc
 8003d30:	40004400 	.word	0x40004400

08003d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	4a4f      	ldr	r2, [pc, #316]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d50:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4a48      	ldr	r2, [pc, #288]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d6c:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	6313      	str	r3, [r2, #48]	; 0x30
 8003d76:	4b45      	ldr	r3, [pc, #276]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	4a41      	ldr	r2, [pc, #260]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d88:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b3e      	ldr	r3, [pc, #248]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003da4:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6313      	str	r3, [r2, #48]	; 0x30
 8003dae:	4b37      	ldr	r3, [pc, #220]	; (8003e8c <MX_GPIO_Init+0x158>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2160      	movs	r1, #96	; 0x60
 8003dbe:	4834      	ldr	r0, [pc, #208]	; (8003e90 <MX_GPIO_Init+0x15c>)
 8003dc0:	f7fc feb8 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	4832      	ldr	r0, [pc, #200]	; (8003e94 <MX_GPIO_Init+0x160>)
 8003dca:	f7fc feb3 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <MX_GPIO_Init+0x164>)
 8003dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	482e      	ldr	r0, [pc, #184]	; (8003e9c <MX_GPIO_Init+0x168>)
 8003de4:	f7fc fd14 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003de8:	2302      	movs	r3, #2
 8003dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <MX_GPIO_Init+0x16c>)
 8003dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4828      	ldr	r0, [pc, #160]	; (8003e9c <MX_GPIO_Init+0x168>)
 8003dfc:	f7fc fd08 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8003e00:	2360      	movs	r3, #96	; 0x60
 8003e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	4619      	mov	r1, r3
 8003e16:	481e      	ldr	r0, [pc, #120]	; (8003e90 <MX_GPIO_Init+0x15c>)
 8003e18:	f7fc fcfa 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e22:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <MX_GPIO_Init+0x16c>)
 8003e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2a:	f107 0314 	add.w	r3, r7, #20
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4817      	ldr	r0, [pc, #92]	; (8003e90 <MX_GPIO_Init+0x15c>)
 8003e32:	f7fc fced 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e36:	2320      	movs	r3, #32
 8003e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4811      	ldr	r0, [pc, #68]	; (8003e94 <MX_GPIO_Init+0x160>)
 8003e4e:	f7fc fcdf 	bl	8000810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2100      	movs	r1, #0
 8003e56:	2007      	movs	r0, #7
 8003e58:	f7fc fca3 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003e5c:	2007      	movs	r0, #7
 8003e5e:	f7fc fcbc 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2100      	movs	r1, #0
 8003e66:	2017      	movs	r0, #23
 8003e68:	f7fc fc9b 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e6c:	2017      	movs	r0, #23
 8003e6e:	f7fc fcb4 	bl	80007da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	2028      	movs	r0, #40	; 0x28
 8003e78:	f7fc fc93 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e7c:	2028      	movs	r0, #40	; 0x28
 8003e7e:	f7fc fcac 	bl	80007da <HAL_NVIC_EnableIRQ>

}
 8003e82:	bf00      	nop
 8003e84:	3728      	adds	r7, #40	; 0x28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020000 	.word	0x40020000
 8003e94:	40020400 	.word	0x40020400
 8003e98:	10210000 	.word	0x10210000
 8003e9c:	40020800 	.word	0x40020800
 8003ea0:	10110000 	.word	0x10110000

08003ea4 <set_RGB>:

/* USER CODE BEGIN 4 */
void set_RGB(int red, int green, int blue)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
	MX_TIM4_Init(red);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff fe2d 	bl	8003b10 <MX_TIM4_Init>
	MX_TIM3_Init(green);
 8003eb6:	68b8      	ldr	r0, [r7, #8]
 8003eb8:	f7ff fdcc 	bl	8003a54 <MX_TIM3_Init>
	MX_TIM8_Init(blue);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fe85 	bl	8003bcc <MX_TIM8_Init>
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_MspInit+0x4c>)
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_MspInit+0x4c>)
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eec:	6453      	str	r3, [r2, #68]	; 0x44
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_MspInit+0x4c>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_MspInit+0x4c>)
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_MspInit+0x4c>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_MspInit+0x4c>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f16:	2007      	movs	r0, #7
 8003f18:	f7fc fc38 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800

08003f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <HAL_I2C_MspInit+0x84>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d12c      	bne.n	8003fa4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <HAL_I2C_MspInit+0x88>)
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <HAL_I2C_MspInit+0x88>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_I2C_MspInit+0x88>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f6c:	2312      	movs	r3, #18
 8003f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f70:	2301      	movs	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f78:	2304      	movs	r3, #4
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	4619      	mov	r1, r3
 8003f82:	480c      	ldr	r0, [pc, #48]	; (8003fb4 <HAL_I2C_MspInit+0x8c>)
 8003f84:	f7fc fc44 	bl	8000810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <HAL_I2C_MspInit+0x88>)
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_I2C_MspInit+0x88>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f96:	6413      	str	r3, [r2, #64]	; 0x40
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_I2C_MspInit+0x88>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003fa4:	bf00      	nop
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40005400 	.word	0x40005400
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020400 	.word	0x40020400

08003fb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <HAL_RTC_MspInit+0x30>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <HAL_RTC_MspInit+0x34>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2029      	movs	r0, #41	; 0x29
 8003fd6:	f7fc fbe4 	bl	80007a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003fda:	2029      	movs	r0, #41	; 0x29
 8003fdc:	f7fc fbfd 	bl	80007da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40002800 	.word	0x40002800
 8003fec:	42470e3c 	.word	0x42470e3c

08003ff0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d10e      	bne.n	8004020 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004008:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800401e:	e03a      	b.n	8004096 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <HAL_TIM_PWM_MspInit+0xb8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
}
 8004046:	e026      	b.n	8004096 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_TIM_PWM_MspInit+0xbc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10e      	bne.n	8004070 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	e012      	b.n	8004096 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0e      	ldr	r2, [pc, #56]	; (80040b0 <HAL_TIM_PWM_MspInit+0xc0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10d      	bne.n	8004096 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6453      	str	r3, [r2, #68]	; 0x44
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_TIM_PWM_MspInit+0xb4>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40010400 	.word	0x40010400

080040b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	f107 031c 	add.w	r3, r7, #28
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d4:	d11f      	bne.n	8004116 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	4a46      	ldr	r2, [pc, #280]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 80040dc:	4b45      	ldr	r3, [pc, #276]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30
 80040e6:	4b43      	ldr	r3, [pc, #268]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f8:	2302      	movs	r3, #2
 80040fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	2300      	movs	r3, #0
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004104:	2301      	movs	r3, #1
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004108:	f107 031c 	add.w	r3, r7, #28
 800410c:	4619      	mov	r1, r3
 800410e:	483a      	ldr	r0, [pc, #232]	; (80041f8 <HAL_TIM_MspPostInit+0x144>)
 8004110:	f7fc fb7e 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004114:	e06a      	b.n	80041ec <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a38      	ldr	r2, [pc, #224]	; (80041fc <HAL_TIM_MspPostInit+0x148>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d11e      	bne.n	800415e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	4a33      	ldr	r2, [pc, #204]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 8004126:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	6313      	str	r3, [r2, #48]	; 0x30
 8004130:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	2302      	movs	r3, #2
 8004142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	2300      	movs	r3, #0
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800414c:	2302      	movs	r3, #2
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 031c 	add.w	r3, r7, #28
 8004154:	4619      	mov	r1, r3
 8004156:	482a      	ldr	r0, [pc, #168]	; (8004200 <HAL_TIM_MspPostInit+0x14c>)
 8004158:	f7fc fb5a 	bl	8000810 <HAL_GPIO_Init>
}
 800415c:	e046      	b.n	80041ec <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a28      	ldr	r2, [pc, #160]	; (8004204 <HAL_TIM_MspPostInit+0x150>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d11e      	bne.n	80041a6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 800416e:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	6313      	str	r3, [r2, #48]	; 0x30
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004190:	2300      	movs	r3, #0
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004194:	2302      	movs	r3, #2
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	4619      	mov	r1, r3
 800419e:	4816      	ldr	r0, [pc, #88]	; (80041f8 <HAL_TIM_MspPostInit+0x144>)
 80041a0:	f7fc fb36 	bl	8000810 <HAL_GPIO_Init>
}
 80041a4:	e022      	b.n	80041ec <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_TIM_MspPostInit+0x154>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d11d      	bne.n	80041ec <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 80041b6:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6313      	str	r3, [r2, #48]	; 0x30
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <HAL_TIM_MspPostInit+0x140>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d0:	2302      	movs	r3, #2
 80041d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d8:	2300      	movs	r3, #0
 80041da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80041dc:	2303      	movs	r3, #3
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e0:	f107 031c 	add.w	r3, r7, #28
 80041e4:	4619      	mov	r1, r3
 80041e6:	4809      	ldr	r0, [pc, #36]	; (800420c <HAL_TIM_MspPostInit+0x158>)
 80041e8:	f7fc fb12 	bl	8000810 <HAL_GPIO_Init>
}
 80041ec:	bf00      	nop
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40000400 	.word	0x40000400
 8004200:	40020000 	.word	0x40020000
 8004204:	40000800 	.word	0x40000800
 8004208:	40010400 	.word	0x40010400
 800420c:	40020800 	.word	0x40020800

08004210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_UART_MspInit+0x84>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d12b      	bne.n	800428a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_UART_MspInit+0x88>)
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <HAL_UART_MspInit+0x88>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <HAL_UART_MspInit+0x88>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_UART_MspInit+0x88>)
 8004254:	4b10      	ldr	r3, [pc, #64]	; (8004298 <HAL_UART_MspInit+0x88>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <HAL_UART_MspInit+0x88>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800426a:	230c      	movs	r3, #12
 800426c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426e:	2302      	movs	r3, #2
 8004270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004272:	2301      	movs	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004276:	2303      	movs	r3, #3
 8004278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800427a:	2307      	movs	r3, #7
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	4619      	mov	r1, r3
 8004284:	4805      	ldr	r0, [pc, #20]	; (800429c <HAL_UART_MspInit+0x8c>)
 8004286:	f7fc fac3 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800428a:	bf00      	nop
 800428c:	3728      	adds	r7, #40	; 0x28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40004400 	.word	0x40004400
 8004298:	40023800 	.word	0x40023800
 800429c:	40020000 	.word	0x40020000

080042a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042b2:	e7fe      	b.n	80042b2 <HardFault_Handler+0x4>

080042b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042b8:	e7fe      	b.n	80042b8 <MemManage_Handler+0x4>

080042ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042be:	e7fe      	b.n	80042be <BusFault_Handler+0x4>

080042c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042c4:	e7fe      	b.n	80042c4 <UsageFault_Handler+0x4>

080042c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042f4:	f7fc f960 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}

080042fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  // TODO what happens when button is pushed?
  *pflag = 1;
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <EXTI1_IRQHandler+0x18>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]


  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004308:	2002      	movs	r0, #2
 800430a:	f7fc fc2d 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000008 	.word	0x20000008

08004318 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <EXTI9_5_IRQHandler+0x40>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <EXTI9_5_IRQHandler+0x18>
	  //TODO what happens when the rotary encoder is turned and pulls potential of this pin to ground?
	  //TODO check for set flag in main (polling) and call menu function if flag is set
	  *pflag = 2;
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <EXTI9_5_IRQHandler+0x44>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2202      	movs	r2, #2
 800432e:	601a      	str	r2, [r3, #0]
  }

  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <EXTI9_5_IRQHandler+0x40>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <EXTI9_5_IRQHandler+0x2c>
	  //TODO what happens when the rotary encoder is turned and pulls potential of this pin to ground?
	  //TODO check for set flag in main (polling) and call menu function if flag is set
	  *pflag = 3;
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <EXTI9_5_IRQHandler+0x44>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2203      	movs	r2, #3
 8004342:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 8004344:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004348:	f7fc fc0e 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 800434c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004350:	f7fc fc0a 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40013c00 	.word	0x40013c00
 800435c:	20000008 	.word	0x20000008

08004360 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004364:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004368:	f7fc fbfe 	bl	8000b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}

08004370 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <RTC_Alarm_IRQHandler+0x10>)
 8004376:	f7fe f949 	bl	800260c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000170 	.word	0x20000170

08004384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004388:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <SystemInit+0x60>)
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <SystemInit+0x60>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <SystemInit+0x64>)
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <SystemInit+0x64>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <SystemInit+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80043aa:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <SystemInit+0x64>)
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <SystemInit+0x64>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <SystemInit+0x64>)
 80043bc:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <SystemInit+0x68>)
 80043be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80043c0:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <SystemInit+0x64>)
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <SystemInit+0x64>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <SystemInit+0x64>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043d2:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <SystemInit+0x60>)
 80043d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043d8:	609a      	str	r2, [r3, #8]
#endif
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	e000ed00 	.word	0xe000ed00
 80043e8:	40023800 	.word	0x40023800
 80043ec:	24003010 	.word	0x24003010

080043f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004428 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043f6:	e003      	b.n	8004400 <LoopCopyDataInit>

080043f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043fe:	3104      	adds	r1, #4

08004400 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004400:	480b      	ldr	r0, [pc, #44]	; (8004430 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004404:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004406:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004408:	d3f6      	bcc.n	80043f8 <CopyDataInit>
  ldr  r2, =_sbss
 800440a:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800440c:	e002      	b.n	8004414 <LoopFillZerobss>

0800440e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800440e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004410:	f842 3b04 	str.w	r3, [r2], #4

08004414 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004416:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004418:	d3f9      	bcc.n	800440e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800441a:	f7ff ffb3 	bl	8004384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800441e:	f000 f811 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004422:	f7ff f89d 	bl	8003560 <main>
  bx  lr    
 8004426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004428:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800442c:	080044dc 	.word	0x080044dc
  ldr  r0, =_sdata
 8004430:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004434:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8004438:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800443c:	20000234 	.word	0x20000234

08004440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004440:	e7fe      	b.n	8004440 <ADC_IRQHandler>
	...

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	4e0d      	ldr	r6, [pc, #52]	; (800447c <__libc_init_array+0x38>)
 8004448:	4c0d      	ldr	r4, [pc, #52]	; (8004480 <__libc_init_array+0x3c>)
 800444a:	1ba4      	subs	r4, r4, r6
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	2500      	movs	r5, #0
 8004450:	42a5      	cmp	r5, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	4e0b      	ldr	r6, [pc, #44]	; (8004484 <__libc_init_array+0x40>)
 8004456:	4c0c      	ldr	r4, [pc, #48]	; (8004488 <__libc_init_array+0x44>)
 8004458:	f000 f820 	bl	800449c <_init>
 800445c:	1ba4      	subs	r4, r4, r6
 800445e:	10a4      	asrs	r4, r4, #2
 8004460:	2500      	movs	r5, #0
 8004462:	42a5      	cmp	r5, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800446c:	4798      	blx	r3
 800446e:	3501      	adds	r5, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004476:	4798      	blx	r3
 8004478:	3501      	adds	r5, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	080044d4 	.word	0x080044d4
 8004480:	080044d4 	.word	0x080044d4
 8004484:	080044d4 	.word	0x080044d4
 8004488:	080044d8 	.word	0x080044d8

0800448c <memset>:
 800448c:	4402      	add	r2, r0
 800448e:	4603      	mov	r3, r0
 8004490:	4293      	cmp	r3, r2
 8004492:	d100      	bne.n	8004496 <memset+0xa>
 8004494:	4770      	bx	lr
 8004496:	f803 1b01 	strb.w	r1, [r3], #1
 800449a:	e7f9      	b.n	8004490 <memset+0x4>

0800449c <_init>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr

080044a8 <_fini>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr
