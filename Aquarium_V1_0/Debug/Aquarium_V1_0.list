
Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08005f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  20000084  08005fcc  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e4  08005fcc  000202e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017887  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002785  00000000  00000000  0003793b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010b0  00000000  00000000  0003a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fa8  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007bcf  00000000  00000000  0003c118  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000051df  00000000  00000000  00043ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00048ec6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a3c  00000000  00000000  00048f44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ea0 	.word	0x08005ea0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08005ea0 	.word	0x08005ea0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f947 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f004 fd64 	bl	80050c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f95f 	bl	80008e6 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f927 	bl	8000892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000001c 	.word	0x2000001c
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	200000d0 	.word	0x200000d0

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200000d0 	.word	0x200000d0

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad2      	subs	r2, r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3f7      	bcc.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000756:	4909      	ldr	r1, [pc, #36]	; (800077c <NVIC_EnableIRQ+0x30>)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	095b      	lsrs	r3, r3, #5
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	f002 021f 	and.w	r2, r2, #31
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100

08000780 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	da0b      	bge.n	80007ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <NVIC_SetPriority+0x4c>)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	3b04      	subs	r3, #4
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007aa:	e009      	b.n	80007c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	4908      	ldr	r1, [pc, #32]	; (80007d0 <NVIC_SetPriority+0x50>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00
 80007d0:	e000e100 	.word	0xe000e100

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	2201      	movs	r2, #1
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	401a      	ands	r2, r3
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081a:	2101      	movs	r1, #1
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	1e59      	subs	r1, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f7ff ff90 	bl	8000780 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff2f 	bl	80006e8 <NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff44 	bl	8000730 <NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff90 	bl	80007d4 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5f 	bl	8000780 <NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff37 	bl	800074c <NVIC_EnableIRQ>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffa2 	bl	8000838 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
 800091a:	e165      	b.n	8000be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800091c:	2201      	movs	r2, #1
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	429a      	cmp	r2, r3
 8000936:	f040 8154 	bne.w	8000be2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d003      	beq.n	800094a <HAL_GPIO_Init+0x4a>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b12      	cmp	r3, #18
 8000948:	d123      	bne.n	8000992 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	220f      	movs	r2, #15
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4013      	ands	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	691a      	ldr	r2, [r3, #16]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	08da      	lsrs	r2, r3, #3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3208      	adds	r2, #8
 800098c:	69b9      	ldr	r1, [r7, #24]
 800098e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	2203      	movs	r2, #3
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4013      	ands	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 0203 	and.w	r2, r3, #3
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d00b      	beq.n	80009e6 <HAL_GPIO_Init+0xe6>
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d007      	beq.n	80009e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009da:	2b11      	cmp	r3, #17
 80009dc:	d003      	beq.n	80009e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b12      	cmp	r3, #18
 80009e4:	d130      	bne.n	8000a48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4013      	ands	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	68da      	ldr	r2, [r3, #12]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	f003 0201 	and.w	r2, r3, #1
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 80ae 	beq.w	8000be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4a5c      	ldr	r2, [pc, #368]	; (8000bfc <HAL_GPIO_Init+0x2fc>)
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <HAL_GPIO_Init+0x2fc>)
 8000a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b59      	ldr	r3, [pc, #356]	; (8000bfc <HAL_GPIO_Init+0x2fc>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000aa2:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <HAL_GPIO_Init+0x300>)
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_GPIO_Init+0x304>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d025      	beq.n	8000b1a <HAL_GPIO_Init+0x21a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <HAL_GPIO_Init+0x308>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d01f      	beq.n	8000b16 <HAL_GPIO_Init+0x216>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4c      	ldr	r2, [pc, #304]	; (8000c0c <HAL_GPIO_Init+0x30c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0x212>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_GPIO_Init+0x310>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x20e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <HAL_GPIO_Init+0x314>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x20a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <HAL_GPIO_Init+0x318>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x206>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <HAL_GPIO_Init+0x31c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x202>
 8000afe:	2306      	movs	r3, #6
 8000b00:	e00c      	b.n	8000b1c <HAL_GPIO_Init+0x21c>
 8000b02:	2307      	movs	r3, #7
 8000b04:	e00a      	b.n	8000b1c <HAL_GPIO_Init+0x21c>
 8000b06:	2305      	movs	r3, #5
 8000b08:	e008      	b.n	8000b1c <HAL_GPIO_Init+0x21c>
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x21c>
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e004      	b.n	8000b1c <HAL_GPIO_Init+0x21c>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x21c>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x21c>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	69fa      	ldr	r2, [r7, #28]
 8000b1e:	f002 0203 	and.w	r2, r2, #3
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	4093      	lsls	r3, r2
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b2c:	4934      	ldr	r1, [pc, #208]	; (8000c00 <HAL_GPIO_Init+0x300>)
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b5e:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b64:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b88:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bdc:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_GPIO_Init+0x320>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3301      	adds	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	f67f ae96 	bls.w	800091c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3724      	adds	r7, #36	; 0x24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40013800 	.word	0x40013800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40020800 	.word	0x40020800
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40021400 	.word	0x40021400
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	40013c00 	.word	0x40013c00

08000c24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e001      	b.n	8000c46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
 8000c60:	4613      	mov	r3, r2
 8000c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c64:	787b      	ldrb	r3, [r7, #1]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c70:	e003      	b.n	8000c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	041a      	lsls	r2, r3, #16
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	619a      	str	r2, [r3, #24]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	405a      	eors	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	615a      	str	r2, [r3, #20]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cb8:	695a      	ldr	r2, [r3, #20]
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d006      	beq.n	8000cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f806 	bl	8000cdc <HAL_GPIO_EXTI_Callback>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013c00 	.word	0x40013c00

08000cdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0c8      	b.n	8000ea0 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d106      	bne.n	8000d28 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f004 f9f4 	bl	8005110 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d40:	f000 fc98 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8000d44:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	4a57      	ldr	r2, [pc, #348]	; (8000ea8 <HAL_I2C_Init+0x1b4>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	0c9b      	lsrs	r3, r3, #18
 8000d50:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4952      	ldr	r1, [pc, #328]	; (8000eac <HAL_I2C_Init+0x1b8>)
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d802      	bhi.n	8000d6e <HAL_I2C_Init+0x7a>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	e009      	b.n	8000d82 <HAL_I2C_Init+0x8e>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	494d      	ldr	r1, [pc, #308]	; (8000eb0 <HAL_I2C_Init+0x1bc>)
 8000d7a:	fba1 1303 	umull	r1, r3, r1, r3
 8000d7e:	099b      	lsrs	r3, r3, #6
 8000d80:	3301      	adds	r3, #1
 8000d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a47      	ldr	r2, [pc, #284]	; (8000eac <HAL_I2C_Init+0x1b8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d812      	bhi.n	8000db8 <HAL_I2C_Init+0xc4>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d906      	bls.n	8000db4 <HAL_I2C_Init+0xc0>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	e045      	b.n	8000e40 <HAL_I2C_Init+0x14c>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e043      	b.n	8000e40 <HAL_I2C_Init+0x14c>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10f      	bne.n	8000de0 <HAL_I2C_Init+0xec>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	e010      	b.n	8000e02 <HAL_I2C_Init+0x10e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	009a      	lsls	r2, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_I2C_Init+0x116>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e01a      	b.n	8000e40 <HAL_I2C_Init+0x14c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10a      	bne.n	8000e28 <HAL_I2C_Init+0x134>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e26:	e00b      	b.n	8000e40 <HAL_I2C_Init+0x14c>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	009a      	lsls	r2, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e40:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	69d1      	ldr	r1, [r2, #28]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6a12      	ldr	r2, [r2, #32]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6911      	ldr	r1, [r2, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68d2      	ldr	r2, [r2, #12]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6951      	ldr	r1, [r2, #20]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6992      	ldr	r2, [r2, #24]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	f042 0201 	orr.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	000186a0 	.word	0x000186a0
 8000eb0:	10624dd3 	.word	0x10624dd3

08000eb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	817b      	strh	r3, [r7, #10]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000ecc:	f7ff fbde 	bl	800068c <HAL_GetTick>
 8000ed0:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	f040 80ee 	bne.w	80010bc <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2319      	movs	r3, #25
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4977      	ldr	r1, [pc, #476]	; (80010c8 <HAL_I2C_Master_Transmit+0x214>)
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f972 	bl	80011d4 <I2C_WaitOnFlagUntilTimeout>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e0e1      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_I2C_Master_Transmit+0x54>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e0da      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d007      	beq.n	8000f2e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	f042 0201 	orr.w	r2, r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f3c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2221      	movs	r2, #33	; 0x21
 8000f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2210      	movs	r2, #16
 8000f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	893a      	ldrh	r2, [r7, #8]
 8000f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a5a      	ldr	r2, [pc, #360]	; (80010cc <HAL_I2C_Master_Transmit+0x218>)
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f70:	8979      	ldrh	r1, [r7, #10]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	6a3a      	ldr	r2, [r7, #32]
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 f8aa 	bl	80010d0 <I2C_MasterRequestWrite>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00f      	beq.n	8000fa2 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d105      	bne.n	8000f96 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e093      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e08d      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8000fb8:	e066      	b.n	8001088 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	6a39      	ldr	r1, [r7, #32]
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f9c7 	bl	8001352 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00f      	beq.n	8000fea <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d109      	bne.n	8000fe6 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fe0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e06b      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e069      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	1c58      	adds	r0, r3, #1
 8000ff4:	68f9      	ldr	r1, [r7, #12]
 8000ff6:	6248      	str	r0, [r1, #36]	; 0x24
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001000:	b29b      	uxth	r3, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	b29a      	uxth	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100e:	3b01      	subs	r3, #1
 8001010:	b29a      	uxth	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b04      	cmp	r3, #4
 8001022:	d119      	bne.n	8001058 <HAL_I2C_Master_Transmit+0x1a4>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001028:	2b00      	cmp	r3, #0
 800102a:	d015      	beq.n	8001058 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	1c58      	adds	r0, r3, #1
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	6248      	str	r0, [r1, #36]	; 0x24
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001042:	b29b      	uxth	r3, r3
 8001044:	3b01      	subs	r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001050:	3b01      	subs	r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	6a39      	ldr	r1, [r7, #32]
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f000 f9b5 	bl	80013cc <I2C_WaitOnBTFFlagUntilTimeout>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00f      	beq.n	8001088 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	2b04      	cmp	r3, #4
 800106e:	d109      	bne.n	8001084 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800107e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e01c      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e01a      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800108c:	2b00      	cmp	r3, #0
 800108e:	d194      	bne.n	8000fba <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800109e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2220      	movs	r2, #32
 80010a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e000      	b.n	80010be <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80010bc:	2302      	movs	r3, #2
  }
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	00100002 	.word	0x00100002
 80010cc:	ffff0000 	.word	0xffff0000

080010d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	460b      	mov	r3, r1
 80010de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d006      	beq.n	80010fa <I2C_MasterRequestWrite+0x2a>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d003      	beq.n	80010fa <I2C_MasterRequestWrite+0x2a>
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010f8:	d108      	bne.n	800110c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00b      	b.n	8001124 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	2b12      	cmp	r3, #18
 8001112:	d107      	bne.n	8001124 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001122:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 f84f 	bl	80011d4 <I2C_WaitOnFlagUntilTimeout>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e040      	b.n	80011c2 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001148:	d107      	bne.n	800115a <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	897a      	ldrh	r2, [r7, #10]
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	e021      	b.n	800119e <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	897a      	ldrh	r2, [r7, #10]
 8001160:	11d2      	asrs	r2, r2, #7
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	f002 0206 	and.w	r2, r2, #6
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	f062 020f 	orn	r2, r2, #15
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4915      	ldr	r1, [pc, #84]	; (80011cc <I2C_MasterRequestWrite+0xfc>)
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f87c 	bl	8001276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	2b04      	cmp	r3, #4
 800118a:	d101      	bne.n	8001190 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e018      	b.n	80011c2 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e016      	b.n	80011c2 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	897a      	ldrh	r2, [r7, #10]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	490b      	ldr	r1, [pc, #44]	; (80011d0 <I2C_MasterRequestWrite+0x100>)
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 f866 	bl	8001276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d101      	bne.n	80011bc <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e002      	b.n	80011c2 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e000      	b.n	80011c2 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	00010008 	.word	0x00010008
 80011d0:	00010002 	.word	0x00010002

080011d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80011e4:	e01f      	b.n	8001226 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d01b      	beq.n	8001226 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80011f4:	f7ff fa4a 	bl	800068c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad2      	subs	r2, r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d910      	bls.n	8001226 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2220      	movs	r2, #32
 800120e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e023      	b.n	800126e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10d      	bne.n	800124c <I2C_WaitOnFlagUntilTimeout+0x78>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4013      	ands	r3, r2
 800123c:	b29b      	uxth	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	e00c      	b.n	8001266 <I2C_WaitOnFlagUntilTimeout+0x92>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4013      	ands	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	429a      	cmp	r2, r3
 800126a:	d0bc      	beq.n	80011e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001284:	e040      	b.n	8001308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d11c      	bne.n	80012d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012ae:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2204      	movs	r2, #4
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2220      	movs	r2, #32
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e03c      	b.n	800134a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d6:	d017      	beq.n	8001308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80012de:	f7ff f9d5 	bl	800068c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	1ad2      	subs	r2, r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d90c      	bls.n	8001308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2220      	movs	r2, #32
 80012f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e020      	b.n	800134a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10c      	bne.n	800132c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	43da      	mvns	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4013      	ands	r3, r2
 800131e:	b29b      	uxth	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	e00b      	b.n	8001344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4013      	ands	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d19e      	bne.n	8001286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800135e:	e029      	b.n	80013b4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f870 	bl	8001446 <I2C_IsAcknowledgeFailed>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e029      	b.n	80013c4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001376:	d01d      	beq.n	80013b4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800137e:	f7ff f985 	bl	800068c <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d912      	bls.n	80013b4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f043 0220 	orr.w	r2, r3, #32
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2220      	movs	r2, #32
 80013a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e007      	b.n	80013c4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	2b80      	cmp	r3, #128	; 0x80
 80013c0:	d1ce      	bne.n	8001360 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013d8:	e029      	b.n	800142e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f833 	bl	8001446 <I2C_IsAcknowledgeFailed>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e029      	b.n	800143e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d01d      	beq.n	800142e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80013f8:	f7ff f948 	bl	800068c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	d912      	bls.n	800142e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f043 0220 	orr.w	r2, r3, #32
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e007      	b.n	800143e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b04      	cmp	r3, #4
 800143a:	d1ce      	bne.n	80013da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145c:	d114      	bne.n	8001488 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001466:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2204      	movs	r2, #4
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0ca      	b.n	8001642 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_ClockConfig+0x1b4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 020f 	and.w	r2, r3, #15
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d20c      	bcs.n	80014d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b64      	ldr	r3, [pc, #400]	; (800164c <HAL_RCC_ClockConfig+0x1b4>)
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b62      	ldr	r3, [pc, #392]	; (800164c <HAL_RCC_ClockConfig+0x1b4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 020f 	and.w	r2, r3, #15
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0b6      	b.n	8001642 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800150e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	494f      	ldr	r1, [pc, #316]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001512:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d044      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d119      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07d      	b.n	8001642 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d003      	beq.n	8001556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	2b03      	cmp	r3, #3
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e06d      	b.n	8001642 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e065      	b.n	8001642 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 0203 	bic.w	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff f880 	bl	800068c <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff f87c 	bl	800068c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e04d      	b.n	8001642 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_ClockConfig+0x1b4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 020f 	and.w	r2, r3, #15
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d90c      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_RCC_ClockConfig+0x1b4>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <HAL_RCC_ClockConfig+0x1b4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 020f 	and.w	r2, r3, #15
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e030      	b.n	8001642 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4918      	ldr	r1, [pc, #96]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160a:	4911      	ldr	r1, [pc, #68]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161e:	f000 fb7b 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001622:	4601      	mov	r1, r0
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	fa21 f303 	lsr.w	r3, r1, r3
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f7fe ffe2 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00
 8001650:	40023800 	.word	0x40023800
 8001654:	08005eec 	.word	0x08005eec
 8001658:	2000001c 	.word	0x2000001c

0800165c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_RCC_GetHCLKFreq+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000001c 	.word	0x2000001c

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001678:	f7ff fff0 	bl	800165c <HAL_RCC_GetHCLKFreq>
 800167c:	4601      	mov	r1, r0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	0a9b      	lsrs	r3, r3, #10
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	08005efc 	.word	0x08005efc

0800169c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016a0:	f7ff ffdc 	bl	800165c <HAL_RCC_GetHCLKFreq>
 80016a4:	4601      	mov	r1, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0b5b      	lsrs	r3, r3, #13
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08005efc 	.word	0x08005efc

080016c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d010      	beq.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80016fc:	496f      	ldr	r1, [pc, #444]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016fe:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001704:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170c:	4313      	orrs	r3, r2
 800170e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800171a:	2301      	movs	r3, #1
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800172a:	4964      	ldr	r1, [pc, #400]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800172c:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001732:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	4313      	orrs	r3, r2
 800173c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001748:	2301      	movs	r3, #1
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d017      	beq.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001758:	4958      	ldr	r1, [pc, #352]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800175c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4313      	orrs	r3, r2
 800176a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001776:	d101      	bne.n	800177c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001778:	2301      	movs	r3, #1
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d017      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001794:	4949      	ldr	r1, [pc, #292]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001796:	4b49      	ldr	r3, [pc, #292]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800179c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b2:	d101      	bne.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 808a 	beq.w	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4a39      	ldr	r2, [pc, #228]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80017ee:	4a34      	ldr	r2, [pc, #208]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017fa:	f7fe ff47 	bl	800068c <HAL_GetTick>
 80017fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7fe ff43 	bl	800068c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e278      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001828:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d02f      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	429a      	cmp	r2, r3
 800183c:	d028      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001846:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001854:	4a19      	ldr	r2, [pc, #100]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d014      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001866:	f7fe ff11 	bl	800068c <HAL_GetTick>
 800186a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7fe ff0d 	bl	800068c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e240      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800189c:	d114      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800189e:	4907      	ldr	r1, [pc, #28]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b4:	4313      	orrs	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]
 80018b8:	e00c      	b.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000
 80018c4:	42470e40 	.word	0x42470e40
 80018c8:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018ca:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80018d2:	6093      	str	r3, [r2, #8]
 80018d4:	4947      	ldr	r1, [pc, #284]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	4313      	orrs	r3, r2
 80018e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80018f2:	4a41      	ldr	r2, [pc, #260]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018fa:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00a      	beq.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001908:	493a      	ldr	r1, [pc, #232]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	4313      	orrs	r3, r2
 800191a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800192a:	4932      	ldr	r1, [pc, #200]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	4313      	orrs	r3, r2
 800193c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d011      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800194c:	4929      	ldr	r1, [pc, #164]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	4313      	orrs	r3, r2
 800195e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800196a:	d101      	bne.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800196c:	2301      	movs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00a      	beq.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800197c:	491d      	ldr	r1, [pc, #116]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001984:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	4313      	orrs	r3, r2
 800198e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	d011      	beq.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800199e:	4915      	ldr	r1, [pc, #84]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019bc:	d101      	bne.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80019be:	2301      	movs	r3, #1
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d005      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d0:	f040 80ff 	bne.w	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019da:	f7fe fe57 	bl	800068c <HAL_GetTick>
 80019de:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019e0:	e00e      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019e2:	f7fe fe53 	bl	800068c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d907      	bls.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e188      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80019f4:	40023800 	.word	0x40023800
 80019f8:	424711e0 	.word	0x424711e0
 80019fc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a00:	4b7e      	ldr	r3, [pc, #504]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ea      	bne.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d028      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d124      	bne.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a34:	4b71      	ldr	r3, [pc, #452]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	3301      	adds	r3, #1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a4c:	0e1b      	lsrs	r3, r3, #24
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a54:	4969      	ldr	r1, [pc, #420]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	019b      	lsls	r3, r3, #6
 8001a60:	431a      	orrs	r2, r3
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	3b01      	subs	r3, #1
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	061b      	lsls	r3, r3, #24
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	071b      	lsls	r3, r3, #28
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a92:	d00a      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d035      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa8:	d130      	bne.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ac2:	0f1b      	lsrs	r3, r3, #28
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001aca:	494c      	ldr	r1, [pc, #304]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	3b01      	subs	r3, #1
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	071b      	lsls	r3, r3, #28
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001af4:	4941      	ldr	r1, [pc, #260]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001afc:	f023 021f 	bic.w	r2, r3, #31
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d029      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b20:	d124      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b3a:	0f1b      	lsrs	r3, r3, #28
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001b42:	492e      	ldr	r1, [pc, #184]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	3b01      	subs	r3, #1
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	071b      	lsls	r3, r3, #28
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d016      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b78:	4920      	ldr	r1, [pc, #128]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	019b      	lsls	r3, r3, #6
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	061b      	lsls	r3, r3, #24
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	071b      	lsls	r3, r3, #28
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bac:	f7fe fd6e 	bl	800068c <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bb4:	f7fe fd6a 	bl	800068c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e09f      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 8095 	bne.w	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001be0:	f7fe fd54 	bl	800068c <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001be6:	e00f      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001be8:	f7fe fd50 	bl	800068c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d908      	bls.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e085      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	42470068 	.word	0x42470068
 8001c04:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c08:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d0e8      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d02b      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d127      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001c50:	492f      	ldr	r1, [pc, #188]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	019b      	lsls	r3, r3, #6
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	3b01      	subs	r3, #1
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c74:	4926      	ldr	r1, [pc, #152]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	3b01      	subs	r3, #1
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01d      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ca2:	d118      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	0e1b      	lsrs	r3, r3, #24
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001cb2:	4917      	ldr	r1, [pc, #92]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7fe fcd6 	bl	800068c <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ce4:	f7fe fcd2 	bl	800068c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e007      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d02:	d1ef      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3730      	adds	r7, #48	; 0x30
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	42470070 	.word	0x42470070

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d1c:	b0a1      	sub	sp, #132	; 0x84
 8001d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d34:	4ba0      	ldr	r3, [pc, #640]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	f200 8193 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x350>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <HAL_RCC_GetSysClockFreq+0x30>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08002069 	.word	0x08002069
 8001d50:	08002069 	.word	0x08002069
 8001d54:	08002069 	.word	0x08002069
 8001d58:	08001d83 	.word	0x08001d83
 8001d5c:	08002069 	.word	0x08002069
 8001d60:	08002069 	.word	0x08002069
 8001d64:	08002069 	.word	0x08002069
 8001d68:	08001d89 	.word	0x08001d89
 8001d6c:	08002069 	.word	0x08002069
 8001d70:	08002069 	.word	0x08002069
 8001d74:	08002069 	.word	0x08002069
 8001d78:	08001f05 	.word	0x08001f05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001d7e:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001d80:	e175      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d82:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8001d84:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001d86:	e172      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d88:	4b8b      	ldr	r3, [pc, #556]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d90:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	4b89      	ldr	r3, [pc, #548]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d056      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	f04f 0400 	mov.w	r4, #0
 8001da8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	ea01 0103 	and.w	r1, r1, r3
 8001db4:	ea02 0204 	and.w	r2, r2, r4
 8001db8:	460b      	mov	r3, r1
 8001dba:	4614      	mov	r4, r2
 8001dbc:	0160      	lsls	r0, r4, #5
 8001dbe:	6678      	str	r0, [r7, #100]	; 0x64
 8001dc0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001dc2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001dc6:	6678      	str	r0, [r7, #100]	; 0x64
 8001dc8:	015b      	lsls	r3, r3, #5
 8001dca:	663b      	str	r3, [r7, #96]	; 0x60
 8001dcc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001dd0:	1a5b      	subs	r3, r3, r1
 8001dd2:	eb64 0402 	sbc.w	r4, r4, r2
 8001dd6:	01a0      	lsls	r0, r4, #6
 8001dd8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001dda:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ddc:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8001de0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001de2:	0198      	lsls	r0, r3, #6
 8001de4:	65b8      	str	r0, [r7, #88]	; 0x58
 8001de6:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001dea:	1aed      	subs	r5, r5, r3
 8001dec:	eb66 0604 	sbc.w	r6, r6, r4
 8001df0:	4633      	mov	r3, r6
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df8:	4628      	mov	r0, r5
 8001dfa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8001e00:	462b      	mov	r3, r5
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	653b      	str	r3, [r7, #80]	; 0x50
 8001e06:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	4626      	mov	r6, r4
 8001e0e:	186b      	adds	r3, r5, r1
 8001e10:	eb46 0402 	adc.w	r4, r6, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	4621      	mov	r1, r4
 8001e18:	460b      	mov	r3, r1
 8001e1a:	025b      	lsls	r3, r3, #9
 8001e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e20:	4602      	mov	r2, r0
 8001e22:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e28:	4603      	mov	r3, r0
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e2e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e38:	f04f 0400 	mov.w	r4, #0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4623      	mov	r3, r4
 8001e40:	f7fe fa36 	bl	80002b0 <__aeabi_uldivmod>
 8001e44:	4603      	mov	r3, r0
 8001e46:	460c      	mov	r4, r1
 8001e48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e4a:	e04d      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	f04f 0400 	mov.w	r4, #0
 8001e56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	ea01 0103 	and.w	r1, r1, r3
 8001e62:	ea02 0204 	and.w	r2, r2, r4
 8001e66:	460b      	mov	r3, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	0160      	lsls	r0, r4, #5
 8001e6c:	6478      	str	r0, [r7, #68]	; 0x44
 8001e6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e70:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001e74:	6478      	str	r0, [r7, #68]	; 0x44
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	643b      	str	r3, [r7, #64]	; 0x40
 8001e7a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001e7e:	1a5b      	subs	r3, r3, r1
 8001e80:	eb64 0402 	sbc.w	r4, r4, r2
 8001e84:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001e88:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001e8c:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001e90:	ebba 0a03 	subs.w	sl, sl, r3
 8001e94:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eac:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001eb0:	eb1a 0a01 	adds.w	sl, sl, r1
 8001eb4:	eb4b 0b02 	adc.w	fp, fp, r2
 8001eb8:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec6:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
 8001ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001ed0:	4650      	mov	r0, sl
 8001ed2:	4659      	mov	r1, fp
 8001ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed6:	f04f 0400 	mov.w	r4, #0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4623      	mov	r3, r4
 8001ede:	f7fe f9e7 	bl	80002b0 <__aeabi_uldivmod>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001ef8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001f02:	e0b4      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f0c:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d054      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	099b      	lsrs	r3, r3, #6
 8001f20:	f04f 0400 	mov.w	r4, #0
 8001f24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	ea01 0103 	and.w	r1, r1, r3
 8001f30:	ea02 0204 	and.w	r2, r2, r4
 8001f34:	460b      	mov	r3, r1
 8001f36:	4614      	mov	r4, r2
 8001f38:	0160      	lsls	r0, r4, #5
 8001f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f3e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001f42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f44:	015b      	lsls	r3, r3, #5
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f48:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001f4c:	1a5b      	subs	r3, r3, r1
 8001f4e:	eb64 0402 	sbc.w	r4, r4, r2
 8001f52:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001f56:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001f5a:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001f5e:	ebb8 0803 	subs.w	r8, r8, r3
 8001f62:	eb69 0904 	sbc.w	r9, r9, r4
 8001f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f7e:	eb18 0801 	adds.w	r8, r8, r1
 8001f82:	eb49 0902 	adc.w	r9, r9, r2
 8001f86:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001f9e:	4640      	mov	r0, r8
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa4:	f04f 0400 	mov.w	r4, #0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	f7fe f980 	bl	80002b0 <__aeabi_uldivmod>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fb6:	e04b      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x338>
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	00f42400 	.word	0x00f42400
 8001fc0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_GetSysClockFreq+0x364>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	f04f 0400 	mov.w	r4, #0
 8001fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	ea01 0103 	and.w	r1, r1, r3
 8001fda:	ea02 0204 	and.w	r2, r2, r4
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4614      	mov	r4, r2
 8001fe2:	0160      	lsls	r0, r4, #5
 8001fe4:	6178      	str	r0, [r7, #20]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001fec:	6178      	str	r0, [r7, #20]
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ff6:	1a5b      	subs	r3, r3, r1
 8001ff8:	eb64 0402 	sbc.w	r4, r4, r2
 8001ffc:	01a6      	lsls	r6, r4, #6
 8001ffe:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002002:	019d      	lsls	r5, r3, #6
 8002004:	1aed      	subs	r5, r5, r3
 8002006:	eb66 0604 	sbc.w	r6, r6, r4
 800200a:	00f3      	lsls	r3, r6, #3
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	00eb      	lsls	r3, r5, #3
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800201e:	186d      	adds	r5, r5, r1
 8002020:	eb46 0602 	adc.w	r6, r6, r2
 8002024:	02b3      	lsls	r3, r6, #10
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	02ab      	lsls	r3, r5, #10
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002038:	4628      	mov	r0, r5
 800203a:	4631      	mov	r1, r6
 800203c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203e:	f04f 0400 	mov.w	r4, #0
 8002042:	461a      	mov	r2, r3
 8002044:	4623      	mov	r3, r4
 8002046:	f7fe f933 	bl	80002b0 <__aeabi_uldivmod>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_GetSysClockFreq+0x364>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0f1b      	lsrs	r3, r3, #28
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 800205c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800205e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0x368>)
 800206a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8002070:	4618      	mov	r0, r3
 8002072:	3784      	adds	r7, #132	; 0x84
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400

08002084 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8083 	beq.w	80021a4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800209e:	4b95      	ldr	r3, [pc, #596]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d019      	beq.n	80020de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020aa:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020b6:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c2:	d00c      	beq.n	80020de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c4:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d112      	bne.n	80020f6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d0:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d05b      	beq.n	80021a2 <HAL_RCC_OscConfig+0x11e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d157      	bne.n	80021a2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e216      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x8a>
 8002100:	4a7c      	ldr	r2, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002102:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e01d      	b.n	800214a <HAL_RCC_OscConfig+0xc6>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0xae>
 8002118:	4a76      	ldr	r2, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4a73      	ldr	r2, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0xc6>
 8002132:	4a70      	ldr	r2, [pc, #448]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4a6d      	ldr	r2, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002140:	4b6c      	ldr	r3, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d013      	beq.n	800217a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe fa9b 	bl	800068c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215a:	f7fe fa97 	bl	800068c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	; 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1db      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216c:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0xd6>
 8002178:	e014      	b.n	80021a4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217a:	f7fe fa87 	bl	800068c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002182:	f7fe fa83 	bl	800068c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e1c7      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002194:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0xfe>
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d06f      	beq.n	8002290 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d017      	beq.n	80021ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021c8:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d11c      	bne.n	800221a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e0:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d116      	bne.n	800221a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ec:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x180>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e18f      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	493b      	ldr	r1, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002218:	e03a      	b.n	8002290 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d020      	beq.n	8002264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_RCC_OscConfig+0x274>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fa30 	bl	800068c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe fa2c 	bl	800068c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e170      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4929      	ldr	r1, [pc, #164]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
 8002262:	e015      	b.n	8002290 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_OscConfig+0x274>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe fa0f 	bl	800068c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe fa0b 	bl	800068c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e14f      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d037      	beq.n	800230c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d016      	beq.n	80022d2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x278>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe f9ef 	bl	800068c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b2:	f7fe f9eb 	bl	800068c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e12f      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x22e>
 80022d0:	e01c      	b.n	800230c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_OscConfig+0x278>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7fe f9d8 	bl	800068c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022de:	e00f      	b.n	8002300 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e0:	f7fe f9d4 	bl	800068c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d908      	bls.n	8002300 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e118      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	42470000 	.word	0x42470000
 80022fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	4b8a      	ldr	r3, [pc, #552]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e9      	bne.n	80022e0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8097 	beq.w	8002448 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4a7f      	ldr	r2, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002330:	4b7e      	ldr	r3, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b79      	ldr	r3, [pc, #484]	; (8002530 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4a76      	ldr	r2, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	4b75      	ldr	r3, [pc, #468]	; (8002530 <HAL_RCC_OscConfig+0x4ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe f993 	bl	800068c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe f98f 	bl	800068c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0d3      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b6c      	ldr	r3, [pc, #432]	; (8002530 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x31a>
 8002390:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002392:	4b66      	ldr	r3, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x354>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x33c>
 80023a6:	4a61      	ldr	r2, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023a8:	4b60      	ldr	r3, [pc, #384]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	4a5e      	ldr	r2, [pc, #376]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023b4:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0x354>
 80023c0:	4a5a      	ldr	r2, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023c2:	4b5a      	ldr	r3, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
 80023cc:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f023 0304 	bic.w	r3, r3, #4
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d015      	beq.n	800240c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe f954 	bl	800068c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7fe f950 	bl	800068c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e092      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ee      	beq.n	80023e8 <HAL_RCC_OscConfig+0x364>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe f93e 	bl	800068c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe f93a 	bl	800068c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e07c      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242a:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ee      	bne.n	8002414 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d068      	beq.n	8002522 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d060      	beq.n	800251e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d145      	bne.n	80024f0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x4b0>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe f90f 	bl	800068c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002472:	f7fe f90b 	bl	800068c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e04f      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002490:	4926      	ldr	r1, [pc, #152]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_RCC_OscConfig+0x4b0>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe f8e0 	bl	800068c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe f8dc 	bl	800068c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e020      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x44c>
 80024ee:	e018      	b.n	8002522 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x4b0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe f8c9 	bl	800068c <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe f8c5 	bl	800068c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e009      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_OscConfig+0x4a8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x47a>
 800251c:	e001      	b.n	8002522 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	40007000 	.word	0x40007000
 8002534:	42470060 	.word	0x42470060

08002538 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e083      	b.n	8002652 <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7f5b      	ldrb	r3, [r3, #29]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f002 fe20 	bl	80051a0 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	22ca      	movs	r2, #202	; 0xca
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2253      	movs	r2, #83	; 0x53
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fc54 	bl	8002e24 <RTC_EnterInitMode>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	22ff      	movs	r2, #255	; 0xff
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2204      	movs	r2, #4
 800258e:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e05e      	b.n	8002652 <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	6891      	ldr	r1, [r2, #8]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6850      	ldr	r0, [r2, #4]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6912      	ldr	r2, [r2, #16]
 80025ba:	4310      	orrs	r0, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6952      	ldr	r2, [r2, #20]
 80025c0:	4302      	orrs	r2, r0
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68d2      	ldr	r2, [r2, #12]
 80025ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	6911      	ldr	r1, [r2, #16]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6892      	ldr	r2, [r2, #8]
 80025de:	0412      	lsls	r2, r2, #16
 80025e0:	430a      	orrs	r2, r1
 80025e2:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	68d2      	ldr	r2, [r2, #12]
 80025ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10e      	bne.n	8002620 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fbe6 	bl	8002dd4 <HAL_RTC_WaitForSynchro>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	22ff      	movs	r2, #255	; 0xff
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2204      	movs	r2, #4
 800261a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e018      	b.n	8002652 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800262a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6992      	ldr	r2, [r2, #24]
 800263e:	430a      	orrs	r2, r1
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	22ff      	movs	r2, #255	; 0xff
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8002650:	2300      	movs	r3, #0
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800265a:	b590      	push	{r4, r7, lr}
 800265c:	b087      	sub	sp, #28
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	7f1b      	ldrb	r3, [r3, #28]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_RTC_SetTime+0x1c>
 8002672:	2302      	movs	r3, #2
 8002674:	e0b2      	b.n	80027dc <HAL_RTC_SetTime+0x182>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2202      	movs	r2, #2
 8002680:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d126      	bne.n	80026d6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fbeb 	bl	8002e7c <RTC_ByteToBcd2>
 80026a6:	4603      	mov	r3, r0
 80026a8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fbe4 	bl	8002e7c <RTC_ByteToBcd2>
 80026b4:	4603      	mov	r3, r0
 80026b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80026b8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	789b      	ldrb	r3, [r3, #2]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fbdc 	bl	8002e7c <RTC_ByteToBcd2>
 80026c4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80026c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e020      	b.n	8002718 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fbe5 	bl	8002eb8 <RTC_Bcd2ToByte>
 80026ee:	4603      	mov	r3, r0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e002      	b.n	80026fa <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002706:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800270c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	78db      	ldrb	r3, [r3, #3]
 8002712:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	22ca      	movs	r2, #202	; 0xca
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2253      	movs	r2, #83	; 0x53
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fb7b 	bl	8002e24 <RTC_EnterInitMode>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	22ff      	movs	r2, #255	; 0xff
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2204      	movs	r2, #4
 8002740:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e047      	b.n	80027dc <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002756:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800275a:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	6892      	ldr	r2, [r2, #8]
 8002766:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800276a:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	6891      	ldr	r1, [r2, #8]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	68d0      	ldr	r0, [r2, #12]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	6912      	ldr	r2, [r2, #16]
 800277e:	4302      	orrs	r2, r0
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	68d2      	ldr	r2, [r2, #12]
 800278e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002792:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d111      	bne.n	80027c6 <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fb16 	bl	8002dd4 <HAL_RTC_WaitForSynchro>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	22ff      	movs	r2, #255	; 0xff
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2204      	movs	r2, #4
 80027ba:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00a      	b.n	80027dc <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 80027da:	2300      	movs	r3, #0
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd90      	pop	{r4, r7, pc}

080027e4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002816:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11a      	bne.n	8002896 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fb27 	bl	8002eb8 <RTC_Bcd2ToByte>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fb1e 	bl	8002eb8 <RTC_Bcd2ToByte>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	789b      	ldrb	r3, [r3, #2]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fb15 	bl	8002eb8 <RTC_Bcd2ToByte>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	7f1b      	ldrb	r3, [r3, #28]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_RTC_SetDate+0x1c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e094      	b.n	80029e6 <HAL_RTC_SetDate+0x146>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10e      	bne.n	80028ec <HAL_RTC_SetDate+0x4c>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	f023 0310 	bic.w	r3, r3, #16
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	330a      	adds	r3, #10
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11c      	bne.n	800292c <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	78db      	ldrb	r3, [r3, #3]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fac0 	bl	8002e7c <RTC_ByteToBcd2>
 80028fc:	4603      	mov	r3, r0
 80028fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fab9 	bl	8002e7c <RTC_ByteToBcd2>
 800290a:	4603      	mov	r3, r0
 800290c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800290e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	789b      	ldrb	r3, [r3, #2]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fab1 	bl	8002e7c <RTC_ByteToBcd2>
 800291a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800291c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e00e      	b.n	800294a <HAL_RTC_SetDate+0xaa>
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(datetmpreg));
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	78db      	ldrb	r3, [r3, #3]
 8002930:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002938:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800293e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	22ca      	movs	r2, #202	; 0xca
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2253      	movs	r2, #83	; 0x53
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fa62 	bl	8002e24 <RTC_EnterInitMode>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2204      	movs	r2, #4
 8002972:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e033      	b.n	80029e6 <HAL_RTC_SetDate+0x146>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002988:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800298c:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	68d2      	ldr	r2, [r2, #12]
 8002998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299c:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fa11 	bl	8002dd4 <HAL_RTC_WaitForSynchro>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_RTC_SetDate+0x130>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2204      	movs	r2, #4
 80029c4:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e00a      	b.n	80029e6 <HAL_RTC_SetDate+0x146>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 80029e4:	2300      	movs	r3, #0
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}

080029ee <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
          
  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	0b5b      	lsrs	r3, r3, #13
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11a      	bne.n	8002a82 <HAL_RTC_GetDate+0x94>
  {    
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	78db      	ldrb	r3, [r3, #3]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fa31 	bl	8002eb8 <RTC_Bcd2ToByte>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fa28 	bl	8002eb8 <RTC_Bcd2ToByte>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	789b      	ldrb	r3, [r3, #2]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fa1f 	bl	8002eb8 <RTC_Bcd2ToByte>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002aa0:	4ba1      	ldr	r3, [pc, #644]	; (8002d28 <HAL_RTC_SetAlarm_IT+0x29c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4aa1      	ldr	r2, [pc, #644]	; (8002d2c <HAL_RTC_SetAlarm_IT+0x2a0>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0adb      	lsrs	r3, r3, #11
 8002aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	7f1b      	ldrb	r3, [r3, #28]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_RTC_SetAlarm_IT+0x36>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e12e      	b.n	8002d20 <HAL_RTC_SetAlarm_IT+0x294>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2202      	movs	r2, #2
 8002acc:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d137      	bne.n	8002b44 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 f9c5 	bl	8002e7c <RTC_ByteToBcd2>
 8002af2:	4603      	mov	r3, r0
 8002af4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f9be 	bl	8002e7c <RTC_ByteToBcd2>
 8002b00:	4603      	mov	r3, r0
 8002b02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b04:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	789b      	ldrb	r3, [r3, #2]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f9b6 	bl	8002e7c <RTC_ByteToBcd2>
 8002b10:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	78db      	ldrb	r3, [r3, #3]
 8002b1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002b1c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f9a8 	bl	8002e7c <RTC_ByteToBcd2>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e040      	b.n	8002bc6 <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f9ae 	bl	8002eb8 <RTC_Bcd2ToByte>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	e002      	b.n	8002b68 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2200      	movs	r2, #0
 8002b66:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f99e 	bl	8002eb8 <RTC_Bcd2ToByte>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	e007      	b.n	8002b92 <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f995 	bl	8002eb8 <RTC_Bcd2ToByte>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b9e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ba4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	78db      	ldrb	r3, [r3, #3]
 8002baa:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002bac:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002bb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002bbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	22ca      	movs	r2, #202	; 0xca
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2253      	movs	r2, #83	; 0x53
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bea:	d141      	bne.n	8002c70 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bfa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	68d2      	ldr	r2, [r2, #12]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002c0c:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	1e5a      	subs	r2, r3, #1
 8002c12:	617a      	str	r2, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	22ff      	movs	r2, #255	; 0xff
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2203      	movs	r2, #3
 8002c24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e077      	b.n	8002d20 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0e7      	beq.n	8002c0e <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	6892      	ldr	r2, [r2, #8]
 8002c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	e040      	b.n	8002cf2 <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c7e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002c90:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1e5a      	subs	r2, r3, #1
 8002c96:	617a      	str	r2, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e035      	b.n	8002d20 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0e7      	beq.n	8002c92 <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	6892      	ldr	r2, [r2, #8]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	6892      	ldr	r2, [r2, #8]
 8002cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002cfe:	4a0c      	ldr	r2, [pc, #48]	; (8002d30 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	22ff      	movs	r2, #255	; 0xff
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3724      	adds	r7, #36	; 0x24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	2000001c 	.word	0x2000001c
 8002d2c:	10624dd3 	.word	0x10624dd3
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d012      	beq.n	8002d70 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f831 	bl	8002dc0 <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	68d2      	ldr	r2, [r2, #12]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002d6e:	60da      	str	r2, [r3, #12]
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d012      	beq.n	8002da4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f8b1 	bl	8002ef4 <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	68d2      	ldr	r2, [r2, #12]
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002da2:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RTC_AlarmIRQHandler+0x88>)
 8002da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002daa:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	775a      	strb	r2, [r3, #29]
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002df0:	f7fd fc4c 	bl	800068c <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002df6:	e009      	b.n	8002e0c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002df8:	f7fd fc48 	bl	800068c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e06:	d901      	bls.n	8002e0c <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e007      	b.n	8002e1c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0ee      	beq.n	8002df8 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d119      	bne.n	8002e72 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295
 8002e46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fd fc20 	bl	800068c <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e4e:	e009      	b.n	8002e64 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e50:	f7fd fc1c 	bl	800068c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e5e:	d901      	bls.n	8002e64 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e007      	b.n	8002e74 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0ee      	beq.n	8002e50 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 8002e8a:	e005      	b.n	8002e98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	3b0a      	subs	r3, #10
 8002e96:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	d8f6      	bhi.n	8002e8c <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	b2db      	uxtb	r3, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b2db      	uxtb	r3, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e01d      	b.n	8002f56 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f002 f952 	bl	80051d8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 f904 	bl	8003154 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}  
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	6839      	ldr	r1, [r7, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fa10 	bl	8003398 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_TIM_PWM_Start+0x60>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_TIM_PWM_Start+0x2c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_TIM_PWM_Start+0x64>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIM_PWM_Start+0x30>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_TIM_PWM_Start+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
} 
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40010400 	.word	0x40010400

08002fc8 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0b4      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	f200 809f 	bhi.w	8003138 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003035 	.word	0x08003035
 8003004:	08003139 	.word	0x08003139
 8003008:	08003139 	.word	0x08003139
 800300c:	08003139 	.word	0x08003139
 8003010:	08003075 	.word	0x08003075
 8003014:	08003139 	.word	0x08003139
 8003018:	08003139 	.word	0x08003139
 800301c:	08003139 	.word	0x08003139
 8003020:	080030b7 	.word	0x080030b7
 8003024:	08003139 	.word	0x08003139
 8003028:	08003139 	.word	0x08003139
 800302c:	08003139 	.word	0x08003139
 8003030:	080030f7 	.word	0x080030f7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f9d0 	bl	80033e0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	6992      	ldr	r2, [r2, #24]
 800304a:	f042 0208 	orr.w	r2, r2, #8
 800304e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	6992      	ldr	r2, [r2, #24]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	6991      	ldr	r1, [r2, #24]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	6912      	ldr	r2, [r2, #16]
 800306e:	430a      	orrs	r2, r1
 8003070:	619a      	str	r2, [r3, #24]
    }
    break;
 8003072:	e062      	b.n	800313a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f914 	bl	80032a8 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	6992      	ldr	r2, [r2, #24]
 800308a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	6992      	ldr	r2, [r2, #24]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	6991      	ldr	r1, [r2, #24]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	6912      	ldr	r2, [r2, #16]
 80030ae:	0212      	lsls	r2, r2, #8
 80030b0:	430a      	orrs	r2, r1
 80030b2:	619a      	str	r2, [r3, #24]
    }
    break;
 80030b4:	e041      	b.n	800313a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fa03 	bl	80034c8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	69d2      	ldr	r2, [r2, #28]
 80030cc:	f042 0208 	orr.w	r2, r2, #8
 80030d0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	69d2      	ldr	r2, [r2, #28]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	69d1      	ldr	r1, [r2, #28]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	6912      	ldr	r2, [r2, #16]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
    }
    break;
 80030f4:	e021      	b.n	800313a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fa5b 	bl	80035b8 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	69d2      	ldr	r2, [r2, #28]
 800310c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003110:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	69d2      	ldr	r2, [r2, #28]
 800311c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	69d1      	ldr	r1, [r2, #28]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	6912      	ldr	r2, [r2, #16]
 8003130:	0212      	lsls	r2, r2, #8
 8003132:	430a      	orrs	r2, r1
 8003134:	61da      	str	r2, [r3, #28]
    }
    break;
 8003136:	e000      	b.n	800313a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8003138:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a44      	ldr	r2, [pc, #272]	; (800327c <TIM_Base_SetConfig+0x128>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <TIM_Base_SetConfig+0x44>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003176:	d00f      	beq.n	8003198 <TIM_Base_SetConfig+0x44>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a41      	ldr	r2, [pc, #260]	; (8003280 <TIM_Base_SetConfig+0x12c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0x44>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a40      	ldr	r2, [pc, #256]	; (8003284 <TIM_Base_SetConfig+0x130>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x44>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a3f      	ldr	r2, [pc, #252]	; (8003288 <TIM_Base_SetConfig+0x134>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x44>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3e      	ldr	r2, [pc, #248]	; (800328c <TIM_Base_SetConfig+0x138>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <TIM_Base_SetConfig+0x48>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <TIM_Base_SetConfig+0x4a>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a31      	ldr	r2, [pc, #196]	; (800327c <TIM_Base_SetConfig+0x128>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02b      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c2:	d027      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a2e      	ldr	r2, [pc, #184]	; (8003280 <TIM_Base_SetConfig+0x12c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d023      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <TIM_Base_SetConfig+0x130>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d01f      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <TIM_Base_SetConfig+0x134>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01b      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a2b      	ldr	r2, [pc, #172]	; (800328c <TIM_Base_SetConfig+0x138>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d017      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <TIM_Base_SetConfig+0x13c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a29      	ldr	r2, [pc, #164]	; (8003294 <TIM_Base_SetConfig+0x140>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00f      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a28      	ldr	r2, [pc, #160]	; (8003298 <TIM_Base_SetConfig+0x144>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00b      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a27      	ldr	r2, [pc, #156]	; (800329c <TIM_Base_SetConfig+0x148>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <TIM_Base_SetConfig+0x14c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0xc0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <TIM_Base_SetConfig+0x150>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <TIM_Base_SetConfig+0xc4>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <TIM_Base_SetConfig+0xc6>
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a0c      	ldr	r2, [pc, #48]	; (800327c <TIM_Base_SetConfig+0x128>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <TIM_Base_SetConfig+0x102>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a0e      	ldr	r2, [pc, #56]	; (800328c <TIM_Base_SetConfig+0x138>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <TIM_Base_SetConfig+0x106>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <TIM_Base_SetConfig+0x108>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	615a      	str	r2, [r3, #20]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40010400 	.word	0x40010400
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800
 800329c:	40001800 	.word	0x40001800
 80032a0:	40001c00 	.word	0x40001c00
 80032a4:	40002000 	.word	0x40002000

080032a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f023 0210 	bic.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ea:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0320 	bic.w	r3, r3, #32
 80032fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a20      	ldr	r2, [pc, #128]	; (8003390 <TIM_OC2_SetConfig+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_OC2_SetConfig+0x74>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <TIM_OC2_SetConfig+0xec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <TIM_OC2_SetConfig+0x78>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <TIM_OC2_SetConfig+0x7a>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d021      	beq.n	800336a <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003340:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	621a      	str	r2, [r3, #32]
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40010000 	.word	0x40010000
 8003394:	40010400 	.word	0x40010400

08003398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80033a8:	2201      	movs	r2, #1
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	401a      	ands	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0303 	bic.w	r3, r3, #3
 8003422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 0302 	bic.w	r3, r3, #2
 8003434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <TIM_OC1_SetConfig+0xe0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_OC1_SetConfig+0x70>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <TIM_OC1_SetConfig+0xe4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <TIM_OC1_SetConfig+0x74>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <TIM_OC1_SetConfig+0x76>
 8003454:	2300      	movs	r3, #0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01e      	beq.n	8003498 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 0308 	bic.w	r3, r3, #8
 8003460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0304 	bic.w	r3, r3, #4
 8003472:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	621a      	str	r2, [r3, #32]
} 
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40010400 	.word	0x40010400

080034c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800351c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <TIM_OC3_SetConfig+0xe8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_OC3_SetConfig+0x72>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <TIM_OC3_SetConfig+0xec>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <TIM_OC3_SetConfig+0x76>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <TIM_OC3_SetConfig+0x78>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d021      	beq.n	8003588 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800354a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800355e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40010000 	.word	0x40010000
 80035b4:	40010400 	.word	0x40010400

080035b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fa:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a14      	ldr	r2, [pc, #80]	; (8003670 <TIM_OC4_SetConfig+0xb8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_OC4_SetConfig+0x74>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a13      	ldr	r2, [pc, #76]	; (8003674 <TIM_OC4_SetConfig+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <TIM_OC4_SetConfig+0x78>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <TIM_OC4_SetConfig+0x7a>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	019b      	lsls	r3, r3, #6
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40010000 	.word	0x40010000
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800368c:	2302      	movs	r3, #2
 800368e:	e032      	b.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	6852      	ldr	r2, [r2, #4]
 80036aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036ae:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	6851      	ldr	r1, [r2, #4]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	6892      	ldr	r2, [r2, #8]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	6891      	ldr	r1, [r2, #8]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
} 
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800371a:	2302      	movs	r3, #2
 800371c:	e044      	b.n	80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e03f      	b.n	8003846 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 fe0c 	bl	80053f8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	; 0x24
 80037e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f829 	bl	8003850 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	6912      	ldr	r2, [r2, #16]
 8003808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6952      	ldr	r2, [r2, #20]
 8003818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	68d2      	ldr	r2, [r2, #12]
 8003828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800382c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800386a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800388c:	f023 030c 	bic.w	r3, r3, #12
 8003890:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e0:	f040 80e4 	bne.w	8003aac <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4aab      	ldr	r2, [pc, #684]	; (8003b98 <UART_SetConfig+0x348>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <UART_SetConfig+0xa8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4aaa      	ldr	r2, [pc, #680]	; (8003b9c <UART_SetConfig+0x34c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d16c      	bne.n	80039d2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681c      	ldr	r4, [r3, #0]
 80038fc:	f7fd fece 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003900:	4602      	mov	r2, r0
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009a      	lsls	r2, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	4aa2      	ldr	r2, [pc, #648]	; (8003ba0 <UART_SetConfig+0x350>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	011d      	lsls	r5, r3, #4
 8003920:	f7fd febc 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003924:	4602      	mov	r2, r0
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	009a      	lsls	r2, r3, #2
 800392e:	441a      	add	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	fbb2 f6f3 	udiv	r6, r2, r3
 800393a:	f7fd feaf 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 800393e:	4602      	mov	r2, r0
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	4a92      	ldr	r2, [pc, #584]	; (8003ba0 <UART_SetConfig+0x350>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2264      	movs	r2, #100	; 0x64
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	1af3      	subs	r3, r6, r3
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	3332      	adds	r3, #50	; 0x32
 8003968:	4a8d      	ldr	r2, [pc, #564]	; (8003ba0 <UART_SetConfig+0x350>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003976:	441d      	add	r5, r3
 8003978:	f7fd fe90 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 800397c:	4602      	mov	r2, r0
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009a      	lsls	r2, r3, #2
 8003986:	441a      	add	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003992:	f7fd fe83 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003996:	4602      	mov	r2, r0
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	4a7c      	ldr	r2, [pc, #496]	; (8003ba0 <UART_SetConfig+0x350>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2264      	movs	r2, #100	; 0x64
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	1af3      	subs	r3, r6, r3
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	3332      	adds	r3, #50	; 0x32
 80039c0:	4a77      	ldr	r2, [pc, #476]	; (8003ba0 <UART_SetConfig+0x350>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	442b      	add	r3, r5
 80039ce:	60a3      	str	r3, [r4, #8]
 80039d0:	e154      	b.n	8003c7c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681c      	ldr	r4, [r3, #0]
 80039d6:	f7fd fe4d 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009a      	lsls	r2, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	4a6b      	ldr	r2, [pc, #428]	; (8003ba0 <UART_SetConfig+0x350>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	011d      	lsls	r5, r3, #4
 80039fa:	f7fd fe3b 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009a      	lsls	r2, r3, #2
 8003a08:	441a      	add	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a14:	f7fd fe2e 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009a      	lsls	r2, r3, #2
 8003a22:	441a      	add	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ba0 <UART_SetConfig+0x350>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	2264      	movs	r2, #100	; 0x64
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	1af3      	subs	r3, r6, r3
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	3332      	adds	r3, #50	; 0x32
 8003a42:	4a57      	ldr	r2, [pc, #348]	; (8003ba0 <UART_SetConfig+0x350>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a50:	441d      	add	r5, r3
 8003a52:	f7fd fe0f 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003a56:	4602      	mov	r2, r0
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009a      	lsls	r2, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a6c:	f7fd fe02 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009a      	lsls	r2, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	4a46      	ldr	r2, [pc, #280]	; (8003ba0 <UART_SetConfig+0x350>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2264      	movs	r2, #100	; 0x64
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	1af3      	subs	r3, r6, r3
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4a41      	ldr	r2, [pc, #260]	; (8003ba0 <UART_SetConfig+0x350>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	442b      	add	r3, r5
 8003aa8:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003aaa:	e0e7      	b.n	8003c7c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a39      	ldr	r2, [pc, #228]	; (8003b98 <UART_SetConfig+0x348>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <UART_SetConfig+0x270>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a38      	ldr	r2, [pc, #224]	; (8003b9c <UART_SetConfig+0x34c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d171      	bne.n	8003ba4 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681c      	ldr	r4, [r3, #0]
 8003ac4:	f7fd fdea 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <UART_SetConfig+0x350>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	011d      	lsls	r5, r3, #4
 8003ae8:	f7fd fdd8 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b02:	f7fd fdcb 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <UART_SetConfig+0x350>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	; 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1af3      	subs	r3, r6, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <UART_SetConfig+0x350>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3c:	441d      	add	r5, r3
 8003b3e:	f7fd fdad 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b58:	f7fd fda0 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009a      	lsls	r2, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <UART_SetConfig+0x350>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2264      	movs	r2, #100	; 0x64
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	1af3      	subs	r3, r6, r3
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <UART_SetConfig+0x350>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	442b      	add	r3, r5
 8003b94:	60a3      	str	r3, [r4, #8]
 8003b96:	e071      	b.n	8003c7c <UART_SetConfig+0x42c>
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681c      	ldr	r4, [r3, #0]
 8003ba8:	f7fd fd64 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009a      	lsls	r2, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	4a30      	ldr	r2, [pc, #192]	; (8003c84 <UART_SetConfig+0x434>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	011d      	lsls	r5, r3, #4
 8003bcc:	f7fd fd52 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	fbb2 f6f3 	udiv	r6, r2, r3
 8003be6:	f7fd fd45 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <UART_SetConfig+0x434>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2264      	movs	r2, #100	; 0x64
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	1af3      	subs	r3, r6, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <UART_SetConfig+0x434>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c20:	441d      	add	r5, r3
 8003c22:	f7fd fd27 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003c26:	4602      	mov	r2, r0
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009a      	lsls	r2, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c3c:	f7fd fd1a 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <UART_SetConfig+0x434>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2264      	movs	r2, #100	; 0x64
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	1af3      	subs	r3, r6, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a06      	ldr	r2, [pc, #24]	; (8003c84 <UART_SetConfig+0x434>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	442b      	add	r3, r5
 8003c78:	60a3      	str	r3, [r4, #8]
}
 8003c7a:	e7ff      	b.n	8003c7c <UART_SetConfig+0x42c>
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c84:	51eb851f 	.word	0x51eb851f

08003c88 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // I2C Module adress

void lcd_send_cmd (char cmd)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f023 030f 	bic.w	r3, r3, #15
 8003c98:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	f043 030c 	orr.w	r3, r3, #12
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	f043 0308 	orr.w	r3, r3, #8
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	f043 030c 	orr.w	r3, r3, #12
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003cbe:	7bbb      	ldrb	r3, [r7, #14]
 8003cc0:	f043 0308 	orr.w	r3, r3, #8
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cc8:	f107 0208 	add.w	r2, r7, #8
 8003ccc:	2364      	movs	r3, #100	; 0x64
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	214e      	movs	r1, #78	; 0x4e
 8003cd4:	4803      	ldr	r0, [pc, #12]	; (8003ce4 <lcd_send_cmd+0x5c>)
 8003cd6:	f7fd f8ed 	bl	8000eb4 <HAL_I2C_Master_Transmit>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000160 	.word	0x20000160

08003ce8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f023 030f 	bic.w	r3, r3, #15
 8003cf8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	f043 030d 	orr.w	r3, r3, #13
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	f043 0309 	orr.w	r3, r3, #9
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d14:	7bbb      	ldrb	r3, [r7, #14]
 8003d16:	f043 030d 	orr.w	r3, r3, #13
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d1e:	7bbb      	ldrb	r3, [r7, #14]
 8003d20:	f043 0309 	orr.w	r3, r3, #9
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d28:	f107 0208 	add.w	r2, r7, #8
 8003d2c:	2364      	movs	r3, #100	; 0x64
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2304      	movs	r3, #4
 8003d32:	214e      	movs	r1, #78	; 0x4e
 8003d34:	4803      	ldr	r0, [pc, #12]	; (8003d44 <lcd_send_data+0x5c>)
 8003d36:	f7fd f8bd 	bl	8000eb4 <HAL_I2C_Master_Transmit>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000160 	.word	0x20000160

08003d48 <lcd_init>:


void lcd_init (void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8003d52:	2064      	movs	r0, #100	; 0x64
 8003d54:	f7fc fca6 	bl	80006a4 <HAL_Delay>
	for(i=0;i<3;i++)  //sending 3 times: select 4-bit mode
 8003d58:	2300      	movs	r3, #0
 8003d5a:	71fb      	strb	r3, [r7, #7]
 8003d5c:	e008      	b.n	8003d70 <lcd_init+0x28>
	{
		lcd_send_cmd(0x03);
 8003d5e:	2003      	movs	r0, #3
 8003d60:	f7ff ff92 	bl	8003c88 <lcd_send_cmd>
		HAL_Delay(45);
 8003d64:	202d      	movs	r0, #45	; 0x2d
 8003d66:	f7fc fc9d 	bl	80006a4 <HAL_Delay>
	for(i=0;i<3;i++)  //sending 3 times: select 4-bit mode
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	71fb      	strb	r3, [r7, #7]
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d9f3      	bls.n	8003d5e <lcd_init+0x16>
	}
	lcd_send_cmd (0x02);
 8003d76:	2002      	movs	r0, #2
 8003d78:	f7ff ff86 	bl	8003c88 <lcd_send_cmd>
	HAL_Delay(100);
 8003d7c:	2064      	movs	r0, #100	; 0x64
 8003d7e:	f7fc fc91 	bl	80006a4 <HAL_Delay>
	lcd_send_cmd (0x28);
 8003d82:	2028      	movs	r0, #40	; 0x28
 8003d84:	f7ff ff80 	bl	8003c88 <lcd_send_cmd>
	HAL_Delay(1);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f7fc fc8b 	bl	80006a4 <HAL_Delay>
	lcd_send_cmd (0x0c);
 8003d8e:	200c      	movs	r0, #12
 8003d90:	f7ff ff7a 	bl	8003c88 <lcd_send_cmd>
	HAL_Delay(1);
 8003d94:	2001      	movs	r0, #1
 8003d96:	f7fc fc85 	bl	80006a4 <HAL_Delay>
	lcd_send_cmd (0x80);
 8003d9a:	2080      	movs	r0, #128	; 0x80
 8003d9c:	f7ff ff74 	bl	8003c88 <lcd_send_cmd>
	HAL_Delay(1);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7fc fc7f 	bl	80006a4 <HAL_Delay>
	lcd_send_cmd (0x01);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f7ff ff6e 	bl	8003c88 <lcd_send_cmd>
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003dbc:	e006      	b.n	8003dcc <lcd_send_string+0x18>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff8e 	bl	8003ce8 <lcd_send_data>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f4      	bne.n	8003dbe <lcd_send_string+0xa>
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <cursor_jumpto_r_c>:

// Spring mit Cursor zur Reihe und Spalte
void cursor_jumpto_r_c (uint8_t row, uint8_t column)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	460a      	mov	r2, r1
 8003de6:	71fb      	strb	r3, [r7, #7]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71bb      	strb	r3, [r7, #6]
	uint8_t mycmd = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
	switch(row){
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d817      	bhi.n	8003e28 <cursor_jumpto_r_c+0x4c>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <cursor_jumpto_r_c+0x24>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e17 	.word	0x08003e17
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e23 	.word	0x08003e23
		case 1: mycmd = 0x80;break;		// MSB=1, Bits 6-0 = AC: 1-000 0000
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e008      	b.n	8003e28 <cursor_jumpto_r_c+0x4c>

		case 2: mycmd = 0xC0;break;		// 1-001 0100
 8003e16:	23c0      	movs	r3, #192	; 0xc0
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	e005      	b.n	8003e28 <cursor_jumpto_r_c+0x4c>

		case 3: mycmd = 0x94;break;		// 1-010 1000
 8003e1c:	2394      	movs	r3, #148	; 0x94
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e002      	b.n	8003e28 <cursor_jumpto_r_c+0x4c>

		case 4: mycmd = 0xD4;break;		// 1-011 1100
 8003e22:	23d4      	movs	r3, #212	; 0xd4
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	bf00      	nop
	}
	mycmd += (column-1);
 8003e28:	79ba      	ldrb	r2, [r7, #6]
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd (mycmd);
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ff26 	bl	8003c88 <lcd_send_cmd>
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <cursor_shift_left>:

// Shift cursor einmal nach links
void cursor_shift_left(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x10);
 8003e48:	2010      	movs	r0, #16
 8003e4a:	f7ff ff1d 	bl	8003c88 <lcd_send_cmd>
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <cursor_shift_left_ntime>:
	lcd_send_cmd (0x14);
}

//Shift cursor n-mal nach links
void cursor_shift_left_ntime(uint8_t number)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < number ; i++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e004      	b.n	8003e6c <cursor_shift_left_ntime+0x1a>
		{
			cursor_shift_left();
 8003e62:	f7ff ffef 	bl	8003e44 <cursor_shift_left>
	for(int i = 0 ; i < number ; i++)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	79fa      	ldrb	r2, [r7, #7]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	dcf6      	bgt.n	8003e62 <cursor_shift_left_ntime+0x10>
		}
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <delete_some_chars>:
	lcd_send_data (delete_me);			// Ueberschreibe mit leerem Char
	cursor_shift_left();
}

void delete_some_chars (uint8_t number)
{
 8003e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	71f8      	strb	r0, [r7, #7]
 8003e86:	4668      	mov	r0, sp
 8003e88:	4680      	mov	r8, r0
	char delete_me[number];
 8003e8a:	79f8      	ldrb	r0, [r7, #7]
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	3d01      	subs	r5, #1
 8003e90:	613d      	str	r5, [r7, #16]
 8003e92:	b2c5      	uxtb	r5, r0
 8003e94:	f04f 0600 	mov.w	r6, #0
 8003e98:	00f2      	lsls	r2, r6, #3
 8003e9a:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8003e9e:	00e9      	lsls	r1, r5, #3
 8003ea0:	b2c1      	uxtb	r1, r0
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	00d4      	lsls	r4, r2, #3
 8003ea8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003eac:	00cb      	lsls	r3, r1, #3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	3307      	adds	r3, #7
 8003eb2:	08db      	lsrs	r3, r3, #3
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	ebad 0d03 	sub.w	sp, sp, r3
 8003eba:	466b      	mov	r3, sp
 8003ebc:	3300      	adds	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

	for (int i=0; i<number; i++){
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e007      	b.n	8003ed6 <delete_some_chars+0x5a>
		delete_me[i]=' ';
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	2220      	movs	r2, #32
 8003ece:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<number; i++){
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	79fa      	ldrb	r2, [r7, #7]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dcf3      	bgt.n	8003ec6 <delete_some_chars+0x4a>
	}
	lcd_send_string (&delete_me);		// Ueberschreibe mit leerem String
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ff67 	bl	8003db4 <lcd_send_string>
	cursor_shift_left_ntime(number);	// laufe mit dem Cursor zurueck
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ffb2 	bl	8003e52 <cursor_shift_left_ntime>
 8003eee:	46c5      	mov	sp, r8
}
 8003ef0:	bf00      	nop
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003efc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003f02:	f7fc fb5d 	bl	80005c0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003f06:	f000 fbf9 	bl	80046fc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003f0a:	f001 f80f 	bl	8004f2c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003f0e:	f000 ffe3 	bl	8004ed8 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8003f12:	f000 fc83 	bl	800481c <MX_I2C1_Init>
	MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 8003f16:	2000      	movs	r0, #0
 8003f18:	f000 fef6 	bl	8004d08 <MX_TIM4_Init>
	MX_TIM3_Init(0);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f000 fe95 	bl	8004c4c <MX_TIM3_Init>
	MX_TIM8_Init(0);
 8003f22:	2000      	movs	r0, #0
 8003f24:	f000 ff4e 	bl	8004dc4 <MX_TIM8_Init>
	MX_TIM2_Init(0);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f000 fe33 	bl	8004b94 <MX_TIM2_Init>
	MX_RTC_Init();
 8003f2e:	f000 fda5 	bl	8004a7c <MX_RTC_Init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8003f32:	2201      	movs	r2, #1
 8003f34:	2120      	movs	r1, #32
 8003f36:	4877      	ldr	r0, [pc, #476]	; (8004114 <main+0x218>)
 8003f38:	f7fc fe8c 	bl	8000c54 <HAL_GPIO_WritePin>

	lcd_init();
 8003f3c:	f7ff ff04 	bl	8003d48 <lcd_init>

	menu_print_cursor(1);
 8003f40:	2001      	movs	r0, #1
 8003f42:	f000 fc99 	bl	8004878 <menu_print_cursor>

	menu_print_text();
 8003f46:	f000 fd25 	bl	8004994 <menu_print_text>

	GPIO_PinState button_pressed = GPIO_PIN_RESET;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	71fb      	strb	r3, [r7, #7]


	//Set time, data and alarm
	//1) Set time
	myTime.Hours = 17;
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <main+0x21c>)
 8003f50:	2211      	movs	r2, #17
 8003f52:	701a      	strb	r2, [r3, #0]
	myTime.Minutes = 20;
 8003f54:	4b70      	ldr	r3, [pc, #448]	; (8004118 <main+0x21c>)
 8003f56:	2214      	movs	r2, #20
 8003f58:	705a      	strb	r2, [r3, #1]
	myTime.Seconds = 45;
 8003f5a:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <main+0x21c>)
 8003f5c:	222d      	movs	r2, #45	; 0x2d
 8003f5e:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8003f60:	2200      	movs	r2, #0
 8003f62:	496d      	ldr	r1, [pc, #436]	; (8004118 <main+0x21c>)
 8003f64:	486d      	ldr	r0, [pc, #436]	; (800411c <main+0x220>)
 8003f66:	f7fe fb78 	bl	800265a <HAL_RTC_SetTime>
	//2) Set date
	myDate.Date = 6;
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <main+0x224>)
 8003f6c:	2206      	movs	r2, #6
 8003f6e:	709a      	strb	r2, [r3, #2]
	myDate.Month = RTC_MONTH_DECEMBER;
 8003f70:	4b6b      	ldr	r3, [pc, #428]	; (8004120 <main+0x224>)
 8003f72:	2212      	movs	r2, #18
 8003f74:	705a      	strb	r2, [r3, #1]
	myDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8003f76:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <main+0x224>)
 8003f78:	2204      	movs	r2, #4
 8003f7a:	701a      	strb	r2, [r3, #0]
	myDate.Year = 18;
 8003f7c:	4b68      	ldr	r3, [pc, #416]	; (8004120 <main+0x224>)
 8003f7e:	2212      	movs	r2, #18
 8003f80:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8003f82:	2200      	movs	r2, #0
 8003f84:	4966      	ldr	r1, [pc, #408]	; (8004120 <main+0x224>)
 8003f86:	4865      	ldr	r0, [pc, #404]	; (800411c <main+0x220>)
 8003f88:	f7fe fc8a 	bl	80028a0 <HAL_RTC_SetDate>

	//To get time, data, use this
	//RTC_get_Time_and_Date();
	/* Infinite loop */

	sunriseTime.Hours = 8;
 8003f8c:	4b65      	ldr	r3, [pc, #404]	; (8004124 <main+0x228>)
 8003f8e:	2208      	movs	r2, #8
 8003f90:	701a      	strb	r2, [r3, #0]
	sunriseTime.Minutes = 21;
 8003f92:	4b64      	ldr	r3, [pc, #400]	; (8004124 <main+0x228>)
 8003f94:	2215      	movs	r2, #21
 8003f96:	705a      	strb	r2, [r3, #1]

	sunsetTime.Hours = 18;
 8003f98:	4b63      	ldr	r3, [pc, #396]	; (8004128 <main+0x22c>)
 8003f9a:	2212      	movs	r2, #18
 8003f9c:	701a      	strb	r2, [r3, #0]
	sunsetTime.Minutes = 21;
 8003f9e:	4b62      	ldr	r3, [pc, #392]	; (8004128 <main+0x22c>)
 8003fa0:	2215      	movs	r2, #21
 8003fa2:	705a      	strb	r2, [r3, #1]

	/* Infinite loop */
	while (1)
	{

		RTC_get_Time_and_Date();
 8003fa4:	f000 fb56 	bl	8004654 <RTC_get_Time_and_Date>
		//zeit anzeigen
		if(display_timer!=myTime.Minutes){
 8003fa8:	4b5b      	ldr	r3, [pc, #364]	; (8004118 <main+0x21c>)
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b5f      	ldr	r3, [pc, #380]	; (800412c <main+0x230>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d00e      	beq.n	8003fd4 <main+0xd8>
			menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 8003fb6:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <main+0x228>)
 8003fb8:	7818      	ldrb	r0, [r3, #0]
 8003fba:	4b5a      	ldr	r3, [pc, #360]	; (8004124 <main+0x228>)
 8003fbc:	7859      	ldrb	r1, [r3, #1]
 8003fbe:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <main+0x22c>)
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	4b59      	ldr	r3, [pc, #356]	; (8004128 <main+0x22c>)
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	f000 fd0d 	bl	80049e4 <menu_print_time>
			display_timer=myTime.Minutes;
 8003fca:	4b53      	ldr	r3, [pc, #332]	; (8004118 <main+0x21c>)
 8003fcc:	785b      	ldrb	r3, [r3, #1]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b56      	ldr	r3, [pc, #344]	; (800412c <main+0x230>)
 8003fd2:	601a      	str	r2, [r3, #0]
		}




		if(sunriseTime.Hours == myTime.Hours){
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <main+0x228>)
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <main+0x21c>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d108      	bne.n	8003ff2 <main+0xf6>
			if(sunriseTime.Minutes == myTime.Minutes){
 8003fe0:	4b50      	ldr	r3, [pc, #320]	; (8004124 <main+0x228>)
 8003fe2:	785a      	ldrb	r2, [r3, #1]
 8003fe4:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <main+0x21c>)
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d102      	bne.n	8003ff2 <main+0xf6>
				state=1;
 8003fec:	4b50      	ldr	r3, [pc, #320]	; (8004130 <main+0x234>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
			}
		}
		if(sunriseTime.Hours+1 == myTime.Hours){
 8003ff2:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <main+0x228>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	4a47      	ldr	r2, [pc, #284]	; (8004118 <main+0x21c>)
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d108      	bne.n	8004012 <main+0x116>
			if(sunriseTime.Minutes == myTime.Minutes){
 8004000:	4b48      	ldr	r3, [pc, #288]	; (8004124 <main+0x228>)
 8004002:	785a      	ldrb	r2, [r3, #1]
 8004004:	4b44      	ldr	r3, [pc, #272]	; (8004118 <main+0x21c>)
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	429a      	cmp	r2, r3
 800400a:	d102      	bne.n	8004012 <main+0x116>
				state=3;
 800400c:	4b48      	ldr	r3, [pc, #288]	; (8004130 <main+0x234>)
 800400e:	2203      	movs	r2, #3
 8004010:	601a      	str	r2, [r3, #0]
			}
		}

		if(sunsetTime.Hours == myTime.Hours){
 8004012:	4b45      	ldr	r3, [pc, #276]	; (8004128 <main+0x22c>)
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	4b40      	ldr	r3, [pc, #256]	; (8004118 <main+0x21c>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d108      	bne.n	8004030 <main+0x134>
			if(sunsetTime.Minutes == myTime.Minutes){
 800401e:	4b42      	ldr	r3, [pc, #264]	; (8004128 <main+0x22c>)
 8004020:	785a      	ldrb	r2, [r3, #1]
 8004022:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <main+0x21c>)
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	429a      	cmp	r2, r3
 8004028:	d102      	bne.n	8004030 <main+0x134>
				state=2;
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <main+0x234>)
 800402c:	2202      	movs	r2, #2
 800402e:	601a      	str	r2, [r3, #0]
			}
		}
		if(sunsetTime.Hours-1 == myTime.Hours){
 8004030:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <main+0x22c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	3b01      	subs	r3, #1
 8004036:	4a38      	ldr	r2, [pc, #224]	; (8004118 <main+0x21c>)
 8004038:	7812      	ldrb	r2, [r2, #0]
 800403a:	4293      	cmp	r3, r2
 800403c:	d108      	bne.n	8004050 <main+0x154>
			if(sunsetTime.Minutes == myTime.Minutes){
 800403e:	4b3a      	ldr	r3, [pc, #232]	; (8004128 <main+0x22c>)
 8004040:	785a      	ldrb	r2, [r3, #1]
 8004042:	4b35      	ldr	r3, [pc, #212]	; (8004118 <main+0x21c>)
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	429a      	cmp	r2, r3
 8004048:	d102      	bne.n	8004050 <main+0x154>
				state=4;
 800404a:	4b39      	ldr	r3, [pc, #228]	; (8004130 <main+0x234>)
 800404c:	2204      	movs	r2, #4
 800404e:	601a      	str	r2, [r3, #0]
			}
		}

		switch (state) {	 		//taeglicher zyklus mit stateevent
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <main+0x234>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	2b03      	cmp	r3, #3
 8004058:	d816      	bhi.n	8004088 <main+0x18c>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <main+0x164>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004071 	.word	0x08004071
 8004064:	08004077 	.word	0x08004077
 8004068:	0800407d 	.word	0x0800407d
 800406c:	08004083 	.word	0x08004083
		case 1:
			sunrise();
 8004070:	f000 f9b8 	bl	80043e4 <sunrise>
			break;
 8004074:	e009      	b.n	800408a <main+0x18e>
		case 2:
			sunset();
 8004076:	f000 fa05 	bl	8004484 <sunset>
			break;
 800407a:	e006      	b.n	800408a <main+0x18e>
		case 3:
			LED_Dimm_Down();
 800407c:	f000 fa9e 	bl	80045bc <LED_Dimm_Down>
			break;
 8004080:	e003      	b.n	800408a <main+0x18e>
		case 4:
			LED_Dimm_Up();
 8004082:	f000 fa4b 	bl	800451c <LED_Dimm_Up>
			break;
 8004086:	e000      	b.n	800408a <main+0x18e>
		default:

			break;
 8004088:	bf00      	nop
		}


		//taster auslesen (positive flankentriggerung)
		button_pressed=0;
 800408a:	2300      	movs	r3, #0
 800408c:	71fb      	strb	r3, [r7, #7]
		u8SampleButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 800408e:	2102      	movs	r1, #2
 8004090:	4828      	ldr	r0, [pc, #160]	; (8004134 <main+0x238>)
 8004092:	f7fc fdc7 	bl	8000c24 <HAL_GPIO_ReadPin>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	4b27      	ldr	r3, [pc, #156]	; (8004138 <main+0x23c>)
 800409c:	701a      	strb	r2, [r3, #0]
		if((u8SampleButton != 0) && (u8SampleLastButton == 0)){
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <main+0x23c>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <main+0x1b6>
 80040a6:	4b25      	ldr	r3, [pc, #148]	; (800413c <main+0x240>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <main+0x1b6>
		  button_pressed=1;
 80040ae:	2301      	movs	r3, #1
 80040b0:	71fb      	strb	r3, [r7, #7]
		}
		u8SampleLastButton = u8SampleButton;
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <main+0x23c>)
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <main+0x240>)
 80040b8:	701a      	strb	r2, [r3, #0]


		encoder_val=read_encoder();
 80040ba:	f000 fadf 	bl	800467c <read_encoder>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <main+0x244>)
 80040c4:	701a      	strb	r2, [r3, #0]
		if(encoder_val != 0)
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <main+0x244>)
 80040c8:	f993 3000 	ldrsb.w	r3, [r3]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <main+0x1dc>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80040d0:	2120      	movs	r1, #32
 80040d2:	4810      	ldr	r0, [pc, #64]	; (8004114 <main+0x218>)
 80040d4:	f7fc fdd7 	bl	8000c86 <HAL_GPIO_TogglePin>
		}

		switch (menue_state){ 			//Change menu state if button is pushed
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <main+0x248>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	2b03      	cmp	r3, #3
 80040e0:	f200 815c 	bhi.w	800439c <main+0x4a0>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <main+0x1f0>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	08004149 	.word	0x08004149
 80040f4:	08004219 	.word	0x08004219
 80040f8:	080042d5 	.word	0x080042d5
		case 1:
			if(button_pressed  == GPIO_PIN_SET){
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	f040 8145 	bne.w	800438e <main+0x492>
				menue_state = 2;
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <main+0x248>)
 8004106:	2202      	movs	r2, #2
 8004108:	601a      	str	r2, [r3, #0]
				menu_print_cursor(2);
 800410a:	2002      	movs	r0, #2
 800410c:	f000 fbb4 	bl	8004878 <menu_print_cursor>
			}
			break;
 8004110:	e13d      	b.n	800438e <main+0x492>
 8004112:	bf00      	nop
 8004114:	40020400 	.word	0x40020400
 8004118:	200000d4 	.word	0x200000d4
 800411c:	2000021c 	.word	0x2000021c
 8004120:	20000218 	.word	0x20000218
 8004124:	200001f0 	.word	0x200001f0
 8004128:	20000204 	.word	0x20000204
 800412c:	200000ac 	.word	0x200000ac
 8004130:	200000a4 	.word	0x200000a4
 8004134:	40020800 	.word	0x40020800
 8004138:	200000c0 	.word	0x200000c0
 800413c:	200000c1 	.word	0x200000c1
 8004140:	200000c2 	.word	0x200000c2
 8004144:	20000008 	.word	0x20000008
		case 2:
			if(button_pressed  == GPIO_PIN_SET){
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <main+0x25e>
				menue_state = 3;
 800414e:	4b95      	ldr	r3, [pc, #596]	; (80043a4 <main+0x4a8>)
 8004150:	2203      	movs	r2, #3
 8004152:	601a      	str	r2, [r3, #0]
				menu_print_cursor(3);
 8004154:	2003      	movs	r0, #3
 8004156:	f000 fb8f 	bl	8004878 <menu_print_cursor>
			}
			if(encoder_val == 1)
 800415a:	4b93      	ldr	r3, [pc, #588]	; (80043a8 <main+0x4ac>)
 800415c:	f993 3000 	ldrsb.w	r3, [r3]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d128      	bne.n	80041b6 <main+0x2ba>
			{
				myTime.Minutes = myTime.Minutes+1;
 8004164:	4b91      	ldr	r3, [pc, #580]	; (80043ac <main+0x4b0>)
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	3301      	adds	r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <main+0x4b0>)
 800416e:	705a      	strb	r2, [r3, #1]
				if(myTime.Minutes >= 60)
 8004170:	4b8e      	ldr	r3, [pc, #568]	; (80043ac <main+0x4b0>)
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b3b      	cmp	r3, #59	; 0x3b
 8004176:	d90f      	bls.n	8004198 <main+0x29c>
				{
					myTime.Hours = myTime.Hours+1;
 8004178:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <main+0x4b0>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <main+0x4b0>)
 8004182:	701a      	strb	r2, [r3, #0]
					myTime.Minutes = 0;
 8004184:	4b89      	ldr	r3, [pc, #548]	; (80043ac <main+0x4b0>)
 8004186:	2200      	movs	r2, #0
 8004188:	705a      	strb	r2, [r3, #1]
					if(myTime.Hours >= 25)
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <main+0x4b0>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b18      	cmp	r3, #24
 8004190:	d902      	bls.n	8004198 <main+0x29c>
					{
						myTime.Hours = 0;
 8004192:	4b86      	ldr	r3, [pc, #536]	; (80043ac <main+0x4b0>)
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
					}
				}
				HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8004198:	2200      	movs	r2, #0
 800419a:	4984      	ldr	r1, [pc, #528]	; (80043ac <main+0x4b0>)
 800419c:	4884      	ldr	r0, [pc, #528]	; (80043b0 <main+0x4b4>)
 800419e:	f7fe fa5c 	bl	800265a <HAL_RTC_SetTime>
				menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 80041a2:	4b84      	ldr	r3, [pc, #528]	; (80043b4 <main+0x4b8>)
 80041a4:	7818      	ldrb	r0, [r3, #0]
 80041a6:	4b83      	ldr	r3, [pc, #524]	; (80043b4 <main+0x4b8>)
 80041a8:	7859      	ldrb	r1, [r3, #1]
 80041aa:	4b83      	ldr	r3, [pc, #524]	; (80043b8 <main+0x4bc>)
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	4b82      	ldr	r3, [pc, #520]	; (80043b8 <main+0x4bc>)
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	f000 fc17 	bl	80049e4 <menu_print_time>
			}
			if(encoder_val == -1)
 80041b6:	4b7c      	ldr	r3, [pc, #496]	; (80043a8 <main+0x4ac>)
 80041b8:	f993 3000 	ldrsb.w	r3, [r3]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	f040 80e7 	bne.w	8004392 <main+0x496>
			{
				myTime.Minutes = myTime.Minutes-1;
 80041c4:	4b79      	ldr	r3, [pc, #484]	; (80043ac <main+0x4b0>)
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	4b77      	ldr	r3, [pc, #476]	; (80043ac <main+0x4b0>)
 80041ce:	705a      	strb	r2, [r3, #1]
					if(myTime.Minutes >= 60)
 80041d0:	4b76      	ldr	r3, [pc, #472]	; (80043ac <main+0x4b0>)
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b3b      	cmp	r3, #59	; 0x3b
 80041d6:	d90f      	bls.n	80041f8 <main+0x2fc>
					{
						myTime.Hours = myTime.Hours-1;
 80041d8:	4b74      	ldr	r3, [pc, #464]	; (80043ac <main+0x4b0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b72      	ldr	r3, [pc, #456]	; (80043ac <main+0x4b0>)
 80041e2:	701a      	strb	r2, [r3, #0]
						myTime.Minutes = 59;
 80041e4:	4b71      	ldr	r3, [pc, #452]	; (80043ac <main+0x4b0>)
 80041e6:	223b      	movs	r2, #59	; 0x3b
 80041e8:	705a      	strb	r2, [r3, #1]
						if(myTime.Hours >= 25)
 80041ea:	4b70      	ldr	r3, [pc, #448]	; (80043ac <main+0x4b0>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b18      	cmp	r3, #24
 80041f0:	d902      	bls.n	80041f8 <main+0x2fc>
						{
							myTime.Hours = 24;
 80041f2:	4b6e      	ldr	r3, [pc, #440]	; (80043ac <main+0x4b0>)
 80041f4:	2218      	movs	r2, #24
 80041f6:	701a      	strb	r2, [r3, #0]
						}
					}
					HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80041f8:	2200      	movs	r2, #0
 80041fa:	496c      	ldr	r1, [pc, #432]	; (80043ac <main+0x4b0>)
 80041fc:	486c      	ldr	r0, [pc, #432]	; (80043b0 <main+0x4b4>)
 80041fe:	f7fe fa2c 	bl	800265a <HAL_RTC_SetTime>
					menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 8004202:	4b6c      	ldr	r3, [pc, #432]	; (80043b4 <main+0x4b8>)
 8004204:	7818      	ldrb	r0, [r3, #0]
 8004206:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <main+0x4b8>)
 8004208:	7859      	ldrb	r1, [r3, #1]
 800420a:	4b6b      	ldr	r3, [pc, #428]	; (80043b8 <main+0x4bc>)
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <main+0x4bc>)
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	f000 fbe7 	bl	80049e4 <menu_print_time>
			}
			break;
 8004216:	e0bc      	b.n	8004392 <main+0x496>
		case 3:
			if(button_pressed  == GPIO_PIN_SET){
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <main+0x32e>
				menue_state = 4;
 800421e:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <main+0x4a8>)
 8004220:	2204      	movs	r2, #4
 8004222:	601a      	str	r2, [r3, #0]
				menu_print_cursor(4);
 8004224:	2004      	movs	r0, #4
 8004226:	f000 fb27 	bl	8004878 <menu_print_cursor>
			}
			if(encoder_val == 1)
 800422a:	4b5f      	ldr	r3, [pc, #380]	; (80043a8 <main+0x4ac>)
 800422c:	f993 3000 	ldrsb.w	r3, [r3]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d123      	bne.n	800427c <main+0x380>
			{
				sunriseTime.Minutes = sunriseTime.Minutes+1;
 8004234:	4b5f      	ldr	r3, [pc, #380]	; (80043b4 <main+0x4b8>)
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	3301      	adds	r3, #1
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <main+0x4b8>)
 800423e:	705a      	strb	r2, [r3, #1]
				if(sunriseTime.Minutes >= 60)
 8004240:	4b5c      	ldr	r3, [pc, #368]	; (80043b4 <main+0x4b8>)
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b3b      	cmp	r3, #59	; 0x3b
 8004246:	d90f      	bls.n	8004268 <main+0x36c>
				{
					sunriseTime.Hours = sunriseTime.Hours+1;
 8004248:	4b5a      	ldr	r3, [pc, #360]	; (80043b4 <main+0x4b8>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b58      	ldr	r3, [pc, #352]	; (80043b4 <main+0x4b8>)
 8004252:	701a      	strb	r2, [r3, #0]
					sunriseTime.Minutes = 0;
 8004254:	4b57      	ldr	r3, [pc, #348]	; (80043b4 <main+0x4b8>)
 8004256:	2200      	movs	r2, #0
 8004258:	705a      	strb	r2, [r3, #1]
					if(sunriseTime.Hours >= 25)
 800425a:	4b56      	ldr	r3, [pc, #344]	; (80043b4 <main+0x4b8>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b18      	cmp	r3, #24
 8004260:	d902      	bls.n	8004268 <main+0x36c>
					{
						sunriseTime.Hours = 0;
 8004262:	4b54      	ldr	r3, [pc, #336]	; (80043b4 <main+0x4b8>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
					}
				}
				menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 8004268:	4b52      	ldr	r3, [pc, #328]	; (80043b4 <main+0x4b8>)
 800426a:	7818      	ldrb	r0, [r3, #0]
 800426c:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <main+0x4b8>)
 800426e:	7859      	ldrb	r1, [r3, #1]
 8004270:	4b51      	ldr	r3, [pc, #324]	; (80043b8 <main+0x4bc>)
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <main+0x4bc>)
 8004276:	785b      	ldrb	r3, [r3, #1]
 8004278:	f000 fbb4 	bl	80049e4 <menu_print_time>
			}
			if(encoder_val == -1)
 800427c:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <main+0x4ac>)
 800427e:	f993 3000 	ldrsb.w	r3, [r3]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	f040 8086 	bne.w	8004396 <main+0x49a>
			{
				sunriseTime.Minutes = sunriseTime.Minutes-1;
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <main+0x4b8>)
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	3b01      	subs	r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b48      	ldr	r3, [pc, #288]	; (80043b4 <main+0x4b8>)
 8004294:	705a      	strb	r2, [r3, #1]
					if(sunriseTime.Minutes >= 60)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <main+0x4b8>)
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b3b      	cmp	r3, #59	; 0x3b
 800429c:	d90f      	bls.n	80042be <main+0x3c2>
					{
						sunriseTime.Hours = sunriseTime.Hours-1;
 800429e:	4b45      	ldr	r3, [pc, #276]	; (80043b4 <main+0x4b8>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <main+0x4b8>)
 80042a8:	701a      	strb	r2, [r3, #0]
						sunriseTime.Minutes = 59;
 80042aa:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <main+0x4b8>)
 80042ac:	223b      	movs	r2, #59	; 0x3b
 80042ae:	705a      	strb	r2, [r3, #1]
						if(sunriseTime.Hours >= 25)
 80042b0:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <main+0x4b8>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b18      	cmp	r3, #24
 80042b6:	d902      	bls.n	80042be <main+0x3c2>
						{
							sunriseTime.Hours = 24;
 80042b8:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <main+0x4b8>)
 80042ba:	2218      	movs	r2, #24
 80042bc:	701a      	strb	r2, [r3, #0]
						}
					}
					menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 80042be:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <main+0x4b8>)
 80042c0:	7818      	ldrb	r0, [r3, #0]
 80042c2:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <main+0x4b8>)
 80042c4:	7859      	ldrb	r1, [r3, #1]
 80042c6:	4b3c      	ldr	r3, [pc, #240]	; (80043b8 <main+0x4bc>)
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <main+0x4bc>)
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	f000 fb89 	bl	80049e4 <menu_print_time>
			}
			break;
 80042d2:	e060      	b.n	8004396 <main+0x49a>
		case 4:
			if(button_pressed  == GPIO_PIN_SET){
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <main+0x3ea>
				menue_state = 1;
 80042da:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <main+0x4a8>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
				menu_print_cursor(1);
 80042e0:	2001      	movs	r0, #1
 80042e2:	f000 fac9 	bl	8004878 <menu_print_cursor>
			}
			if(encoder_val == 1)
 80042e6:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <main+0x4ac>)
 80042e8:	f993 3000 	ldrsb.w	r3, [r3]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d123      	bne.n	8004338 <main+0x43c>
			{
				sunsetTime.Minutes = sunsetTime.Minutes+1;
 80042f0:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <main+0x4bc>)
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	3301      	adds	r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <main+0x4bc>)
 80042fa:	705a      	strb	r2, [r3, #1]
				if(sunsetTime.Minutes >= 60)
 80042fc:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <main+0x4bc>)
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b3b      	cmp	r3, #59	; 0x3b
 8004302:	d90f      	bls.n	8004324 <main+0x428>
				{
					sunsetTime.Hours = sunsetTime.Hours+1;
 8004304:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <main+0x4bc>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <main+0x4bc>)
 800430e:	701a      	strb	r2, [r3, #0]
					sunsetTime.Minutes = 0;
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <main+0x4bc>)
 8004312:	2200      	movs	r2, #0
 8004314:	705a      	strb	r2, [r3, #1]
					if(sunsetTime.Hours >= 25)
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <main+0x4bc>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b18      	cmp	r3, #24
 800431c:	d902      	bls.n	8004324 <main+0x428>
					{
						sunsetTime.Hours = 0;
 800431e:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <main+0x4bc>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
					}
				}
				menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 8004324:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <main+0x4b8>)
 8004326:	7818      	ldrb	r0, [r3, #0]
 8004328:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <main+0x4b8>)
 800432a:	7859      	ldrb	r1, [r3, #1]
 800432c:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <main+0x4bc>)
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <main+0x4bc>)
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	f000 fb56 	bl	80049e4 <menu_print_time>
			}
			if(encoder_val == -1)
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <main+0x4ac>)
 800433a:	f993 3000 	ldrsb.w	r3, [r3]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d12a      	bne.n	800439a <main+0x49e>
			{
				sunsetTime.Minutes = sunsetTime.Minutes-1;
 8004344:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <main+0x4bc>)
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	3b01      	subs	r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <main+0x4bc>)
 800434e:	705a      	strb	r2, [r3, #1]
					if(sunsetTime.Minutes >= 60)
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <main+0x4bc>)
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b3b      	cmp	r3, #59	; 0x3b
 8004356:	d90f      	bls.n	8004378 <main+0x47c>
					{
						sunsetTime.Hours = sunsetTime.Hours-1;
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <main+0x4bc>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <main+0x4bc>)
 8004362:	701a      	strb	r2, [r3, #0]
						sunsetTime.Minutes = 59;
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <main+0x4bc>)
 8004366:	223b      	movs	r2, #59	; 0x3b
 8004368:	705a      	strb	r2, [r3, #1]
						if(sunsetTime.Hours >= 25)
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <main+0x4bc>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b18      	cmp	r3, #24
 8004370:	d902      	bls.n	8004378 <main+0x47c>
						{
							sunsetTime.Hours = 24;
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <main+0x4bc>)
 8004374:	2218      	movs	r2, #24
 8004376:	701a      	strb	r2, [r3, #0]
						}
					}
					menu_print_time(sunriseTime.Hours,sunriseTime.Minutes,sunsetTime.Hours,sunsetTime.Minutes);
 8004378:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <main+0x4b8>)
 800437a:	7818      	ldrb	r0, [r3, #0]
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <main+0x4b8>)
 800437e:	7859      	ldrb	r1, [r3, #1]
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <main+0x4bc>)
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <main+0x4bc>)
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	f000 fb2c 	bl	80049e4 <menu_print_time>
			}
			break;
 800438c:	e005      	b.n	800439a <main+0x49e>
			break;
 800438e:	bf00      	nop
 8004390:	e004      	b.n	800439c <main+0x4a0>
			break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <main+0x4a0>
			break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <main+0x4a0>
			break;
 800439a:	bf00      	nop
		}
		HAL_Delay(10);//entprellen des tasters
 800439c:	200a      	movs	r0, #10
 800439e:	f7fc f981 	bl	80006a4 <HAL_Delay>
		RTC_get_Time_and_Date();
 80043a2:	e5ff      	b.n	8003fa4 <main+0xa8>
 80043a4:	20000008 	.word	0x20000008
 80043a8:	200000c2 	.word	0x200000c2
 80043ac:	200000d4 	.word	0x200000d4
 80043b0:	2000021c 	.word	0x2000021c
 80043b4:	200001f0 	.word	0x200001f0
 80043b8:	20000204 	.word	0x20000204

080043bc <set_RGB>:
 * @brief Function that adjusts colour of LED strip
 * @param Duty cycles of red, green and blue LEDs, respectively
 * @retval None
 */
void set_RGB(int red, int green, int blue)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
	MX_TIM4_Init(red);
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fc9d 	bl	8004d08 <MX_TIM4_Init>
	MX_TIM3_Init(green);
 80043ce:	68b8      	ldr	r0, [r7, #8]
 80043d0:	f000 fc3c 	bl	8004c4c <MX_TIM3_Init>
	MX_TIM8_Init(blue);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fcf5 	bl	8004dc4 <MX_TIM8_Init>
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <sunrise>:
 * @brief Function that controls LED and fluorescent lamp to simulate sunrise
 * @param None
 * @retval None
 */
void sunrise(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	RTC_get_Time_and_Date();
 80043e8:	f000 f934 	bl	8004654 <RTC_get_Time_and_Date>
	if((red<=1000) && (green<=1000) && (blue<=1000))
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <sunrise+0x88>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f4:	dc37      	bgt.n	8004466 <sunrise+0x82>
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <sunrise+0x8c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043fe:	dc32      	bgt.n	8004466 <sunrise+0x82>
 8004400:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <sunrise+0x90>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004408:	dc2d      	bgt.n	8004466 <sunrise+0x82>
	{
		if(sunrise_timer!=myTime.Seconds)
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <sunrise+0x94>)
 800440c:	789b      	ldrb	r3, [r3, #2]
 800440e:	461a      	mov	r2, r3
 8004410:	4b1a      	ldr	r3, [pc, #104]	; (800447c <sunrise+0x98>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d026      	beq.n	8004466 <sunrise+0x82>
		{
			red=red+25;
 8004418:	4b14      	ldr	r3, [pc, #80]	; (800446c <sunrise+0x88>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3319      	adds	r3, #25
 800441e:	4a13      	ldr	r2, [pc, #76]	; (800446c <sunrise+0x88>)
 8004420:	6013      	str	r3, [r2, #0]
			green=green+8;
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <sunrise+0x8c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <sunrise+0x8c>)
 800442a:	6013      	str	r3, [r2, #0]
			blue=blue+1;
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <sunrise+0x90>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	4a10      	ldr	r2, [pc, #64]	; (8004474 <sunrise+0x90>)
 8004434:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness+25;
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <sunrise+0x9c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3319      	adds	r3, #25
 800443c:	4a10      	ldr	r2, [pc, #64]	; (8004480 <sunrise+0x9c>)
 800443e:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <sunrise+0x9c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fe29 	bl	800509c <set_FL>
			set_RGB(red,green,blue);
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <sunrise+0x88>)
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	4b08      	ldr	r3, [pc, #32]	; (8004470 <sunrise+0x8c>)
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <sunrise+0x90>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	f7ff ffb0 	bl	80043bc <set_RGB>
			sunrise_timer=myTime.Seconds;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <sunrise+0x94>)
 800445e:	789b      	ldrb	r3, [r3, #2]
 8004460:	461a      	mov	r2, r3
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <sunrise+0x98>)
 8004464:	601a      	str	r2, [r3, #0]
		}

	}
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200000b0 	.word	0x200000b0
 8004470:	200000b4 	.word	0x200000b4
 8004474:	200000b8 	.word	0x200000b8
 8004478:	200000d4 	.word	0x200000d4
 800447c:	200000a8 	.word	0x200000a8
 8004480:	200000bc 	.word	0x200000bc

08004484 <sunset>:
 * @brief Function that controls LED and fluorescent lamp to simulate sunset
 * @param None
 * @retval None
 */
void sunset(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	RTC_get_Time_and_Date();
 8004488:	f000 f8e4 	bl	8004654 <RTC_get_Time_and_Date>
	if((red>=1) && (green>=1) && (blue>=1))
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <sunset+0x80>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	dd35      	ble.n	8004500 <sunset+0x7c>
 8004494:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <sunset+0x84>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	dd31      	ble.n	8004500 <sunset+0x7c>
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <sunset+0x88>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dd2d      	ble.n	8004500 <sunset+0x7c>
	{
		if(sunrise_timer!=myTime.Seconds)
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <sunset+0x8c>)
 80044a6:	789b      	ldrb	r3, [r3, #2]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <sunset+0x90>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d026      	beq.n	8004500 <sunset+0x7c>
		{
			red=red-25;
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <sunset+0x80>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b19      	subs	r3, #25
 80044b8:	4a12      	ldr	r2, [pc, #72]	; (8004504 <sunset+0x80>)
 80044ba:	6013      	str	r3, [r2, #0]
			green=green-8;
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <sunset+0x84>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3b08      	subs	r3, #8
 80044c2:	4a11      	ldr	r2, [pc, #68]	; (8004508 <sunset+0x84>)
 80044c4:	6013      	str	r3, [r2, #0]
			blue=blue-1;
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <sunset+0x88>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	4a0f      	ldr	r2, [pc, #60]	; (800450c <sunset+0x88>)
 80044ce:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness-25;
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <sunset+0x94>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3b19      	subs	r3, #25
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <sunset+0x94>)
 80044d8:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <sunset+0x94>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fddc 	bl	800509c <set_FL>
			set_RGB(red,green,blue);
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <sunset+0x80>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <sunset+0x84>)
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <sunset+0x88>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f7ff ff63 	bl	80043bc <set_RGB>
			sunrise_timer=myTime.Seconds;
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <sunset+0x8c>)
 80044f8:	789b      	ldrb	r3, [r3, #2]
 80044fa:	461a      	mov	r2, r3
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <sunset+0x90>)
 80044fe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004500:	bf00      	nop
 8004502:	bd80      	pop	{r7, pc}
 8004504:	200000b0 	.word	0x200000b0
 8004508:	200000b4 	.word	0x200000b4
 800450c:	200000b8 	.word	0x200000b8
 8004510:	200000d4 	.word	0x200000d4
 8004514:	200000a8 	.word	0x200000a8
 8004518:	200000bc 	.word	0x200000bc

0800451c <LED_Dimm_Up>:
 * @brief Function that gradually turns up the LED strip
 * @param None
 * @retval None
 */
void LED_Dimm_Up(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
	RTC_get_Time_and_Date();
 8004520:	f000 f898 	bl	8004654 <RTC_get_Time_and_Date>
	if((red<=1000) && (green<=1000) && (blue<=1000))
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <LED_Dimm_Up+0x88>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800452c:	dc37      	bgt.n	800459e <LED_Dimm_Up+0x82>
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <LED_Dimm_Up+0x8c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004536:	dc32      	bgt.n	800459e <LED_Dimm_Up+0x82>
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <LED_Dimm_Up+0x90>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004540:	dc2d      	bgt.n	800459e <LED_Dimm_Up+0x82>
	{
		if(sunrise_timer!=myTime.Seconds)
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <LED_Dimm_Up+0x94>)
 8004544:	789b      	ldrb	r3, [r3, #2]
 8004546:	461a      	mov	r2, r3
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <LED_Dimm_Up+0x98>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d026      	beq.n	800459e <LED_Dimm_Up+0x82>
		{
			red=red+50;
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <LED_Dimm_Up+0x88>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3332      	adds	r3, #50	; 0x32
 8004556:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <LED_Dimm_Up+0x88>)
 8004558:	6013      	str	r3, [r2, #0]
			green=green+16;
 800455a:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <LED_Dimm_Up+0x8c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3310      	adds	r3, #16
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <LED_Dimm_Up+0x8c>)
 8004562:	6013      	str	r3, [r2, #0]
			blue=blue+2;
 8004564:	4b11      	ldr	r3, [pc, #68]	; (80045ac <LED_Dimm_Up+0x90>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3302      	adds	r3, #2
 800456a:	4a10      	ldr	r2, [pc, #64]	; (80045ac <LED_Dimm_Up+0x90>)
 800456c:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness+25;
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <LED_Dimm_Up+0x9c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3319      	adds	r3, #25
 8004574:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <LED_Dimm_Up+0x9c>)
 8004576:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <LED_Dimm_Up+0x9c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fd8d 	bl	800509c <set_FL>
			set_RGB(red,green,blue);
 8004582:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <LED_Dimm_Up+0x88>)
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <LED_Dimm_Up+0x8c>)
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <LED_Dimm_Up+0x90>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7ff ff14 	bl	80043bc <set_RGB>
			sunrise_timer=myTime.Seconds;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <LED_Dimm_Up+0x94>)
 8004596:	789b      	ldrb	r3, [r3, #2]
 8004598:	461a      	mov	r2, r3
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <LED_Dimm_Up+0x98>)
 800459c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	200000b0 	.word	0x200000b0
 80045a8:	200000b4 	.word	0x200000b4
 80045ac:	200000b8 	.word	0x200000b8
 80045b0:	200000d4 	.word	0x200000d4
 80045b4:	200000a8 	.word	0x200000a8
 80045b8:	200000bc 	.word	0x200000bc

080045bc <LED_Dimm_Down>:
 * @brief Function that gradually dims the LED strip
 * @param None
 * @retval None
 */
void LED_Dimm_Down(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
	RTC_get_Time_and_Date();
 80045c0:	f000 f848 	bl	8004654 <RTC_get_Time_and_Date>
	if((red>=1) && (green>=1) && (blue>=1))
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <LED_Dimm_Down+0x80>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	dd35      	ble.n	8004638 <LED_Dimm_Down+0x7c>
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <LED_Dimm_Down+0x84>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dd31      	ble.n	8004638 <LED_Dimm_Down+0x7c>
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <LED_Dimm_Down+0x88>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	dd2d      	ble.n	8004638 <LED_Dimm_Down+0x7c>
	{
		if(sunrise_timer!=myTime.Seconds)
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <LED_Dimm_Down+0x8c>)
 80045de:	789b      	ldrb	r3, [r3, #2]
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <LED_Dimm_Down+0x90>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d026      	beq.n	8004638 <LED_Dimm_Down+0x7c>
		{
			red=red-200;
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <LED_Dimm_Down+0x80>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3bc8      	subs	r3, #200	; 0xc8
 80045f0:	4a12      	ldr	r2, [pc, #72]	; (800463c <LED_Dimm_Down+0x80>)
 80045f2:	6013      	str	r3, [r2, #0]
			green=green-16;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <LED_Dimm_Down+0x84>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3b10      	subs	r3, #16
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <LED_Dimm_Down+0x84>)
 80045fc:	6013      	str	r3, [r2, #0]
			blue=blue-2;
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <LED_Dimm_Down+0x88>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3b02      	subs	r3, #2
 8004604:	4a0f      	ldr	r2, [pc, #60]	; (8004644 <LED_Dimm_Down+0x88>)
 8004606:	6013      	str	r3, [r2, #0]
			FLbrightness=FLbrightness-25;
 8004608:	4b11      	ldr	r3, [pc, #68]	; (8004650 <LED_Dimm_Down+0x94>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3b19      	subs	r3, #25
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <LED_Dimm_Down+0x94>)
 8004610:	6013      	str	r3, [r2, #0]
			set_FL(FLbrightness);
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <LED_Dimm_Down+0x94>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fd40 	bl	800509c <set_FL>
			set_RGB(red,green,blue);
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <LED_Dimm_Down+0x80>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <LED_Dimm_Down+0x84>)
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <LED_Dimm_Down+0x88>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	f7ff fec7 	bl	80043bc <set_RGB>
			sunrise_timer=myTime.Seconds;
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <LED_Dimm_Down+0x8c>)
 8004630:	789b      	ldrb	r3, [r3, #2]
 8004632:	461a      	mov	r2, r3
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <LED_Dimm_Down+0x90>)
 8004636:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	200000b0 	.word	0x200000b0
 8004640:	200000b4 	.word	0x200000b4
 8004644:	200000b8 	.word	0x200000b8
 8004648:	200000d4 	.word	0x200000d4
 800464c:	200000a8 	.word	0x200000a8
 8004650:	200000bc 	.word	0x200000bc

08004654 <RTC_get_Time_and_Date>:
/**
 * @brief Real Time Clock update time and date
 * @retval None
 */
void RTC_get_Time_and_Date(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
	//1)Get time
	HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8004658:	2200      	movs	r2, #0
 800465a:	4905      	ldr	r1, [pc, #20]	; (8004670 <RTC_get_Time_and_Date+0x1c>)
 800465c:	4805      	ldr	r0, [pc, #20]	; (8004674 <RTC_get_Time_and_Date+0x20>)
 800465e:	f7fe f8c1 	bl	80027e4 <HAL_RTC_GetTime>
	//2)Get data
	HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8004662:	2200      	movs	r2, #0
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <RTC_get_Time_and_Date+0x24>)
 8004666:	4803      	ldr	r0, [pc, #12]	; (8004674 <RTC_get_Time_and_Date+0x20>)
 8004668:	f7fe f9c1 	bl	80029ee <HAL_RTC_GetDate>
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200000d4 	.word	0x200000d4
 8004674:	2000021c 	.word	0x2000021c
 8004678:	20000218 	.word	0x20000218

0800467c <read_encoder>:
 * @brief Read new encoder state and decide turning direction
 * @param None
 * @retval 8bit unsigned integer. 0 for no rotation, -1 for CCW rotation, 1 for CW rotation.
 */
int8_t read_encoder(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
	static int8_t enc_states[] = {0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0}; // LUT for rotation direction
	uint8_t encAB = 0x00;
 8004682:	2300      	movs	r3, #0
 8004684:	71fb      	strb	r3, [r7, #7]
	old_AB = old_AB << 2;                   	//remember previous state on the positions bit no. 2 and 3 (bit 0 is first element)
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <read_encoder+0x74>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <read_encoder+0x74>)
 8004690:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET){ 	// If channel A is high level, bit no. 1 is set
 8004692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004696:	4817      	ldr	r0, [pc, #92]	; (80046f4 <read_encoder+0x78>)
 8004698:	f7fc fac4 	bl	8000c24 <HAL_GPIO_ReadPin>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d103      	bne.n	80046aa <read_encoder+0x2e>
		encAB = encAB | (0x01 << 1);
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET){	// If channel B is high level, bit no. 0 is set
 80046aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046ae:	4811      	ldr	r0, [pc, #68]	; (80046f4 <read_encoder+0x78>)
 80046b0:	f7fc fab8 	bl	8000c24 <HAL_GPIO_ReadPin>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d103      	bne.n	80046c2 <read_encoder+0x46>
		encAB = encAB | (0x01 << 0);
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	71fb      	strb	r3, [r7, #7]
	}
	old_AB = (old_AB | ( encAB & 0x03 ));  		//add current state without deleting previous state
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	b25a      	sxtb	r2, r3
 80046cc:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <read_encoder+0x74>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <read_encoder+0x74>)
 80046da:	701a      	strb	r2, [r3, #0]
	return ( enc_states[( old_AB & 0x0f )]);	//Pick out the corresponding element in the LUT
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <read_encoder+0x74>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <read_encoder+0x7c>)
 80046e6:	56d3      	ldrsb	r3, [r2, r3]
		}
		EncTurn = -1;
	}

	return EncTurn;*/
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	200000a0 	.word	0x200000a0
 80046f4:	40020000 	.word	0x40020000
 80046f8:	2000000c 	.word	0x2000000c

080046fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b0ac      	sub	sp, #176	; 0xb0
 8004700:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004702:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004706:	2234      	movs	r2, #52	; 0x34
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f000 ff94 	bl	8005638 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004710:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004720:	f107 030c 	add.w	r3, r7, #12
 8004724:	225c      	movs	r2, #92	; 0x5c
 8004726:	2100      	movs	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f000 ff85 	bl	8005638 <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	4a38      	ldr	r2, [pc, #224]	; (8004814 <SystemClock_Config+0x118>)
 8004734:	4b37      	ldr	r3, [pc, #220]	; (8004814 <SystemClock_Config+0x118>)
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	; 0x40
 800473e:	4b35      	ldr	r3, [pc, #212]	; (8004814 <SystemClock_Config+0x118>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	4a32      	ldr	r2, [pc, #200]	; (8004818 <SystemClock_Config+0x11c>)
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <SystemClock_Config+0x11c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <SystemClock_Config+0x11c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800476a:	2306      	movs	r3, #6
 800476c:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800476e:	2301      	movs	r3, #1
 8004770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004774:	2301      	movs	r3, #1
 8004776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800477a:	2310      	movs	r3, #16
 800477c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004780:	2302      	movs	r3, #2
 8004782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 16;
 800478c:	2310      	movs	r3, #16
 800478e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8004792:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800479a:	2304      	movs	r3, #4
 800479c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80047a0:	2302      	movs	r3, #2
 80047a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80047a6:	2302      	movs	r3, #2
 80047a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fc67 	bl	8002084 <HAL_RCC_OscConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80047bc:	f000 fc79 	bl	80050b2 <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047c0:	230f      	movs	r3, #15
 80047c2:	66bb      	str	r3, [r7, #104]	; 0x68
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047c4:	2302      	movs	r3, #2
 80047c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047c8:	2300      	movs	r3, #0
 80047ca:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80047cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047d0:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047d2:	2300      	movs	r3, #0
 80047d4:	67bb      	str	r3, [r7, #120]	; 0x78

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80047d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fc fe5b 	bl	8001498 <HAL_RCC_ClockConfig>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <SystemClock_Config+0xf0>
	{
		Error_Handler();
 80047e8:	f000 fc63 	bl	80050b2 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047ec:	2320      	movs	r3, #32
 80047ee:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80047f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc ff62 	bl	80016c4 <HAL_RCCEx_PeriphCLKConfig>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <SystemClock_Config+0x10e>
	{
		Error_Handler();
 8004806:	f000 fc54 	bl	80050b2 <Error_Handler>
	}
}
 800480a:	bf00      	nop
 800480c:	37b0      	adds	r7, #176	; 0xb0
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	40007000 	.word	0x40007000

0800481c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <MX_I2C1_Init+0x50>)
 8004822:	4a13      	ldr	r2, [pc, #76]	; (8004870 <MX_I2C1_Init+0x54>)
 8004824:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <MX_I2C1_Init+0x50>)
 8004828:	4a12      	ldr	r2, [pc, #72]	; (8004874 <MX_I2C1_Init+0x58>)
 800482a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <MX_I2C1_Init+0x50>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <MX_I2C1_Init+0x50>)
 8004834:	2200      	movs	r2, #0
 8004836:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <MX_I2C1_Init+0x50>)
 800483a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800483e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <MX_I2C1_Init+0x50>)
 8004842:	2200      	movs	r2, #0
 8004844:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <MX_I2C1_Init+0x50>)
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <MX_I2C1_Init+0x50>)
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <MX_I2C1_Init+0x50>)
 8004854:	2200      	movs	r2, #0
 8004856:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004858:	4804      	ldr	r0, [pc, #16]	; (800486c <MX_I2C1_Init+0x50>)
 800485a:	f7fc fa4b 	bl	8000cf4 <HAL_I2C_Init>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8004864:	f000 fc25 	bl	80050b2 <Error_Handler>
	}
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000160 	.word	0x20000160
 8004870:	40005400 	.word	0x40005400
 8004874:	000186a0 	.word	0x000186a0

08004878 <menu_print_cursor>:
 * zeilenumer 1, 2 oder  3 den Pfeil im 2 und 3 Feld  auf der 1. 3. oder 4. Zeile aus.
 * @param Gewuenschte Position
 * @retval None
 */
void menu_print_cursor (int linenumber)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	switch(linenumber){
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	2b03      	cmp	r3, #3
 8004886:	d87f      	bhi.n	8004988 <menu_print_cursor+0x110>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <menu_print_cursor+0x18>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048db 	.word	0x080048db
 8004898:	08004915 	.word	0x08004915
 800489c:	0800494f 	.word	0x0800494f
	case 1:
		cursor_jumpto_r_c (2, 2);
 80048a0:	2102      	movs	r1, #2
 80048a2:	2002      	movs	r0, #2
 80048a4:	f7ff fa9a 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 80048a8:	2002      	movs	r0, #2
 80048aa:	f7ff fae7 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (3, 2);
 80048ae:	2102      	movs	r1, #2
 80048b0:	2003      	movs	r0, #3
 80048b2:	f7ff fa93 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 80048b6:	2002      	movs	r0, #2
 80048b8:	f7ff fae0 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (4, 2);
 80048bc:	2102      	movs	r1, #2
 80048be:	2004      	movs	r0, #4
 80048c0:	f7ff fa8c 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 80048c4:	2002      	movs	r0, #2
 80048c6:	f7ff fad9 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (1, 2);
 80048ca:	2102      	movs	r1, #2
 80048cc:	2001      	movs	r0, #1
 80048ce:	f7ff fa85 	bl	8003ddc <cursor_jumpto_r_c>
		lcd_send_string("->");
 80048d2:	482f      	ldr	r0, [pc, #188]	; (8004990 <menu_print_cursor+0x118>)
 80048d4:	f7ff fa6e 	bl	8003db4 <lcd_send_string>
		break;
 80048d8:	e056      	b.n	8004988 <menu_print_cursor+0x110>
	case 2:
		cursor_jumpto_r_c (1, 2);
 80048da:	2102      	movs	r1, #2
 80048dc:	2001      	movs	r0, #1
 80048de:	f7ff fa7d 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 80048e2:	2002      	movs	r0, #2
 80048e4:	f7ff faca 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (3, 2);
 80048e8:	2102      	movs	r1, #2
 80048ea:	2003      	movs	r0, #3
 80048ec:	f7ff fa76 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 80048f0:	2002      	movs	r0, #2
 80048f2:	f7ff fac3 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (4, 2);
 80048f6:	2102      	movs	r1, #2
 80048f8:	2004      	movs	r0, #4
 80048fa:	f7ff fa6f 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 80048fe:	2002      	movs	r0, #2
 8004900:	f7ff fabc 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (2, 2);
 8004904:	2102      	movs	r1, #2
 8004906:	2002      	movs	r0, #2
 8004908:	f7ff fa68 	bl	8003ddc <cursor_jumpto_r_c>
		lcd_send_string("->");
 800490c:	4820      	ldr	r0, [pc, #128]	; (8004990 <menu_print_cursor+0x118>)
 800490e:	f7ff fa51 	bl	8003db4 <lcd_send_string>
		break;
 8004912:	e039      	b.n	8004988 <menu_print_cursor+0x110>
	case 3:
		cursor_jumpto_r_c (1, 2);
 8004914:	2102      	movs	r1, #2
 8004916:	2001      	movs	r0, #1
 8004918:	f7ff fa60 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 800491c:	2002      	movs	r0, #2
 800491e:	f7ff faad 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (2, 2);
 8004922:	2102      	movs	r1, #2
 8004924:	2002      	movs	r0, #2
 8004926:	f7ff fa59 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 800492a:	2002      	movs	r0, #2
 800492c:	f7ff faa6 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (4, 2);
 8004930:	2102      	movs	r1, #2
 8004932:	2004      	movs	r0, #4
 8004934:	f7ff fa52 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 8004938:	2002      	movs	r0, #2
 800493a:	f7ff fa9f 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (3, 2);
 800493e:	2102      	movs	r1, #2
 8004940:	2003      	movs	r0, #3
 8004942:	f7ff fa4b 	bl	8003ddc <cursor_jumpto_r_c>
		lcd_send_string("->");
 8004946:	4812      	ldr	r0, [pc, #72]	; (8004990 <menu_print_cursor+0x118>)
 8004948:	f7ff fa34 	bl	8003db4 <lcd_send_string>
		break;
 800494c:	e01c      	b.n	8004988 <menu_print_cursor+0x110>
	case 4:
		cursor_jumpto_r_c (1, 2);
 800494e:	2102      	movs	r1, #2
 8004950:	2001      	movs	r0, #1
 8004952:	f7ff fa43 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 8004956:	2002      	movs	r0, #2
 8004958:	f7ff fa90 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (2, 2);
 800495c:	2102      	movs	r1, #2
 800495e:	2002      	movs	r0, #2
 8004960:	f7ff fa3c 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 8004964:	2002      	movs	r0, #2
 8004966:	f7ff fa89 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (3, 2);
 800496a:	2102      	movs	r1, #2
 800496c:	2003      	movs	r0, #3
 800496e:	f7ff fa35 	bl	8003ddc <cursor_jumpto_r_c>
		delete_some_chars(2);
 8004972:	2002      	movs	r0, #2
 8004974:	f7ff fa82 	bl	8003e7c <delete_some_chars>
		cursor_jumpto_r_c (4, 2);
 8004978:	2102      	movs	r1, #2
 800497a:	2004      	movs	r0, #4
 800497c:	f7ff fa2e 	bl	8003ddc <cursor_jumpto_r_c>
		lcd_send_string("->");
 8004980:	4803      	ldr	r0, [pc, #12]	; (8004990 <menu_print_cursor+0x118>)
 8004982:	f7ff fa17 	bl	8003db4 <lcd_send_string>
		break;
 8004986:	bf00      	nop
	}
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08005eb8 	.word	0x08005eb8

08004994 <menu_print_text>:
 * @param None
 * @retval None
 */

void menu_print_text (void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
	cursor_jumpto_r_c(1, 5);
 8004998:	2105      	movs	r1, #5
 800499a:	2001      	movs	r0, #1
 800499c:	f7ff fa1e 	bl	8003ddc <cursor_jumpto_r_c>
	lcd_send_string("running...");
 80049a0:	480c      	ldr	r0, [pc, #48]	; (80049d4 <menu_print_text+0x40>)
 80049a2:	f7ff fa07 	bl	8003db4 <lcd_send_string>

	cursor_jumpto_r_c(2, 5);
 80049a6:	2105      	movs	r1, #5
 80049a8:	2002      	movs	r0, #2
 80049aa:	f7ff fa17 	bl	8003ddc <cursor_jumpto_r_c>
	lcd_send_string("TIME");
 80049ae:	480a      	ldr	r0, [pc, #40]	; (80049d8 <menu_print_text+0x44>)
 80049b0:	f7ff fa00 	bl	8003db4 <lcd_send_string>

	cursor_jumpto_r_c(3, 5);
 80049b4:	2105      	movs	r1, #5
 80049b6:	2003      	movs	r0, #3
 80049b8:	f7ff fa10 	bl	8003ddc <cursor_jumpto_r_c>
	lcd_send_string("SUNRISE");
 80049bc:	4807      	ldr	r0, [pc, #28]	; (80049dc <menu_print_text+0x48>)
 80049be:	f7ff f9f9 	bl	8003db4 <lcd_send_string>

	cursor_jumpto_r_c(4, 5);
 80049c2:	2105      	movs	r1, #5
 80049c4:	2004      	movs	r0, #4
 80049c6:	f7ff fa09 	bl	8003ddc <cursor_jumpto_r_c>
	lcd_send_string("SUNSET");
 80049ca:	4805      	ldr	r0, [pc, #20]	; (80049e0 <menu_print_text+0x4c>)
 80049cc:	f7ff f9f2 	bl	8003db4 <lcd_send_string>
}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	08005ebc 	.word	0x08005ebc
 80049d8:	08005ec8 	.word	0x08005ec8
 80049dc:	08005ed0 	.word	0x08005ed0
 80049e0:	08005ed8 	.word	0x08005ed8

080049e4 <menu_print_time>:
 *  -Eingestellte Startzeit Abend (time_pm)
 *  @retval None
 */

void menu_print_time (uint8_t HoursSunrise, uint8_t MinutesSunrise,uint8_t HoursSunset, uint8_t MinutesSunset)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4623      	mov	r3, r4
 80049f4:	71fb      	strb	r3, [r7, #7]
 80049f6:	4603      	mov	r3, r0
 80049f8:	71bb      	strb	r3, [r7, #6]
 80049fa:	460b      	mov	r3, r1
 80049fc:	717b      	strb	r3, [r7, #5]
 80049fe:	4613      	mov	r3, r2
 8004a00:	713b      	strb	r3, [r7, #4]
	char sunrise[5];
	sprintf(sunrise, "%02d:%02d",HoursSunrise,MinutesSunrise);
 8004a02:	79fa      	ldrb	r2, [r7, #7]
 8004a04:	79bb      	ldrb	r3, [r7, #6]
 8004a06:	f107 0018 	add.w	r0, r7, #24
 8004a0a:	491a      	ldr	r1, [pc, #104]	; (8004a74 <menu_print_time+0x90>)
 8004a0c:	f000 fe1c 	bl	8005648 <siprintf>
	cursor_jumpto_r_c(3, 15);
 8004a10:	210f      	movs	r1, #15
 8004a12:	2003      	movs	r0, #3
 8004a14:	f7ff f9e2 	bl	8003ddc <cursor_jumpto_r_c>
	//delete_some_chars(5);
	lcd_send_string(&sunrise);
 8004a18:	f107 0318 	add.w	r3, r7, #24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f9c9 	bl	8003db4 <lcd_send_string>

	char sunset[5];
	sprintf(sunset, "%02d:%02d",HoursSunset,MinutesSunset);
 8004a22:	797a      	ldrb	r2, [r7, #5]
 8004a24:	793b      	ldrb	r3, [r7, #4]
 8004a26:	f107 0010 	add.w	r0, r7, #16
 8004a2a:	4912      	ldr	r1, [pc, #72]	; (8004a74 <menu_print_time+0x90>)
 8004a2c:	f000 fe0c 	bl	8005648 <siprintf>
	cursor_jumpto_r_c(4, 15);
 8004a30:	210f      	movs	r1, #15
 8004a32:	2004      	movs	r0, #4
 8004a34:	f7ff f9d2 	bl	8003ddc <cursor_jumpto_r_c>
	//delete_some_chars(5);
	lcd_send_string(&sunset);
 8004a38:	f107 0310 	add.w	r3, r7, #16
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff f9b9 	bl	8003db4 <lcd_send_string>


	RTC_get_Time_and_Date();
 8004a42:	f7ff fe07 	bl	8004654 <RTC_get_Time_and_Date>

	char realtime[5];
	sprintf(realtime, "%02d:%02d",myTime.Hours,myTime.Minutes);
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <menu_print_time+0x94>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <menu_print_time+0x94>)
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	f107 0008 	add.w	r0, r7, #8
 8004a54:	4907      	ldr	r1, [pc, #28]	; (8004a74 <menu_print_time+0x90>)
 8004a56:	f000 fdf7 	bl	8005648 <siprintf>
	cursor_jumpto_r_c(2, 15);
 8004a5a:	210f      	movs	r1, #15
 8004a5c:	2002      	movs	r0, #2
 8004a5e:	f7ff f9bd 	bl	8003ddc <cursor_jumpto_r_c>
	//delete_some_chars(5);
	lcd_send_string(&realtime);
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f9a4 	bl	8003db4 <lcd_send_string>
}
 8004a6c:	bf00      	nop
 8004a6e:	3724      	adds	r7, #36	; 0x24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd90      	pop	{r4, r7, pc}
 8004a74:	08005ee0 	.word	0x08005ee0
 8004a78:	200000d4 	.word	0x200000d4

08004a7c <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b090      	sub	sp, #64	; 0x40
 8004a80:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef sTime = {0};
 8004a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	605a      	str	r2, [r3, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
 8004a8e:	60da      	str	r2, [r3, #12]
 8004a90:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8004a92:	2300      	movs	r3, #0
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = {0};
 8004a96:	463b      	mov	r3, r7
 8004a98:	2228      	movs	r2, #40	; 0x28
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fdcb 	bl	8005638 <memset>

	/**Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8004aa2:	4b3a      	ldr	r3, [pc, #232]	; (8004b8c <MX_RTC_Init+0x110>)
 8004aa4:	4a3a      	ldr	r2, [pc, #232]	; (8004b90 <MX_RTC_Init+0x114>)
 8004aa6:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004aa8:	4b38      	ldr	r3, [pc, #224]	; (8004b8c <MX_RTC_Init+0x110>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8004aae:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <MX_RTC_Init+0x110>)
 8004ab0:	227f      	movs	r2, #127	; 0x7f
 8004ab2:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8004ab4:	4b35      	ldr	r3, [pc, #212]	; (8004b8c <MX_RTC_Init+0x110>)
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004aba:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <MX_RTC_Init+0x110>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004ac0:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <MX_RTC_Init+0x110>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <MX_RTC_Init+0x110>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004acc:	482f      	ldr	r0, [pc, #188]	; (8004b8c <MX_RTC_Init+0x110>)
 8004ace:	f7fd fd33 	bl	8002538 <HAL_RTC_Init>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <MX_RTC_Init+0x60>
	{
		Error_Handler();
 8004ad8:	f000 faeb 	bl	80050b2 <Error_Handler>
	}

	/**Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004afa:	2201      	movs	r2, #1
 8004afc:	4619      	mov	r1, r3
 8004afe:	4823      	ldr	r0, [pc, #140]	; (8004b8c <MX_RTC_Init+0x110>)
 8004b00:	f7fd fdab 	bl	800265a <HAL_RTC_SetTime>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <MX_RTC_Init+0x92>
	{
		Error_Handler();
 8004b0a:	f000 fad2 	bl	80050b2 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_JANUARY;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 0x18;
 8004b20:	2318      	movs	r3, #24
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4817      	ldr	r0, [pc, #92]	; (8004b8c <MX_RTC_Init+0x110>)
 8004b30:	f7fd feb6 	bl	80028a0 <HAL_RTC_SetDate>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <MX_RTC_Init+0xc2>
	{
		Error_Handler();
 8004b3a:	f000 faba 	bl	80050b2 <Error_Handler>
	}
	/**Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8004b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004b6e:	463b      	mov	r3, r7
 8004b70:	2201      	movs	r2, #1
 8004b72:	4619      	mov	r1, r3
 8004b74:	4805      	ldr	r0, [pc, #20]	; (8004b8c <MX_RTC_Init+0x110>)
 8004b76:	f7fd ff89 	bl	8002a8c <HAL_RTC_SetAlarm_IT>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_RTC_Init+0x108>
	{
		Error_Handler();
 8004b80:	f000 fa97 	bl	80050b2 <Error_Handler>
	}


}
 8004b84:	bf00      	nop
 8004b86:	3740      	adds	r7, #64	; 0x40
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	2000021c 	.word	0x2000021c
 8004b90:	40002800 	.word	0x40002800

08004b94 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM2_Init(int brightness)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	; 0x30
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	611a      	str	r2, [r3, #16]
 8004bb6:	615a      	str	r2, [r3, #20]
 8004bb8:	619a      	str	r2, [r3, #24]

	htim2.Instance = TIM2;
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bc0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84;
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004bc4:	2254      	movs	r2, #84	; 0x54
 8004bc6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bd4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd6:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004bdc:	481a      	ldr	r0, [pc, #104]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004bde:	f7fe f993 	bl	8002f08 <HAL_TIM_PWM_Init>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8004be8:	f000 fa63 	bl	80050b2 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4813      	ldr	r0, [pc, #76]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004bfc:	f7fe fd3c 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <MX_TIM2_Init+0x76>
	{
		Error_Handler();
 8004c06:	f000 fa54 	bl	80050b2 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c0a:	2360      	movs	r3, #96	; 0x60
 8004c0c:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = brightness;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c1a:	f107 030c 	add.w	r3, r7, #12
 8004c1e:	2208      	movs	r2, #8
 8004c20:	4619      	mov	r1, r3
 8004c22:	4809      	ldr	r0, [pc, #36]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004c24:	f7fe f9d0 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 8004c2e:	f000 fa40 	bl	80050b2 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8004c32:	2108      	movs	r1, #8
 8004c34:	4804      	ldr	r0, [pc, #16]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004c36:	f7fe f993 	bl	8002f60 <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim2);
 8004c3a:	4803      	ldr	r0, [pc, #12]	; (8004c48 <MX_TIM2_Init+0xb4>)
 8004c3c:	f000 fb2e 	bl	800529c <HAL_TIM_MspPostInit>

}
 8004c40:	bf00      	nop
 8004c42:	3730      	adds	r7, #48	; 0x30
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2000023c 	.word	0x2000023c

08004c4c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM3_Init(int duty)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004c5e:	f107 030c 	add.w	r3, r7, #12
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	615a      	str	r2, [r3, #20]
 8004c70:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004c74:	4a23      	ldr	r2, [pc, #140]	; (8004d04 <MX_TIM3_Init+0xb8>)
 8004c76:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84;
 8004c78:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004c7a:	2254      	movs	r2, #84	; 0x54
 8004c7c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8004c84:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c8a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c8c:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c92:	481b      	ldr	r0, [pc, #108]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004c94:	f7fe f938 	bl	8002f08 <HAL_TIM_PWM_Init>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <MX_TIM3_Init+0x56>
	{
		Error_Handler();
 8004c9e:	f000 fa08 	bl	80050b2 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4813      	ldr	r0, [pc, #76]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004cb2:	f7fe fce1 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_TIM3_Init+0x74>
	{
		Error_Handler();
 8004cbc:	f000 f9f9 	bl	80050b2 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cc0:	2360      	movs	r3, #96	; 0x60
 8004cc2:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = duty;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4809      	ldr	r0, [pc, #36]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004cda:	f7fe f975 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8004ce4:	f000 f9e5 	bl	80050b2 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8004ce8:	2104      	movs	r1, #4
 8004cea:	4805      	ldr	r0, [pc, #20]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004cec:	f7fe f938 	bl	8002f60 <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim3);
 8004cf0:	4803      	ldr	r0, [pc, #12]	; (8004d00 <MX_TIM3_Init+0xb4>)
 8004cf2:	f000 fad3 	bl	800529c <HAL_TIM_MspPostInit>

}
 8004cf6:	bf00      	nop
 8004cf8:	3730      	adds	r7, #48	; 0x30
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	200001b4 	.word	0x200001b4
 8004d04:	40000400 	.word	0x40000400

08004d08 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM4_Init(int duty)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	; 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	611a      	str	r2, [r3, #16]
 8004d2a:	615a      	str	r2, [r3, #20]
 8004d2c:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d30:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <MX_TIM4_Init+0xb8>)
 8004d32:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84;
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d36:	2254      	movs	r2, #84	; 0x54
 8004d38:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d46:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004d4e:	481b      	ldr	r0, [pc, #108]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d50:	f7fe f8da 	bl	8002f08 <HAL_TIM_PWM_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_TIM4_Init+0x56>
	{
		Error_Handler();
 8004d5a:	f000 f9aa 	bl	80050b2 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4813      	ldr	r0, [pc, #76]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d6e:	f7fe fc83 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <MX_TIM4_Init+0x74>
	{
		Error_Handler();
 8004d78:	f000 f99b 	bl	80050b2 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d7c:	2360      	movs	r3, #96	; 0x60
 8004d7e:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = duty;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d8c:	f107 030c 	add.w	r3, r7, #12
 8004d90:	2200      	movs	r2, #0
 8004d92:	4619      	mov	r1, r3
 8004d94:	4809      	ldr	r0, [pc, #36]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004d96:	f7fe f917 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM4_Init+0x9c>
	{
		Error_Handler();
 8004da0:	f000 f987 	bl	80050b2 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8004da4:	2100      	movs	r1, #0
 8004da6:	4805      	ldr	r0, [pc, #20]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004da8:	f7fe f8da 	bl	8002f60 <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim4);
 8004dac:	4803      	ldr	r0, [pc, #12]	; (8004dbc <MX_TIM4_Init+0xb4>)
 8004dae:	f000 fa75 	bl	800529c <HAL_TIM_MspPostInit>

}
 8004db2:	bf00      	nop
 8004db4:	3730      	adds	r7, #48	; 0x30
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000124 	.word	0x20000124
 8004dc0:	40000800 	.word	0x40000800

08004dc4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
static void MX_TIM8_Init(int duty)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b092      	sub	sp, #72	; 0x48
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	60da      	str	r2, [r3, #12]
 8004de4:	611a      	str	r2, [r3, #16]
 8004de6:	615a      	str	r2, [r3, #20]
 8004de8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	609a      	str	r2, [r3, #8]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	611a      	str	r2, [r3, #16]
 8004dfa:	615a      	str	r2, [r3, #20]
 8004dfc:	619a      	str	r2, [r3, #24]

	htim8.Instance = TIM8;
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e00:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <MX_TIM8_Init+0x110>)
 8004e02:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 84;
 8004e04:	4b32      	ldr	r3, [pc, #200]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e06:	2254      	movs	r2, #84	; 0x54
 8004e08:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1000;
 8004e10:	4b2f      	ldr	r3, [pc, #188]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e16:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e18:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004e1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004e24:	482a      	ldr	r0, [pc, #168]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e26:	f7fe f86f 	bl	8002f08 <HAL_TIM_PWM_Init>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <MX_TIM8_Init+0x70>
	{
		Error_Handler();
 8004e30:	f000 f93f 	bl	80050b2 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e34:	2300      	movs	r3, #0
 8004e36:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004e3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e40:	4619      	mov	r1, r3
 8004e42:	4823      	ldr	r0, [pc, #140]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e44:	f7fe fc18 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_TIM8_Init+0x8e>
	{
		Error_Handler();
 8004e4e:	f000 f930 	bl	80050b2 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e52:	2360      	movs	r3, #96	; 0x60
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = duty;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e66:	2300      	movs	r3, #0
 8004e68:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e72:	2204      	movs	r2, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4816      	ldr	r0, [pc, #88]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004e78:	f7fe f8a6 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_TIM8_Init+0xc2>
	{
		Error_Handler();
 8004e82:	f000 f916 	bl	80050b2 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e9e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004ea4:	f107 0308 	add.w	r3, r7, #8
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4809      	ldr	r0, [pc, #36]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004eac:	f7fe fc29 	bl	8003702 <HAL_TIMEx_ConfigBreakDeadTime>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <MX_TIM8_Init+0xf6>
	{
		Error_Handler();
 8004eb6:	f000 f8fc 	bl	80050b2 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8004eba:	2104      	movs	r1, #4
 8004ebc:	4804      	ldr	r0, [pc, #16]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004ebe:	f7fe f84f 	bl	8002f60 <HAL_TIM_PWM_Start>
	HAL_TIM_MspPostInit(&htim8);
 8004ec2:	4803      	ldr	r0, [pc, #12]	; (8004ed0 <MX_TIM8_Init+0x10c>)
 8004ec4:	f000 f9ea 	bl	800529c <HAL_TIM_MspPostInit>

}
 8004ec8:	bf00      	nop
 8004eca:	3748      	adds	r7, #72	; 0x48
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	200000e8 	.word	0x200000e8
 8004ed4:	40010400 	.word	0x40010400

08004ed8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004ede:	4a12      	ldr	r2, [pc, #72]	; (8004f28 <MX_USART2_UART_Init+0x50>)
 8004ee0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ee8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004eea:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004efe:	220c      	movs	r2, #12
 8004f00:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f0e:	4805      	ldr	r0, [pc, #20]	; (8004f24 <MX_USART2_UART_Init+0x4c>)
 8004f10:	f7fe fc50 	bl	80037b4 <HAL_UART_Init>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8004f1a:	f000 f8ca 	bl	80050b2 <Error_Handler>
	}
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000278 	.word	0x20000278
 8004f28:	40004400 	.word	0x40004400

08004f2c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
 8004f3e:	60da      	str	r2, [r3, #12]
 8004f40:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	4a4f      	ldr	r2, [pc, #316]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f48:	4b4e      	ldr	r3, [pc, #312]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b4c      	ldr	r3, [pc, #304]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4a48      	ldr	r2, [pc, #288]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f64:	4b47      	ldr	r3, [pc, #284]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6e:	4b45      	ldr	r3, [pc, #276]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	4a41      	ldr	r2, [pc, #260]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f80:	4b40      	ldr	r3, [pc, #256]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b3e      	ldr	r3, [pc, #248]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	4a3a      	ldr	r2, [pc, #232]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <MX_GPIO_Init+0x158>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b37      	ldr	r3, [pc, #220]	; (8005084 <MX_GPIO_Init+0x158>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2160      	movs	r1, #96	; 0x60
 8004fb6:	4834      	ldr	r0, [pc, #208]	; (8005088 <MX_GPIO_Init+0x15c>)
 8004fb8:	f7fb fe4c 	bl	8000c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2120      	movs	r1, #32
 8004fc0:	4832      	ldr	r0, [pc, #200]	; (800508c <MX_GPIO_Init+0x160>)
 8004fc2:	f7fb fe47 	bl	8000c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8004fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <MX_GPIO_Init+0x164>)
 8004fce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	4619      	mov	r1, r3
 8004fda:	482e      	ldr	r0, [pc, #184]	; (8005094 <MX_GPIO_Init+0x168>)
 8004fdc:	f7fb fc90 	bl	8000900 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC1 : Push button in*/
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fe4:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <MX_GPIO_Init+0x16c>)
 8004fe6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4828      	ldr	r0, [pc, #160]	; (8005094 <MX_GPIO_Init+0x168>)
 8004ff4:	f7fb fc84 	bl	8000900 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_10;
 8004ff8:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8004ffc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ffe:	2301      	movs	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005002:	2301      	movs	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005006:	2300      	movs	r3, #0
 8005008:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	4619      	mov	r1, r3
 8005010:	481d      	ldr	r0, [pc, #116]	; (8005088 <MX_GPIO_Init+0x15c>)
 8005012:	f7fb fc75 	bl	8000900 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800501a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800501c:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <MX_GPIO_Init+0x16c>)
 800501e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005020:	2301      	movs	r3, #1
 8005022:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	4619      	mov	r1, r3
 800502a:	4817      	ldr	r0, [pc, #92]	; (8005088 <MX_GPIO_Init+0x15c>)
 800502c:	f7fb fc68 	bl	8000900 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005030:	2320      	movs	r3, #32
 8005032:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005034:	2301      	movs	r3, #1
 8005036:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503c:	2300      	movs	r3, #0
 800503e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	4619      	mov	r1, r3
 8005046:	4811      	ldr	r0, [pc, #68]	; (800508c <MX_GPIO_Init+0x160>)
 8005048:	f7fb fc5a 	bl	8000900 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800504c:	2200      	movs	r2, #0
 800504e:	2100      	movs	r1, #0
 8005050:	2007      	movs	r0, #7
 8005052:	f7fb fc1e 	bl	8000892 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005056:	2007      	movs	r0, #7
 8005058:	f7fb fc37 	bl	80008ca <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800505c:	2200      	movs	r2, #0
 800505e:	2100      	movs	r1, #0
 8005060:	2017      	movs	r0, #23
 8005062:	f7fb fc16 	bl	8000892 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005066:	2017      	movs	r0, #23
 8005068:	f7fb fc2f 	bl	80008ca <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	2100      	movs	r1, #0
 8005070:	2028      	movs	r0, #40	; 0x28
 8005072:	f7fb fc0e 	bl	8000892 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005076:	2028      	movs	r0, #40	; 0x28
 8005078:	f7fb fc27 	bl	80008ca <HAL_NVIC_EnableIRQ>
}
 800507c:	bf00      	nop
 800507e:	3728      	adds	r7, #40	; 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	40020000 	.word	0x40020000
 800508c:	40020400 	.word	0x40020400
 8005090:	10210000 	.word	0x10210000
 8005094:	40020800 	.word	0x40020800
 8005098:	10110000 	.word	0x10110000

0800509c <set_FL>:
 * @brief Adjust brightness of fluorescent lamp
 * @param Duty cycle in percentage (value between 0 and 100)
 * @retval None
 */
void set_FL(int brightness)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	MX_TIM2_Init(brightness);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fd75 	bl	8004b94 <MX_TIM2_Init>
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* USER CODE END Error_Handler_Debug */
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	4a10      	ldr	r2, [pc, #64]	; (800510c <HAL_MspInit+0x4c>)
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <HAL_MspInit+0x4c>)
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d4:	6453      	str	r3, [r2, #68]	; 0x44
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <HAL_MspInit+0x4c>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4a09      	ldr	r2, [pc, #36]	; (800510c <HAL_MspInit+0x4c>)
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <HAL_MspInit+0x4c>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f0:	6413      	str	r3, [r2, #64]	; 0x40
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_MspInit+0x4c>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80050fe:	2007      	movs	r0, #7
 8005100:	f7fb fbbc 	bl	800087c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800

08005110 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a19      	ldr	r2, [pc, #100]	; (8005194 <HAL_I2C_MspInit+0x84>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d12c      	bne.n	800518c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <HAL_I2C_MspInit+0x88>)
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <HAL_I2C_MspInit+0x88>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	f043 0302 	orr.w	r3, r3, #2
 8005140:	6313      	str	r3, [r2, #48]	; 0x30
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <HAL_I2C_MspInit+0x88>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800514e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005154:	2312      	movs	r3, #18
 8005156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005158:	2301      	movs	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515c:	2303      	movs	r3, #3
 800515e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005160:	2304      	movs	r3, #4
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	4619      	mov	r1, r3
 800516a:	480c      	ldr	r0, [pc, #48]	; (800519c <HAL_I2C_MspInit+0x8c>)
 800516c:	f7fb fbc8 	bl	8000900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	4a08      	ldr	r2, [pc, #32]	; (8005198 <HAL_I2C_MspInit+0x88>)
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <HAL_I2C_MspInit+0x88>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800517e:	6413      	str	r3, [r2, #64]	; 0x40
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_I2C_MspInit+0x88>)
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800518c:	bf00      	nop
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40005400 	.word	0x40005400
 8005198:	40023800 	.word	0x40023800
 800519c:	40020400 	.word	0x40020400

080051a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <HAL_RTC_MspInit+0x30>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10a      	bne.n	80051c8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <HAL_RTC_MspInit+0x34>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80051b8:	2200      	movs	r2, #0
 80051ba:	2100      	movs	r1, #0
 80051bc:	2029      	movs	r0, #41	; 0x29
 80051be:	f7fb fb68 	bl	8000892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80051c2:	2029      	movs	r0, #41	; 0x29
 80051c4:	f7fb fb81 	bl	80008ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40002800 	.word	0x40002800
 80051d4:	42470e3c 	.word	0x42470e3c

080051d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	4a27      	ldr	r2, [pc, #156]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 80051f0:	4b26      	ldr	r3, [pc, #152]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	6413      	str	r3, [r2, #64]	; 0x40
 80051fa:	4b24      	ldr	r3, [pc, #144]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005206:	e03a      	b.n	800527e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <HAL_TIM_PWM_MspInit+0xb8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10e      	bne.n	8005230 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	4a1d      	ldr	r2, [pc, #116]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	6413      	str	r3, [r2, #64]	; 0x40
 8005222:	4b1a      	ldr	r3, [pc, #104]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
}
 800522e:	e026      	b.n	800527e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a17      	ldr	r2, [pc, #92]	; (8005294 <HAL_TIM_PWM_MspInit+0xbc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10e      	bne.n	8005258 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	4a13      	ldr	r2, [pc, #76]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f043 0304 	orr.w	r3, r3, #4
 8005248:	6413      	str	r3, [r2, #64]	; 0x40
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
}
 8005256:	e012      	b.n	800527e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <HAL_TIM_PWM_MspInit+0xc0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10d      	bne.n	800527e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	6453      	str	r3, [r2, #68]	; 0x44
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_TIM_PWM_MspInit+0xb4>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40010400 	.word	0x40010400

0800529c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a4:	f107 031c 	add.w	r3, r7, #28
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052bc:	d11f      	bne.n	80052fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	4a46      	ldr	r2, [pc, #280]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 80052c4:	4b45      	ldr	r3, [pc, #276]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	6313      	str	r3, [r2, #48]	; 0x30
 80052ce:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e0:	2302      	movs	r3, #2
 80052e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052ec:	2301      	movs	r3, #1
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f0:	f107 031c 	add.w	r3, r7, #28
 80052f4:	4619      	mov	r1, r3
 80052f6:	483a      	ldr	r0, [pc, #232]	; (80053e0 <HAL_TIM_MspPostInit+0x144>)
 80052f8:	f7fb fb02 	bl	8000900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80052fc:	e06a      	b.n	80053d4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a38      	ldr	r2, [pc, #224]	; (80053e4 <HAL_TIM_MspPostInit+0x148>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d11e      	bne.n	8005346 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	4a33      	ldr	r2, [pc, #204]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 800530e:	4b33      	ldr	r3, [pc, #204]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6313      	str	r3, [r2, #48]	; 0x30
 8005318:	4b30      	ldr	r3, [pc, #192]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005328:	2302      	movs	r3, #2
 800532a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	2300      	movs	r3, #0
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005330:	2300      	movs	r3, #0
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005334:	2302      	movs	r3, #2
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005338:	f107 031c 	add.w	r3, r7, #28
 800533c:	4619      	mov	r1, r3
 800533e:	482a      	ldr	r0, [pc, #168]	; (80053e8 <HAL_TIM_MspPostInit+0x14c>)
 8005340:	f7fb fade 	bl	8000900 <HAL_GPIO_Init>
}
 8005344:	e046      	b.n	80053d4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a28      	ldr	r2, [pc, #160]	; (80053ec <HAL_TIM_MspPostInit+0x150>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d11e      	bne.n	800538e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 8005356:	4b21      	ldr	r3, [pc, #132]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f043 0302 	orr.w	r3, r3, #2
 800535e:	6313      	str	r3, [r2, #48]	; 0x30
 8005360:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800536c:	2340      	movs	r3, #64	; 0x40
 800536e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005370:	2302      	movs	r3, #2
 8005372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005378:	2300      	movs	r3, #0
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800537c:	2302      	movs	r3, #2
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005380:	f107 031c 	add.w	r3, r7, #28
 8005384:	4619      	mov	r1, r3
 8005386:	4816      	ldr	r0, [pc, #88]	; (80053e0 <HAL_TIM_MspPostInit+0x144>)
 8005388:	f7fb faba 	bl	8000900 <HAL_GPIO_Init>
}
 800538c:	e022      	b.n	80053d4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <HAL_TIM_MspPostInit+0x154>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d11d      	bne.n	80053d4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	4a0f      	ldr	r2, [pc, #60]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f043 0304 	orr.w	r3, r3, #4
 80053a6:	6313      	str	r3, [r2, #48]	; 0x30
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <HAL_TIM_MspPostInit+0x140>)
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b8:	2302      	movs	r3, #2
 80053ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053c4:	2303      	movs	r3, #3
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c8:	f107 031c 	add.w	r3, r7, #28
 80053cc:	4619      	mov	r1, r3
 80053ce:	4809      	ldr	r0, [pc, #36]	; (80053f4 <HAL_TIM_MspPostInit+0x158>)
 80053d0:	f7fb fa96 	bl	8000900 <HAL_GPIO_Init>
}
 80053d4:	bf00      	nop
 80053d6:	3730      	adds	r7, #48	; 0x30
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40020400 	.word	0x40020400
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40020000 	.word	0x40020000
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40010400 	.word	0x40010400
 80053f4:	40020800 	.word	0x40020800

080053f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005400:	f107 0314 	add.w	r3, r7, #20
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	60da      	str	r2, [r3, #12]
 800540e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a19      	ldr	r2, [pc, #100]	; (800547c <HAL_UART_MspInit+0x84>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d12b      	bne.n	8005472 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	4a18      	ldr	r2, [pc, #96]	; (8005480 <HAL_UART_MspInit+0x88>)
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <HAL_UART_MspInit+0x88>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005428:	6413      	str	r3, [r2, #64]	; 0x40
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_UART_MspInit+0x88>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	4a11      	ldr	r2, [pc, #68]	; (8005480 <HAL_UART_MspInit+0x88>)
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_UART_MspInit+0x88>)
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6313      	str	r3, [r2, #48]	; 0x30
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <HAL_UART_MspInit+0x88>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005452:	230c      	movs	r3, #12
 8005454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	2302      	movs	r3, #2
 8005458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800545a:	2301      	movs	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800545e:	2303      	movs	r3, #3
 8005460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005462:	2307      	movs	r3, #7
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005466:	f107 0314 	add.w	r3, r7, #20
 800546a:	4619      	mov	r1, r3
 800546c:	4805      	ldr	r0, [pc, #20]	; (8005484 <HAL_UART_MspInit+0x8c>)
 800546e:	f7fb fa47 	bl	8000900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005472:	bf00      	nop
 8005474:	3728      	adds	r7, #40	; 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40004400 	.word	0x40004400
 8005480:	40023800 	.word	0x40023800
 8005484:	40020000 	.word	0x40020000

08005488 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 800548c:	bf00      	nop
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8005496:	b480      	push	{r7}
 8005498:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800549a:	e7fe      	b.n	800549a <HardFault_Handler+0x4>

0800549c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80054a0:	e7fe      	b.n	80054a0 <MemManage_Handler+0x4>

080054a2 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80054a6:	e7fe      	b.n	80054a6 <BusFault_Handler+0x4>

080054a8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80054ac:	e7fe      	b.n	80054ac <UsageFault_Handler+0x4>

080054ae <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80054ae:	b480      	push	{r7}
 80054b0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80054b2:	bf00      	nop
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80054c0:	bf00      	nop
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80054ca:	b480      	push	{r7}
 80054cc:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80054dc:	f7fb f8c2 	bl	8000664 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80054e0:	bf00      	nop
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line 1 interrupt = button interrupt.
 */
void EXTI1_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80054e8:	2002      	movs	r0, #2
 80054ea:	f7fb fbdf 	bl	8000cac <HAL_GPIO_EXTI_IRQHandler>
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts = rotary encoder, channel A and B
 */
void EXTI9_5_IRQHandler(void)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	af00      	add	r7, sp, #0
	  //}

//	  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
//	  }

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 80054f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80054fa:	f7fb fbd7 	bl	8000cac <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 80054fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005502:	f7fb fbd3 	bl	8000cac <HAL_GPIO_EXTI_IRQHandler>

}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}

0800550a <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800550e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005512:	f7fb fbcb 	bl	8000cac <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <RTC_Alarm_IRQHandler>:

/**
 * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
 */
void RTC_Alarm_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Alarm_IRQn 0 */

	/* USER CODE END RTC_Alarm_IRQn 0 */
	HAL_RTC_AlarmIRQHandler(&hrtc);
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <RTC_Alarm_IRQHandler+0x10>)
 8005522:	f7fd fc07 	bl	8002d34 <HAL_RTC_AlarmIRQHandler>
	/* USER CODE BEGIN RTC_Alarm_IRQn 1 */

	/* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	2000021c 	.word	0x2000021c

08005530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <SystemInit+0x60>)
 8005536:	4b16      	ldr	r3, [pc, #88]	; (8005590 <SystemInit+0x60>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005544:	4a13      	ldr	r2, [pc, #76]	; (8005594 <SystemInit+0x64>)
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <SystemInit+0x64>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <SystemInit+0x64>)
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005556:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <SystemInit+0x64>)
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <SystemInit+0x64>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005564:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <SystemInit+0x64>)
 8005568:	4a0b      	ldr	r2, [pc, #44]	; (8005598 <SystemInit+0x68>)
 800556a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800556c:	4a09      	ldr	r2, [pc, #36]	; (8005594 <SystemInit+0x64>)
 800556e:	4b09      	ldr	r3, [pc, #36]	; (8005594 <SystemInit+0x64>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <SystemInit+0x64>)
 800557a:	2200      	movs	r2, #0
 800557c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <SystemInit+0x60>)
 8005580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005584:	609a      	str	r2, [r3, #8]
#endif
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000ed00 	.word	0xe000ed00
 8005594:	40023800 	.word	0x40023800
 8005598:	24003010 	.word	0x24003010

0800559c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800559c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055a2:	e003      	b.n	80055ac <LoopCopyDataInit>

080055a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055aa:	3104      	adds	r1, #4

080055ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055ac:	480b      	ldr	r0, [pc, #44]	; (80055dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055b4:	d3f6      	bcc.n	80055a4 <CopyDataInit>
  ldr  r2, =_sbss
 80055b6:	4a0b      	ldr	r2, [pc, #44]	; (80055e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80055b8:	e002      	b.n	80055c0 <LoopFillZerobss>

080055ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80055ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80055bc:	f842 3b04 	str.w	r3, [r2], #4

080055c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80055c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80055c4:	d3f9      	bcc.n	80055ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80055c6:	f7ff ffb3 	bl	8005530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055ca:	f000 f811 	bl	80055f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055ce:	f7fe fc95 	bl	8003efc <main>
  bx  lr    
 80055d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80055d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80055d8:	08005f48 	.word	0x08005f48
  ldr  r0, =_sdata
 80055dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80055e0:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80055e4:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80055e8:	200002e4 	.word	0x200002e4

080055ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055ec:	e7fe      	b.n	80055ec <ADC_IRQHandler>
	...

080055f0 <__libc_init_array>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	4e0d      	ldr	r6, [pc, #52]	; (8005628 <__libc_init_array+0x38>)
 80055f4:	4c0d      	ldr	r4, [pc, #52]	; (800562c <__libc_init_array+0x3c>)
 80055f6:	1ba4      	subs	r4, r4, r6
 80055f8:	10a4      	asrs	r4, r4, #2
 80055fa:	2500      	movs	r5, #0
 80055fc:	42a5      	cmp	r5, r4
 80055fe:	d109      	bne.n	8005614 <__libc_init_array+0x24>
 8005600:	4e0b      	ldr	r6, [pc, #44]	; (8005630 <__libc_init_array+0x40>)
 8005602:	4c0c      	ldr	r4, [pc, #48]	; (8005634 <__libc_init_array+0x44>)
 8005604:	f000 fc4c 	bl	8005ea0 <_init>
 8005608:	1ba4      	subs	r4, r4, r6
 800560a:	10a4      	asrs	r4, r4, #2
 800560c:	2500      	movs	r5, #0
 800560e:	42a5      	cmp	r5, r4
 8005610:	d105      	bne.n	800561e <__libc_init_array+0x2e>
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005618:	4798      	blx	r3
 800561a:	3501      	adds	r5, #1
 800561c:	e7ee      	b.n	80055fc <__libc_init_array+0xc>
 800561e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005622:	4798      	blx	r3
 8005624:	3501      	adds	r5, #1
 8005626:	e7f2      	b.n	800560e <__libc_init_array+0x1e>
 8005628:	08005f40 	.word	0x08005f40
 800562c:	08005f40 	.word	0x08005f40
 8005630:	08005f40 	.word	0x08005f40
 8005634:	08005f44 	.word	0x08005f44

08005638 <memset>:
 8005638:	4402      	add	r2, r0
 800563a:	4603      	mov	r3, r0
 800563c:	4293      	cmp	r3, r2
 800563e:	d100      	bne.n	8005642 <memset+0xa>
 8005640:	4770      	bx	lr
 8005642:	f803 1b01 	strb.w	r1, [r3], #1
 8005646:	e7f9      	b.n	800563c <memset+0x4>

08005648 <siprintf>:
 8005648:	b40e      	push	{r1, r2, r3}
 800564a:	b500      	push	{lr}
 800564c:	b09c      	sub	sp, #112	; 0x70
 800564e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005652:	ab1d      	add	r3, sp, #116	; 0x74
 8005654:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005658:	9002      	str	r0, [sp, #8]
 800565a:	9006      	str	r0, [sp, #24]
 800565c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005660:	480a      	ldr	r0, [pc, #40]	; (800568c <siprintf+0x44>)
 8005662:	9104      	str	r1, [sp, #16]
 8005664:	9107      	str	r1, [sp, #28]
 8005666:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800566a:	f853 2b04 	ldr.w	r2, [r3], #4
 800566e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005672:	6800      	ldr	r0, [r0, #0]
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	a902      	add	r1, sp, #8
 8005678:	f000 f866 	bl	8005748 <_svfiprintf_r>
 800567c:	9b02      	ldr	r3, [sp, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	b01c      	add	sp, #112	; 0x70
 8005684:	f85d eb04 	ldr.w	lr, [sp], #4
 8005688:	b003      	add	sp, #12
 800568a:	4770      	bx	lr
 800568c:	20000020 	.word	0x20000020

08005690 <__ssputs_r>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	688e      	ldr	r6, [r1, #8]
 8005696:	429e      	cmp	r6, r3
 8005698:	4682      	mov	sl, r0
 800569a:	460c      	mov	r4, r1
 800569c:	4691      	mov	r9, r2
 800569e:	4698      	mov	r8, r3
 80056a0:	d835      	bhi.n	800570e <__ssputs_r+0x7e>
 80056a2:	898a      	ldrh	r2, [r1, #12]
 80056a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056a8:	d031      	beq.n	800570e <__ssputs_r+0x7e>
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	6909      	ldr	r1, [r1, #16]
 80056ae:	1a6f      	subs	r7, r5, r1
 80056b0:	6965      	ldr	r5, [r4, #20]
 80056b2:	2302      	movs	r3, #2
 80056b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80056bc:	f108 0301 	add.w	r3, r8, #1
 80056c0:	443b      	add	r3, r7
 80056c2:	429d      	cmp	r5, r3
 80056c4:	bf38      	it	cc
 80056c6:	461d      	movcc	r5, r3
 80056c8:	0553      	lsls	r3, r2, #21
 80056ca:	d531      	bpl.n	8005730 <__ssputs_r+0xa0>
 80056cc:	4629      	mov	r1, r5
 80056ce:	f000 fb39 	bl	8005d44 <_malloc_r>
 80056d2:	4606      	mov	r6, r0
 80056d4:	b950      	cbnz	r0, 80056ec <__ssputs_r+0x5c>
 80056d6:	230c      	movs	r3, #12
 80056d8:	f8ca 3000 	str.w	r3, [sl]
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	463a      	mov	r2, r7
 80056ee:	6921      	ldr	r1, [r4, #16]
 80056f0:	f000 fab4 	bl	8005c5c <memcpy>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	6126      	str	r6, [r4, #16]
 8005702:	6165      	str	r5, [r4, #20]
 8005704:	443e      	add	r6, r7
 8005706:	1bed      	subs	r5, r5, r7
 8005708:	6026      	str	r6, [r4, #0]
 800570a:	60a5      	str	r5, [r4, #8]
 800570c:	4646      	mov	r6, r8
 800570e:	4546      	cmp	r6, r8
 8005710:	bf28      	it	cs
 8005712:	4646      	movcs	r6, r8
 8005714:	4632      	mov	r2, r6
 8005716:	4649      	mov	r1, r9
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	f000 faaa 	bl	8005c72 <memmove>
 800571e:	68a3      	ldr	r3, [r4, #8]
 8005720:	1b9b      	subs	r3, r3, r6
 8005722:	60a3      	str	r3, [r4, #8]
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	441e      	add	r6, r3
 8005728:	6026      	str	r6, [r4, #0]
 800572a:	2000      	movs	r0, #0
 800572c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005730:	462a      	mov	r2, r5
 8005732:	f000 fb65 	bl	8005e00 <_realloc_r>
 8005736:	4606      	mov	r6, r0
 8005738:	2800      	cmp	r0, #0
 800573a:	d1e1      	bne.n	8005700 <__ssputs_r+0x70>
 800573c:	6921      	ldr	r1, [r4, #16]
 800573e:	4650      	mov	r0, sl
 8005740:	f000 fab2 	bl	8005ca8 <_free_r>
 8005744:	e7c7      	b.n	80056d6 <__ssputs_r+0x46>
	...

08005748 <_svfiprintf_r>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	b09d      	sub	sp, #116	; 0x74
 800574e:	4680      	mov	r8, r0
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	898b      	ldrh	r3, [r1, #12]
 8005754:	061c      	lsls	r4, r3, #24
 8005756:	460d      	mov	r5, r1
 8005758:	4616      	mov	r6, r2
 800575a:	d50f      	bpl.n	800577c <_svfiprintf_r+0x34>
 800575c:	690b      	ldr	r3, [r1, #16]
 800575e:	b96b      	cbnz	r3, 800577c <_svfiprintf_r+0x34>
 8005760:	2140      	movs	r1, #64	; 0x40
 8005762:	f000 faef 	bl	8005d44 <_malloc_r>
 8005766:	6028      	str	r0, [r5, #0]
 8005768:	6128      	str	r0, [r5, #16]
 800576a:	b928      	cbnz	r0, 8005778 <_svfiprintf_r+0x30>
 800576c:	230c      	movs	r3, #12
 800576e:	f8c8 3000 	str.w	r3, [r8]
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	e0c5      	b.n	8005904 <_svfiprintf_r+0x1bc>
 8005778:	2340      	movs	r3, #64	; 0x40
 800577a:	616b      	str	r3, [r5, #20]
 800577c:	2300      	movs	r3, #0
 800577e:	9309      	str	r3, [sp, #36]	; 0x24
 8005780:	2320      	movs	r3, #32
 8005782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005786:	2330      	movs	r3, #48	; 0x30
 8005788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800578c:	f04f 0b01 	mov.w	fp, #1
 8005790:	4637      	mov	r7, r6
 8005792:	463c      	mov	r4, r7
 8005794:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d13c      	bne.n	8005816 <_svfiprintf_r+0xce>
 800579c:	ebb7 0a06 	subs.w	sl, r7, r6
 80057a0:	d00b      	beq.n	80057ba <_svfiprintf_r+0x72>
 80057a2:	4653      	mov	r3, sl
 80057a4:	4632      	mov	r2, r6
 80057a6:	4629      	mov	r1, r5
 80057a8:	4640      	mov	r0, r8
 80057aa:	f7ff ff71 	bl	8005690 <__ssputs_r>
 80057ae:	3001      	adds	r0, #1
 80057b0:	f000 80a3 	beq.w	80058fa <_svfiprintf_r+0x1b2>
 80057b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b6:	4453      	add	r3, sl
 80057b8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ba:	783b      	ldrb	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 809c 	beq.w	80058fa <_svfiprintf_r+0x1b2>
 80057c2:	2300      	movs	r3, #0
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	9304      	str	r3, [sp, #16]
 80057ca:	9307      	str	r3, [sp, #28]
 80057cc:	9205      	str	r2, [sp, #20]
 80057ce:	9306      	str	r3, [sp, #24]
 80057d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057d4:	931a      	str	r3, [sp, #104]	; 0x68
 80057d6:	2205      	movs	r2, #5
 80057d8:	7821      	ldrb	r1, [r4, #0]
 80057da:	4850      	ldr	r0, [pc, #320]	; (800591c <_svfiprintf_r+0x1d4>)
 80057dc:	f7fa fd18 	bl	8000210 <memchr>
 80057e0:	1c67      	adds	r7, r4, #1
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	b9d8      	cbnz	r0, 800581e <_svfiprintf_r+0xd6>
 80057e6:	06d9      	lsls	r1, r3, #27
 80057e8:	bf44      	itt	mi
 80057ea:	2220      	movmi	r2, #32
 80057ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80057f0:	071a      	lsls	r2, r3, #28
 80057f2:	bf44      	itt	mi
 80057f4:	222b      	movmi	r2, #43	; 0x2b
 80057f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80057fa:	7822      	ldrb	r2, [r4, #0]
 80057fc:	2a2a      	cmp	r2, #42	; 0x2a
 80057fe:	d016      	beq.n	800582e <_svfiprintf_r+0xe6>
 8005800:	9a07      	ldr	r2, [sp, #28]
 8005802:	2100      	movs	r1, #0
 8005804:	200a      	movs	r0, #10
 8005806:	4627      	mov	r7, r4
 8005808:	3401      	adds	r4, #1
 800580a:	783b      	ldrb	r3, [r7, #0]
 800580c:	3b30      	subs	r3, #48	; 0x30
 800580e:	2b09      	cmp	r3, #9
 8005810:	d951      	bls.n	80058b6 <_svfiprintf_r+0x16e>
 8005812:	b1c9      	cbz	r1, 8005848 <_svfiprintf_r+0x100>
 8005814:	e011      	b.n	800583a <_svfiprintf_r+0xf2>
 8005816:	2b25      	cmp	r3, #37	; 0x25
 8005818:	d0c0      	beq.n	800579c <_svfiprintf_r+0x54>
 800581a:	4627      	mov	r7, r4
 800581c:	e7b9      	b.n	8005792 <_svfiprintf_r+0x4a>
 800581e:	4a3f      	ldr	r2, [pc, #252]	; (800591c <_svfiprintf_r+0x1d4>)
 8005820:	1a80      	subs	r0, r0, r2
 8005822:	fa0b f000 	lsl.w	r0, fp, r0
 8005826:	4318      	orrs	r0, r3
 8005828:	9004      	str	r0, [sp, #16]
 800582a:	463c      	mov	r4, r7
 800582c:	e7d3      	b.n	80057d6 <_svfiprintf_r+0x8e>
 800582e:	9a03      	ldr	r2, [sp, #12]
 8005830:	1d11      	adds	r1, r2, #4
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	9103      	str	r1, [sp, #12]
 8005836:	2a00      	cmp	r2, #0
 8005838:	db01      	blt.n	800583e <_svfiprintf_r+0xf6>
 800583a:	9207      	str	r2, [sp, #28]
 800583c:	e004      	b.n	8005848 <_svfiprintf_r+0x100>
 800583e:	4252      	negs	r2, r2
 8005840:	f043 0302 	orr.w	r3, r3, #2
 8005844:	9207      	str	r2, [sp, #28]
 8005846:	9304      	str	r3, [sp, #16]
 8005848:	783b      	ldrb	r3, [r7, #0]
 800584a:	2b2e      	cmp	r3, #46	; 0x2e
 800584c:	d10e      	bne.n	800586c <_svfiprintf_r+0x124>
 800584e:	787b      	ldrb	r3, [r7, #1]
 8005850:	2b2a      	cmp	r3, #42	; 0x2a
 8005852:	f107 0101 	add.w	r1, r7, #1
 8005856:	d132      	bne.n	80058be <_svfiprintf_r+0x176>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	1d1a      	adds	r2, r3, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	9203      	str	r2, [sp, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	bfb8      	it	lt
 8005864:	f04f 33ff 	movlt.w	r3, #4294967295
 8005868:	3702      	adds	r7, #2
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	4c2c      	ldr	r4, [pc, #176]	; (8005920 <_svfiprintf_r+0x1d8>)
 800586e:	7839      	ldrb	r1, [r7, #0]
 8005870:	2203      	movs	r2, #3
 8005872:	4620      	mov	r0, r4
 8005874:	f7fa fccc 	bl	8000210 <memchr>
 8005878:	b138      	cbz	r0, 800588a <_svfiprintf_r+0x142>
 800587a:	2340      	movs	r3, #64	; 0x40
 800587c:	1b00      	subs	r0, r0, r4
 800587e:	fa03 f000 	lsl.w	r0, r3, r0
 8005882:	9b04      	ldr	r3, [sp, #16]
 8005884:	4303      	orrs	r3, r0
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	3701      	adds	r7, #1
 800588a:	7839      	ldrb	r1, [r7, #0]
 800588c:	4825      	ldr	r0, [pc, #148]	; (8005924 <_svfiprintf_r+0x1dc>)
 800588e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005892:	2206      	movs	r2, #6
 8005894:	1c7e      	adds	r6, r7, #1
 8005896:	f7fa fcbb 	bl	8000210 <memchr>
 800589a:	2800      	cmp	r0, #0
 800589c:	d035      	beq.n	800590a <_svfiprintf_r+0x1c2>
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <_svfiprintf_r+0x1e0>)
 80058a0:	b9fb      	cbnz	r3, 80058e2 <_svfiprintf_r+0x19a>
 80058a2:	9b03      	ldr	r3, [sp, #12]
 80058a4:	3307      	adds	r3, #7
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	3308      	adds	r3, #8
 80058ac:	9303      	str	r3, [sp, #12]
 80058ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b0:	444b      	add	r3, r9
 80058b2:	9309      	str	r3, [sp, #36]	; 0x24
 80058b4:	e76c      	b.n	8005790 <_svfiprintf_r+0x48>
 80058b6:	fb00 3202 	mla	r2, r0, r2, r3
 80058ba:	2101      	movs	r1, #1
 80058bc:	e7a3      	b.n	8005806 <_svfiprintf_r+0xbe>
 80058be:	2300      	movs	r3, #0
 80058c0:	9305      	str	r3, [sp, #20]
 80058c2:	4618      	mov	r0, r3
 80058c4:	240a      	movs	r4, #10
 80058c6:	460f      	mov	r7, r1
 80058c8:	3101      	adds	r1, #1
 80058ca:	783a      	ldrb	r2, [r7, #0]
 80058cc:	3a30      	subs	r2, #48	; 0x30
 80058ce:	2a09      	cmp	r2, #9
 80058d0:	d903      	bls.n	80058da <_svfiprintf_r+0x192>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0ca      	beq.n	800586c <_svfiprintf_r+0x124>
 80058d6:	9005      	str	r0, [sp, #20]
 80058d8:	e7c8      	b.n	800586c <_svfiprintf_r+0x124>
 80058da:	fb04 2000 	mla	r0, r4, r0, r2
 80058de:	2301      	movs	r3, #1
 80058e0:	e7f1      	b.n	80058c6 <_svfiprintf_r+0x17e>
 80058e2:	ab03      	add	r3, sp, #12
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	462a      	mov	r2, r5
 80058e8:	4b10      	ldr	r3, [pc, #64]	; (800592c <_svfiprintf_r+0x1e4>)
 80058ea:	a904      	add	r1, sp, #16
 80058ec:	4640      	mov	r0, r8
 80058ee:	f3af 8000 	nop.w
 80058f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80058f6:	4681      	mov	r9, r0
 80058f8:	d1d9      	bne.n	80058ae <_svfiprintf_r+0x166>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	065b      	lsls	r3, r3, #25
 80058fe:	f53f af38 	bmi.w	8005772 <_svfiprintf_r+0x2a>
 8005902:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005904:	b01d      	add	sp, #116	; 0x74
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	ab03      	add	r3, sp, #12
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	462a      	mov	r2, r5
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <_svfiprintf_r+0x1e4>)
 8005912:	a904      	add	r1, sp, #16
 8005914:	4640      	mov	r0, r8
 8005916:	f000 f881 	bl	8005a1c <_printf_i>
 800591a:	e7ea      	b.n	80058f2 <_svfiprintf_r+0x1aa>
 800591c:	08005f04 	.word	0x08005f04
 8005920:	08005f0a 	.word	0x08005f0a
 8005924:	08005f0e 	.word	0x08005f0e
 8005928:	00000000 	.word	0x00000000
 800592c:	08005691 	.word	0x08005691

08005930 <_printf_common>:
 8005930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005934:	4691      	mov	r9, r2
 8005936:	461f      	mov	r7, r3
 8005938:	688a      	ldr	r2, [r1, #8]
 800593a:	690b      	ldr	r3, [r1, #16]
 800593c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005940:	4293      	cmp	r3, r2
 8005942:	bfb8      	it	lt
 8005944:	4613      	movlt	r3, r2
 8005946:	f8c9 3000 	str.w	r3, [r9]
 800594a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800594e:	4606      	mov	r6, r0
 8005950:	460c      	mov	r4, r1
 8005952:	b112      	cbz	r2, 800595a <_printf_common+0x2a>
 8005954:	3301      	adds	r3, #1
 8005956:	f8c9 3000 	str.w	r3, [r9]
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	0699      	lsls	r1, r3, #26
 800595e:	bf42      	ittt	mi
 8005960:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005964:	3302      	addmi	r3, #2
 8005966:	f8c9 3000 	strmi.w	r3, [r9]
 800596a:	6825      	ldr	r5, [r4, #0]
 800596c:	f015 0506 	ands.w	r5, r5, #6
 8005970:	d107      	bne.n	8005982 <_printf_common+0x52>
 8005972:	f104 0a19 	add.w	sl, r4, #25
 8005976:	68e3      	ldr	r3, [r4, #12]
 8005978:	f8d9 2000 	ldr.w	r2, [r9]
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	429d      	cmp	r5, r3
 8005980:	db29      	blt.n	80059d6 <_printf_common+0xa6>
 8005982:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	3300      	adds	r3, #0
 800598a:	bf18      	it	ne
 800598c:	2301      	movne	r3, #1
 800598e:	0692      	lsls	r2, r2, #26
 8005990:	d42e      	bmi.n	80059f0 <_printf_common+0xc0>
 8005992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005996:	4639      	mov	r1, r7
 8005998:	4630      	mov	r0, r6
 800599a:	47c0      	blx	r8
 800599c:	3001      	adds	r0, #1
 800599e:	d021      	beq.n	80059e4 <_printf_common+0xb4>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	68e5      	ldr	r5, [r4, #12]
 80059a4:	f8d9 2000 	ldr.w	r2, [r9]
 80059a8:	f003 0306 	and.w	r3, r3, #6
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	bf08      	it	eq
 80059b0:	1aad      	subeq	r5, r5, r2
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	6922      	ldr	r2, [r4, #16]
 80059b6:	bf0c      	ite	eq
 80059b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059bc:	2500      	movne	r5, #0
 80059be:	4293      	cmp	r3, r2
 80059c0:	bfc4      	itt	gt
 80059c2:	1a9b      	subgt	r3, r3, r2
 80059c4:	18ed      	addgt	r5, r5, r3
 80059c6:	f04f 0900 	mov.w	r9, #0
 80059ca:	341a      	adds	r4, #26
 80059cc:	454d      	cmp	r5, r9
 80059ce:	d11b      	bne.n	8005a08 <_printf_common+0xd8>
 80059d0:	2000      	movs	r0, #0
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	2301      	movs	r3, #1
 80059d8:	4652      	mov	r2, sl
 80059da:	4639      	mov	r1, r7
 80059dc:	4630      	mov	r0, r6
 80059de:	47c0      	blx	r8
 80059e0:	3001      	adds	r0, #1
 80059e2:	d103      	bne.n	80059ec <_printf_common+0xbc>
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ec:	3501      	adds	r5, #1
 80059ee:	e7c2      	b.n	8005976 <_printf_common+0x46>
 80059f0:	18e1      	adds	r1, r4, r3
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	2030      	movs	r0, #48	; 0x30
 80059f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059fa:	4422      	add	r2, r4
 80059fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a04:	3302      	adds	r3, #2
 8005a06:	e7c4      	b.n	8005992 <_printf_common+0x62>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	4630      	mov	r0, r6
 8005a10:	47c0      	blx	r8
 8005a12:	3001      	adds	r0, #1
 8005a14:	d0e6      	beq.n	80059e4 <_printf_common+0xb4>
 8005a16:	f109 0901 	add.w	r9, r9, #1
 8005a1a:	e7d7      	b.n	80059cc <_printf_common+0x9c>

08005a1c <_printf_i>:
 8005a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a20:	4617      	mov	r7, r2
 8005a22:	7e0a      	ldrb	r2, [r1, #24]
 8005a24:	b085      	sub	sp, #20
 8005a26:	2a6e      	cmp	r2, #110	; 0x6e
 8005a28:	4698      	mov	r8, r3
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a30:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005a34:	f000 80bc 	beq.w	8005bb0 <_printf_i+0x194>
 8005a38:	d81a      	bhi.n	8005a70 <_printf_i+0x54>
 8005a3a:	2a63      	cmp	r2, #99	; 0x63
 8005a3c:	d02e      	beq.n	8005a9c <_printf_i+0x80>
 8005a3e:	d80a      	bhi.n	8005a56 <_printf_i+0x3a>
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	f000 80c8 	beq.w	8005bd6 <_printf_i+0x1ba>
 8005a46:	2a58      	cmp	r2, #88	; 0x58
 8005a48:	f000 808a 	beq.w	8005b60 <_printf_i+0x144>
 8005a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a50:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005a54:	e02a      	b.n	8005aac <_printf_i+0x90>
 8005a56:	2a64      	cmp	r2, #100	; 0x64
 8005a58:	d001      	beq.n	8005a5e <_printf_i+0x42>
 8005a5a:	2a69      	cmp	r2, #105	; 0x69
 8005a5c:	d1f6      	bne.n	8005a4c <_printf_i+0x30>
 8005a5e:	6821      	ldr	r1, [r4, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a66:	d023      	beq.n	8005ab0 <_printf_i+0x94>
 8005a68:	1d11      	adds	r1, r2, #4
 8005a6a:	6019      	str	r1, [r3, #0]
 8005a6c:	6813      	ldr	r3, [r2, #0]
 8005a6e:	e027      	b.n	8005ac0 <_printf_i+0xa4>
 8005a70:	2a73      	cmp	r2, #115	; 0x73
 8005a72:	f000 80b4 	beq.w	8005bde <_printf_i+0x1c2>
 8005a76:	d808      	bhi.n	8005a8a <_printf_i+0x6e>
 8005a78:	2a6f      	cmp	r2, #111	; 0x6f
 8005a7a:	d02a      	beq.n	8005ad2 <_printf_i+0xb6>
 8005a7c:	2a70      	cmp	r2, #112	; 0x70
 8005a7e:	d1e5      	bne.n	8005a4c <_printf_i+0x30>
 8005a80:	680a      	ldr	r2, [r1, #0]
 8005a82:	f042 0220 	orr.w	r2, r2, #32
 8005a86:	600a      	str	r2, [r1, #0]
 8005a88:	e003      	b.n	8005a92 <_printf_i+0x76>
 8005a8a:	2a75      	cmp	r2, #117	; 0x75
 8005a8c:	d021      	beq.n	8005ad2 <_printf_i+0xb6>
 8005a8e:	2a78      	cmp	r2, #120	; 0x78
 8005a90:	d1dc      	bne.n	8005a4c <_printf_i+0x30>
 8005a92:	2278      	movs	r2, #120	; 0x78
 8005a94:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005a98:	496e      	ldr	r1, [pc, #440]	; (8005c54 <_printf_i+0x238>)
 8005a9a:	e064      	b.n	8005b66 <_printf_i+0x14a>
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005aa2:	1d11      	adds	r1, r2, #4
 8005aa4:	6019      	str	r1, [r3, #0]
 8005aa6:	6813      	ldr	r3, [r2, #0]
 8005aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0a3      	b.n	8005bf8 <_printf_i+0x1dc>
 8005ab0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005ab4:	f102 0104 	add.w	r1, r2, #4
 8005ab8:	6019      	str	r1, [r3, #0]
 8005aba:	d0d7      	beq.n	8005a6c <_printf_i+0x50>
 8005abc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	da03      	bge.n	8005acc <_printf_i+0xb0>
 8005ac4:	222d      	movs	r2, #45	; 0x2d
 8005ac6:	425b      	negs	r3, r3
 8005ac8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005acc:	4962      	ldr	r1, [pc, #392]	; (8005c58 <_printf_i+0x23c>)
 8005ace:	220a      	movs	r2, #10
 8005ad0:	e017      	b.n	8005b02 <_printf_i+0xe6>
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005ada:	d003      	beq.n	8005ae4 <_printf_i+0xc8>
 8005adc:	1d08      	adds	r0, r1, #4
 8005ade:	6018      	str	r0, [r3, #0]
 8005ae0:	680b      	ldr	r3, [r1, #0]
 8005ae2:	e006      	b.n	8005af2 <_printf_i+0xd6>
 8005ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ae8:	f101 0004 	add.w	r0, r1, #4
 8005aec:	6018      	str	r0, [r3, #0]
 8005aee:	d0f7      	beq.n	8005ae0 <_printf_i+0xc4>
 8005af0:	880b      	ldrh	r3, [r1, #0]
 8005af2:	4959      	ldr	r1, [pc, #356]	; (8005c58 <_printf_i+0x23c>)
 8005af4:	2a6f      	cmp	r2, #111	; 0x6f
 8005af6:	bf14      	ite	ne
 8005af8:	220a      	movne	r2, #10
 8005afa:	2208      	moveq	r2, #8
 8005afc:	2000      	movs	r0, #0
 8005afe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005b02:	6865      	ldr	r5, [r4, #4]
 8005b04:	60a5      	str	r5, [r4, #8]
 8005b06:	2d00      	cmp	r5, #0
 8005b08:	f2c0 809c 	blt.w	8005c44 <_printf_i+0x228>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	f020 0004 	bic.w	r0, r0, #4
 8005b12:	6020      	str	r0, [r4, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d13f      	bne.n	8005b98 <_printf_i+0x17c>
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	f040 8095 	bne.w	8005c48 <_printf_i+0x22c>
 8005b1e:	4675      	mov	r5, lr
 8005b20:	2a08      	cmp	r2, #8
 8005b22:	d10b      	bne.n	8005b3c <_printf_i+0x120>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07da      	lsls	r2, r3, #31
 8005b28:	d508      	bpl.n	8005b3c <_printf_i+0x120>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	6862      	ldr	r2, [r4, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bfde      	ittt	le
 8005b32:	2330      	movle	r3, #48	; 0x30
 8005b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b3c:	ebae 0305 	sub.w	r3, lr, r5
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	f8cd 8000 	str.w	r8, [sp]
 8005b46:	463b      	mov	r3, r7
 8005b48:	aa03      	add	r2, sp, #12
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f7ff feef 	bl	8005930 <_printf_common>
 8005b52:	3001      	adds	r0, #1
 8005b54:	d155      	bne.n	8005c02 <_printf_i+0x1e6>
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5a:	b005      	add	sp, #20
 8005b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b60:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005b64:	493c      	ldr	r1, [pc, #240]	; (8005c58 <_printf_i+0x23c>)
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b6e:	f100 0504 	add.w	r5, r0, #4
 8005b72:	601d      	str	r5, [r3, #0]
 8005b74:	d001      	beq.n	8005b7a <_printf_i+0x15e>
 8005b76:	6803      	ldr	r3, [r0, #0]
 8005b78:	e002      	b.n	8005b80 <_printf_i+0x164>
 8005b7a:	0655      	lsls	r5, r2, #25
 8005b7c:	d5fb      	bpl.n	8005b76 <_printf_i+0x15a>
 8005b7e:	8803      	ldrh	r3, [r0, #0]
 8005b80:	07d0      	lsls	r0, r2, #31
 8005b82:	bf44      	itt	mi
 8005b84:	f042 0220 	orrmi.w	r2, r2, #32
 8005b88:	6022      	strmi	r2, [r4, #0]
 8005b8a:	b91b      	cbnz	r3, 8005b94 <_printf_i+0x178>
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	f022 0220 	bic.w	r2, r2, #32
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	2210      	movs	r2, #16
 8005b96:	e7b1      	b.n	8005afc <_printf_i+0xe0>
 8005b98:	4675      	mov	r5, lr
 8005b9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b9e:	fb02 3310 	mls	r3, r2, r0, r3
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d1f5      	bne.n	8005b9a <_printf_i+0x17e>
 8005bae:	e7b7      	b.n	8005b20 <_printf_i+0x104>
 8005bb0:	6808      	ldr	r0, [r1, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	6949      	ldr	r1, [r1, #20]
 8005bb6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005bba:	d004      	beq.n	8005bc6 <_printf_i+0x1aa>
 8005bbc:	1d10      	adds	r0, r2, #4
 8005bbe:	6018      	str	r0, [r3, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]
 8005bc2:	6019      	str	r1, [r3, #0]
 8005bc4:	e007      	b.n	8005bd6 <_printf_i+0x1ba>
 8005bc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bca:	f102 0004 	add.w	r0, r2, #4
 8005bce:	6018      	str	r0, [r3, #0]
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	d0f6      	beq.n	8005bc2 <_printf_i+0x1a6>
 8005bd4:	8019      	strh	r1, [r3, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	4675      	mov	r5, lr
 8005bdc:	e7b1      	b.n	8005b42 <_printf_i+0x126>
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	1d11      	adds	r1, r2, #4
 8005be2:	6019      	str	r1, [r3, #0]
 8005be4:	6815      	ldr	r5, [r2, #0]
 8005be6:	6862      	ldr	r2, [r4, #4]
 8005be8:	2100      	movs	r1, #0
 8005bea:	4628      	mov	r0, r5
 8005bec:	f7fa fb10 	bl	8000210 <memchr>
 8005bf0:	b108      	cbz	r0, 8005bf6 <_printf_i+0x1da>
 8005bf2:	1b40      	subs	r0, r0, r5
 8005bf4:	6060      	str	r0, [r4, #4]
 8005bf6:	6863      	ldr	r3, [r4, #4]
 8005bf8:	6123      	str	r3, [r4, #16]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c00:	e79f      	b.n	8005b42 <_printf_i+0x126>
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	462a      	mov	r2, r5
 8005c06:	4639      	mov	r1, r7
 8005c08:	4630      	mov	r0, r6
 8005c0a:	47c0      	blx	r8
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d0a2      	beq.n	8005b56 <_printf_i+0x13a>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	079b      	lsls	r3, r3, #30
 8005c14:	d507      	bpl.n	8005c26 <_printf_i+0x20a>
 8005c16:	2500      	movs	r5, #0
 8005c18:	f104 0919 	add.w	r9, r4, #25
 8005c1c:	68e3      	ldr	r3, [r4, #12]
 8005c1e:	9a03      	ldr	r2, [sp, #12]
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	429d      	cmp	r5, r3
 8005c24:	db05      	blt.n	8005c32 <_printf_i+0x216>
 8005c26:	68e0      	ldr	r0, [r4, #12]
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	4298      	cmp	r0, r3
 8005c2c:	bfb8      	it	lt
 8005c2e:	4618      	movlt	r0, r3
 8005c30:	e793      	b.n	8005b5a <_printf_i+0x13e>
 8005c32:	2301      	movs	r3, #1
 8005c34:	464a      	mov	r2, r9
 8005c36:	4639      	mov	r1, r7
 8005c38:	4630      	mov	r0, r6
 8005c3a:	47c0      	blx	r8
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d08a      	beq.n	8005b56 <_printf_i+0x13a>
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7eb      	b.n	8005c1c <_printf_i+0x200>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1a7      	bne.n	8005b98 <_printf_i+0x17c>
 8005c48:	780b      	ldrb	r3, [r1, #0]
 8005c4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c52:	e765      	b.n	8005b20 <_printf_i+0x104>
 8005c54:	08005f26 	.word	0x08005f26
 8005c58:	08005f15 	.word	0x08005f15

08005c5c <memcpy>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	1e43      	subs	r3, r0, #1
 8005c60:	440a      	add	r2, r1
 8005c62:	4291      	cmp	r1, r2
 8005c64:	d100      	bne.n	8005c68 <memcpy+0xc>
 8005c66:	bd10      	pop	{r4, pc}
 8005c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c70:	e7f7      	b.n	8005c62 <memcpy+0x6>

08005c72 <memmove>:
 8005c72:	4288      	cmp	r0, r1
 8005c74:	b510      	push	{r4, lr}
 8005c76:	eb01 0302 	add.w	r3, r1, r2
 8005c7a:	d803      	bhi.n	8005c84 <memmove+0x12>
 8005c7c:	1e42      	subs	r2, r0, #1
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	d10c      	bne.n	8005c9c <memmove+0x2a>
 8005c82:	bd10      	pop	{r4, pc}
 8005c84:	4298      	cmp	r0, r3
 8005c86:	d2f9      	bcs.n	8005c7c <memmove+0xa>
 8005c88:	1881      	adds	r1, r0, r2
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	42d3      	cmn	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memmove+0x20>
 8005c90:	bd10      	pop	{r4, pc}
 8005c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c9a:	e7f7      	b.n	8005c8c <memmove+0x1a>
 8005c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ca4:	e7eb      	b.n	8005c7e <memmove+0xc>
	...

08005ca8 <_free_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4605      	mov	r5, r0
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d045      	beq.n	8005d3c <_free_r+0x94>
 8005cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb4:	1f0c      	subs	r4, r1, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfb8      	it	lt
 8005cba:	18e4      	addlt	r4, r4, r3
 8005cbc:	f000 f8d6 	bl	8005e6c <__malloc_lock>
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <_free_r+0x98>)
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	b933      	cbnz	r3, 8005cd6 <_free_r+0x2e>
 8005cc8:	6063      	str	r3, [r4, #4]
 8005cca:	6014      	str	r4, [r2, #0]
 8005ccc:	4628      	mov	r0, r5
 8005cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd2:	f000 b8cc 	b.w	8005e6e <__malloc_unlock>
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	d90c      	bls.n	8005cf4 <_free_r+0x4c>
 8005cda:	6821      	ldr	r1, [r4, #0]
 8005cdc:	1862      	adds	r2, r4, r1
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	bf04      	itt	eq
 8005ce2:	681a      	ldreq	r2, [r3, #0]
 8005ce4:	685b      	ldreq	r3, [r3, #4]
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	bf04      	itt	eq
 8005cea:	1852      	addeq	r2, r2, r1
 8005cec:	6022      	streq	r2, [r4, #0]
 8005cee:	6004      	str	r4, [r0, #0]
 8005cf0:	e7ec      	b.n	8005ccc <_free_r+0x24>
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	b10a      	cbz	r2, 8005cfc <_free_r+0x54>
 8005cf8:	42a2      	cmp	r2, r4
 8005cfa:	d9fa      	bls.n	8005cf2 <_free_r+0x4a>
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	1858      	adds	r0, r3, r1
 8005d00:	42a0      	cmp	r0, r4
 8005d02:	d10b      	bne.n	8005d1c <_free_r+0x74>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	4401      	add	r1, r0
 8005d08:	1858      	adds	r0, r3, r1
 8005d0a:	4282      	cmp	r2, r0
 8005d0c:	6019      	str	r1, [r3, #0]
 8005d0e:	d1dd      	bne.n	8005ccc <_free_r+0x24>
 8005d10:	6810      	ldr	r0, [r2, #0]
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	4401      	add	r1, r0
 8005d18:	6019      	str	r1, [r3, #0]
 8005d1a:	e7d7      	b.n	8005ccc <_free_r+0x24>
 8005d1c:	d902      	bls.n	8005d24 <_free_r+0x7c>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	e7d3      	b.n	8005ccc <_free_r+0x24>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	1821      	adds	r1, r4, r0
 8005d28:	428a      	cmp	r2, r1
 8005d2a:	bf04      	itt	eq
 8005d2c:	6811      	ldreq	r1, [r2, #0]
 8005d2e:	6852      	ldreq	r2, [r2, #4]
 8005d30:	6062      	str	r2, [r4, #4]
 8005d32:	bf04      	itt	eq
 8005d34:	1809      	addeq	r1, r1, r0
 8005d36:	6021      	streq	r1, [r4, #0]
 8005d38:	605c      	str	r4, [r3, #4]
 8005d3a:	e7c7      	b.n	8005ccc <_free_r+0x24>
 8005d3c:	bd38      	pop	{r3, r4, r5, pc}
 8005d3e:	bf00      	nop
 8005d40:	200000c4 	.word	0x200000c4

08005d44 <_malloc_r>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	1ccd      	adds	r5, r1, #3
 8005d48:	f025 0503 	bic.w	r5, r5, #3
 8005d4c:	3508      	adds	r5, #8
 8005d4e:	2d0c      	cmp	r5, #12
 8005d50:	bf38      	it	cc
 8005d52:	250c      	movcc	r5, #12
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	4606      	mov	r6, r0
 8005d58:	db01      	blt.n	8005d5e <_malloc_r+0x1a>
 8005d5a:	42a9      	cmp	r1, r5
 8005d5c:	d903      	bls.n	8005d66 <_malloc_r+0x22>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	6033      	str	r3, [r6, #0]
 8005d62:	2000      	movs	r0, #0
 8005d64:	bd70      	pop	{r4, r5, r6, pc}
 8005d66:	f000 f881 	bl	8005e6c <__malloc_lock>
 8005d6a:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <_malloc_r+0xb4>)
 8005d6c:	6814      	ldr	r4, [r2, #0]
 8005d6e:	4621      	mov	r1, r4
 8005d70:	b991      	cbnz	r1, 8005d98 <_malloc_r+0x54>
 8005d72:	4c22      	ldr	r4, [pc, #136]	; (8005dfc <_malloc_r+0xb8>)
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	b91b      	cbnz	r3, 8005d80 <_malloc_r+0x3c>
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 f867 	bl	8005e4c <_sbrk_r>
 8005d7e:	6020      	str	r0, [r4, #0]
 8005d80:	4629      	mov	r1, r5
 8005d82:	4630      	mov	r0, r6
 8005d84:	f000 f862 	bl	8005e4c <_sbrk_r>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d126      	bne.n	8005dda <_malloc_r+0x96>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	4630      	mov	r0, r6
 8005d92:	f000 f86c 	bl	8005e6e <__malloc_unlock>
 8005d96:	e7e4      	b.n	8005d62 <_malloc_r+0x1e>
 8005d98:	680b      	ldr	r3, [r1, #0]
 8005d9a:	1b5b      	subs	r3, r3, r5
 8005d9c:	d41a      	bmi.n	8005dd4 <_malloc_r+0x90>
 8005d9e:	2b0b      	cmp	r3, #11
 8005da0:	d90f      	bls.n	8005dc2 <_malloc_r+0x7e>
 8005da2:	600b      	str	r3, [r1, #0]
 8005da4:	50cd      	str	r5, [r1, r3]
 8005da6:	18cc      	adds	r4, r1, r3
 8005da8:	4630      	mov	r0, r6
 8005daa:	f000 f860 	bl	8005e6e <__malloc_unlock>
 8005dae:	f104 000b 	add.w	r0, r4, #11
 8005db2:	1d23      	adds	r3, r4, #4
 8005db4:	f020 0007 	bic.w	r0, r0, #7
 8005db8:	1ac3      	subs	r3, r0, r3
 8005dba:	d01b      	beq.n	8005df4 <_malloc_r+0xb0>
 8005dbc:	425a      	negs	r2, r3
 8005dbe:	50e2      	str	r2, [r4, r3]
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
 8005dc2:	428c      	cmp	r4, r1
 8005dc4:	bf0d      	iteet	eq
 8005dc6:	6863      	ldreq	r3, [r4, #4]
 8005dc8:	684b      	ldrne	r3, [r1, #4]
 8005dca:	6063      	strne	r3, [r4, #4]
 8005dcc:	6013      	streq	r3, [r2, #0]
 8005dce:	bf18      	it	ne
 8005dd0:	460c      	movne	r4, r1
 8005dd2:	e7e9      	b.n	8005da8 <_malloc_r+0x64>
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	6849      	ldr	r1, [r1, #4]
 8005dd8:	e7ca      	b.n	8005d70 <_malloc_r+0x2c>
 8005dda:	1cc4      	adds	r4, r0, #3
 8005ddc:	f024 0403 	bic.w	r4, r4, #3
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d005      	beq.n	8005df0 <_malloc_r+0xac>
 8005de4:	1a21      	subs	r1, r4, r0
 8005de6:	4630      	mov	r0, r6
 8005de8:	f000 f830 	bl	8005e4c <_sbrk_r>
 8005dec:	3001      	adds	r0, #1
 8005dee:	d0cd      	beq.n	8005d8c <_malloc_r+0x48>
 8005df0:	6025      	str	r5, [r4, #0]
 8005df2:	e7d9      	b.n	8005da8 <_malloc_r+0x64>
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	bf00      	nop
 8005df8:	200000c4 	.word	0x200000c4
 8005dfc:	200000c8 	.word	0x200000c8

08005e00 <_realloc_r>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	4607      	mov	r7, r0
 8005e04:	4614      	mov	r4, r2
 8005e06:	460e      	mov	r6, r1
 8005e08:	b921      	cbnz	r1, 8005e14 <_realloc_r+0x14>
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e10:	f7ff bf98 	b.w	8005d44 <_malloc_r>
 8005e14:	b922      	cbnz	r2, 8005e20 <_realloc_r+0x20>
 8005e16:	f7ff ff47 	bl	8005ca8 <_free_r>
 8005e1a:	4625      	mov	r5, r4
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e20:	f000 f826 	bl	8005e70 <_malloc_usable_size_r>
 8005e24:	4284      	cmp	r4, r0
 8005e26:	d90f      	bls.n	8005e48 <_realloc_r+0x48>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	f7ff ff8a 	bl	8005d44 <_malloc_r>
 8005e30:	4605      	mov	r5, r0
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d0f2      	beq.n	8005e1c <_realloc_r+0x1c>
 8005e36:	4631      	mov	r1, r6
 8005e38:	4622      	mov	r2, r4
 8005e3a:	f7ff ff0f 	bl	8005c5c <memcpy>
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4638      	mov	r0, r7
 8005e42:	f7ff ff31 	bl	8005ca8 <_free_r>
 8005e46:	e7e9      	b.n	8005e1c <_realloc_r+0x1c>
 8005e48:	4635      	mov	r5, r6
 8005e4a:	e7e7      	b.n	8005e1c <_realloc_r+0x1c>

08005e4c <_sbrk_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4c06      	ldr	r4, [pc, #24]	; (8005e68 <_sbrk_r+0x1c>)
 8005e50:	2300      	movs	r3, #0
 8005e52:	4605      	mov	r5, r0
 8005e54:	4608      	mov	r0, r1
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	f000 f814 	bl	8005e84 <_sbrk>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d102      	bne.n	8005e66 <_sbrk_r+0x1a>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	b103      	cbz	r3, 8005e66 <_sbrk_r+0x1a>
 8005e64:	602b      	str	r3, [r5, #0]
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	200002e0 	.word	0x200002e0

08005e6c <__malloc_lock>:
 8005e6c:	4770      	bx	lr

08005e6e <__malloc_unlock>:
 8005e6e:	4770      	bx	lr

08005e70 <_malloc_usable_size_r>:
 8005e70:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f1a0 0004 	sub.w	r0, r0, #4
 8005e7a:	bfbc      	itt	lt
 8005e7c:	580b      	ldrlt	r3, [r1, r0]
 8005e7e:	18c0      	addlt	r0, r0, r3
 8005e80:	4770      	bx	lr
	...

08005e84 <_sbrk>:
 8005e84:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <_sbrk+0x14>)
 8005e86:	6819      	ldr	r1, [r3, #0]
 8005e88:	4602      	mov	r2, r0
 8005e8a:	b909      	cbnz	r1, 8005e90 <_sbrk+0xc>
 8005e8c:	4903      	ldr	r1, [pc, #12]	; (8005e9c <_sbrk+0x18>)
 8005e8e:	6019      	str	r1, [r3, #0]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	4402      	add	r2, r0
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	4770      	bx	lr
 8005e98:	200000cc 	.word	0x200000cc
 8005e9c:	200002e4 	.word	0x200002e4

08005ea0 <_init>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr

08005eac <_fini>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr
