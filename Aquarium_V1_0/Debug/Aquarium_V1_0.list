
Aquarium_V1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  2000000c  080042c0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000210  080042c0  00020210  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001651e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002560  00000000  00000000  0003655a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fd8  00000000  00000000  00038ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee0  00000000  00000000  00039a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000075f7  00000000  00000000  0003a978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004efb  00000000  00000000  00041f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046e6a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043cc  00000000  00000000  00046ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004274 	.word	0x08004274

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004274 	.word	0x08004274

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f947 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 fbca 	bl	8003ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f95f 	bl	800083a <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f927 	bl	80007e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000028 	.word	0x20000028

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad2      	subs	r2, r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f7      	bcc.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006aa:	4909      	ldr	r1, [pc, #36]	; (80006d0 <NVIC_EnableIRQ+0x30>)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	095b      	lsrs	r3, r3, #5
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	f002 021f 	and.w	r2, r2, #31
 80006b8:	2001      	movs	r0, #1
 80006ba:	fa00 f202 	lsl.w	r2, r0, r2
 80006be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e100 	.word	0xe000e100

080006d4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da0b      	bge.n	8000700 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	490d      	ldr	r1, [pc, #52]	; (8000720 <NVIC_SetPriority+0x4c>)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 030f 	and.w	r3, r3, #15
 80006f0:	3b04      	subs	r3, #4
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006fe:	e009      	b.n	8000714 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	4908      	ldr	r1, [pc, #32]	; (8000724 <NVIC_SetPriority+0x50>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	e000e100 	.word	0xe000e100

08000728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	f1c3 0307 	rsb	r3, r3, #7
 8000742:	2b04      	cmp	r3, #4
 8000744:	bf28      	it	cs
 8000746:	2304      	movcs	r3, #4
 8000748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3304      	adds	r3, #4
 800074e:	2b06      	cmp	r3, #6
 8000750:	d902      	bls.n	8000758 <NVIC_EncodePriority+0x30>
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3b03      	subs	r3, #3
 8000756:	e000      	b.n	800075a <NVIC_EncodePriority+0x32>
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	2201      	movs	r2, #1
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	401a      	ands	r2, r3
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076e:	2101      	movs	r1, #1
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	1e59      	subs	r1, r3, #1
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f7ff ff90 	bl	80006d4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff2f 	bl	800063c <NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff44 	bl	8000684 <NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff90 	bl	8000728 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5f 	bl	80006d4 <NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff37 	bl	80006a0 <NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	e165      	b.n	8000b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000870:	2201      	movs	r2, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 8154 	bne.w	8000b36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d003      	beq.n	800089e <HAL_GPIO_Init+0x4a>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b12      	cmp	r3, #18
 800089c:	d123      	bne.n	80008e6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	08da      	lsrs	r2, r3, #3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3208      	adds	r2, #8
 80008a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	220f      	movs	r2, #15
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	691a      	ldr	r2, [r3, #16]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	69b9      	ldr	r1, [r7, #24]
 80008e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4013      	ands	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0203 	and.w	r2, r3, #3
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4313      	orrs	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d00b      	beq.n	800093a <HAL_GPIO_Init+0xe6>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d007      	beq.n	800093a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092e:	2b11      	cmp	r3, #17
 8000930:	d003      	beq.n	800093a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b12      	cmp	r3, #18
 8000938:	d130      	bne.n	800099c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2203      	movs	r2, #3
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4013      	ands	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4313      	orrs	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000970:	2201      	movs	r2, #1
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	f003 0201 	and.w	r2, r3, #1
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 80ae 	beq.w	8000b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4a5c      	ldr	r2, [pc, #368]	; (8000b50 <HAL_GPIO_Init+0x2fc>)
 80009e0:	4b5b      	ldr	r3, [pc, #364]	; (8000b50 <HAL_GPIO_Init+0x2fc>)
 80009e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <HAL_GPIO_Init+0x2fc>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009f6:	4a57      	ldr	r2, [pc, #348]	; (8000b54 <HAL_GPIO_Init+0x300>)
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3302      	adds	r3, #2
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4e      	ldr	r2, [pc, #312]	; (8000b58 <HAL_GPIO_Init+0x304>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d025      	beq.n	8000a6e <HAL_GPIO_Init+0x21a>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4d      	ldr	r2, [pc, #308]	; (8000b5c <HAL_GPIO_Init+0x308>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d01f      	beq.n	8000a6a <HAL_GPIO_Init+0x216>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4c      	ldr	r2, [pc, #304]	; (8000b60 <HAL_GPIO_Init+0x30c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d019      	beq.n	8000a66 <HAL_GPIO_Init+0x212>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4b      	ldr	r2, [pc, #300]	; (8000b64 <HAL_GPIO_Init+0x310>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d013      	beq.n	8000a62 <HAL_GPIO_Init+0x20e>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4a      	ldr	r2, [pc, #296]	; (8000b68 <HAL_GPIO_Init+0x314>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d00d      	beq.n	8000a5e <HAL_GPIO_Init+0x20a>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a49      	ldr	r2, [pc, #292]	; (8000b6c <HAL_GPIO_Init+0x318>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d007      	beq.n	8000a5a <HAL_GPIO_Init+0x206>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <HAL_GPIO_Init+0x31c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_GPIO_Init+0x202>
 8000a52:	2306      	movs	r3, #6
 8000a54:	e00c      	b.n	8000a70 <HAL_GPIO_Init+0x21c>
 8000a56:	2307      	movs	r3, #7
 8000a58:	e00a      	b.n	8000a70 <HAL_GPIO_Init+0x21c>
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	e008      	b.n	8000a70 <HAL_GPIO_Init+0x21c>
 8000a5e:	2304      	movs	r3, #4
 8000a60:	e006      	b.n	8000a70 <HAL_GPIO_Init+0x21c>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e004      	b.n	8000a70 <HAL_GPIO_Init+0x21c>
 8000a66:	2302      	movs	r3, #2
 8000a68:	e002      	b.n	8000a70 <HAL_GPIO_Init+0x21c>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <HAL_GPIO_Init+0x21c>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	f002 0203 	and.w	r2, r2, #3
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	4093      	lsls	r3, r2
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a80:	4934      	ldr	r1, [pc, #208]	; (8000b54 <HAL_GPIO_Init+0x300>)
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	089b      	lsrs	r3, r3, #2
 8000a86:	3302      	adds	r3, #2
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ab2:	4a30      	ldr	r2, [pc, #192]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000adc:	4a25      	ldr	r2, [pc, #148]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b30:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	f67f ae96 	bls.w	8000870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b44:	bf00      	nop
 8000b46:	3724      	adds	r7, #36	; 0x24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40013800 	.word	0x40013800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40021400 	.word	0x40021400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b94:	e003      	b.n	8000b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	619a      	str	r2, [r3, #24]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d006      	beq.n	8000bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f806 	bl	8000bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013c00 	.word	0x40013c00

08000bdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e0c8      	b.n	8000da0 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d106      	bne.n	8000c28 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f003 f884 	bl	8003d30 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2224      	movs	r2, #36	; 0x24
 8000c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	f022 0201 	bic.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c40:	f000 f9a6 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8000c44:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	4a57      	ldr	r2, [pc, #348]	; (8000da8 <HAL_I2C_Init+0x1b4>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	0c9b      	lsrs	r3, r3, #18
 8000c50:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4952      	ldr	r1, [pc, #328]	; (8000dac <HAL_I2C_Init+0x1b8>)
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d802      	bhi.n	8000c6e <HAL_I2C_Init+0x7a>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	e009      	b.n	8000c82 <HAL_I2C_Init+0x8e>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c74:	fb01 f303 	mul.w	r3, r1, r3
 8000c78:	494d      	ldr	r1, [pc, #308]	; (8000db0 <HAL_I2C_Init+0x1bc>)
 8000c7a:	fba1 1303 	umull	r1, r3, r1, r3
 8000c7e:	099b      	lsrs	r3, r3, #6
 8000c80:	3301      	adds	r3, #1
 8000c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a47      	ldr	r2, [pc, #284]	; (8000dac <HAL_I2C_Init+0x1b8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d812      	bhi.n	8000cb8 <HAL_I2C_Init+0xc4>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d906      	bls.n	8000cb4 <HAL_I2C_Init+0xc0>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	e045      	b.n	8000d40 <HAL_I2C_Init+0x14c>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	e043      	b.n	8000d40 <HAL_I2C_Init+0x14c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10f      	bne.n	8000ce0 <HAL_I2C_Init+0xec>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	e010      	b.n	8000d02 <HAL_I2C_Init+0x10e>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	009a      	lsls	r2, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2301      	moveq	r3, #1
 8000cfe:	2300      	movne	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_I2C_Init+0x116>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e01a      	b.n	8000d40 <HAL_I2C_Init+0x14c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10a      	bne.n	8000d28 <HAL_I2C_Init+0x134>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d26:	e00b      	b.n	8000d40 <HAL_I2C_Init+0x14c>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	009a      	lsls	r2, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d40:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	69d1      	ldr	r1, [r2, #28]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6a12      	ldr	r2, [r2, #32]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6911      	ldr	r1, [r2, #16]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68d2      	ldr	r2, [r2, #12]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6951      	ldr	r1, [r2, #20]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6992      	ldr	r2, [r2, #24]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	f042 0201 	orr.w	r2, r2, #1
 8000d80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	000186a0 	.word	0x000186a0
 8000db0:	10624dd3 	.word	0x10624dd3

08000db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0ca      	b.n	8000f5e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dc8:	4b67      	ldr	r3, [pc, #412]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 020f 	and.w	r2, r3, #15
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d20c      	bcs.n	8000df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dd6:	4b64      	ldr	r3, [pc, #400]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dde:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 020f 	and.w	r2, r3, #15
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d001      	beq.n	8000df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e0b6      	b.n	8000f5e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d020      	beq.n	8000e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d005      	beq.n	8000e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e08:	4a58      	ldr	r2, [pc, #352]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e0a:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e20:	4a52      	ldr	r2, [pc, #328]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e22:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e2c:	494f      	ldr	r1, [pc, #316]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e2e:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d044      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d107      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d119      	bne.n	8000e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e07d      	b.n	8000f5e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d003      	beq.n	8000e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d107      	bne.n	8000e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e72:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d109      	bne.n	8000e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e06d      	b.n	8000f5e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e065      	b.n	8000f5e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e92:	4936      	ldr	r1, [pc, #216]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f023 0203 	bic.w	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ea4:	f7ff fb9c 	bl	80005e0 <HAL_GetTick>
 8000ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eaa:	e00a      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eac:	f7ff fb98 	bl	80005e0 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e04d      	b.n	8000f5e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 020c 	and.w	r2, r3, #12
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d1eb      	bne.n	8000eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 020f 	and.w	r2, r3, #15
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d90c      	bls.n	8000efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 020f 	and.w	r2, r3, #15
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d001      	beq.n	8000efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e030      	b.n	8000f5e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f08:	4918      	ldr	r1, [pc, #96]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f26:	4911      	ldr	r1, [pc, #68]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f3a:	f000 fb7b 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 8000f3e:	4601      	mov	r1, r0
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_RCC_ClockConfig+0x1bc>)
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_RCC_ClockConfig+0x1c0>)
 8000f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fafe 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	0800428c 	.word	0x0800428c
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f94:	f7ff fff0 	bl	8000f78 <HAL_RCC_GetHCLKFreq>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	0a9b      	lsrs	r3, r3, #10
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	0800429c 	.word	0x0800429c

08000fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fbc:	f7ff ffdc 	bl	8000f78 <HAL_RCC_GetHCLKFreq>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	0b5b      	lsrs	r3, r3, #13
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	0800429c 	.word	0x0800429c

08000fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d010      	beq.n	800103a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001018:	496f      	ldr	r1, [pc, #444]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800101c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001020:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	4313      	orrs	r3, r2
 800102a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001036:	2301      	movs	r3, #1
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d010      	beq.n	8001068 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001046:	4964      	ldr	r1, [pc, #400]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001048:	4b63      	ldr	r3, [pc, #396]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800104a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104e:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001056:	4313      	orrs	r3, r2
 8001058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d017      	beq.n	80010a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001074:	4958      	ldr	r1, [pc, #352]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001076:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800107c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4313      	orrs	r3, r2
 8001086:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001092:	d101      	bne.n	8001098 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80010b0:	4949      	ldr	r1, [pc, #292]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c0:	4313      	orrs	r3, r2
 80010c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ce:	d101      	bne.n	80010d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80010dc:	2301      	movs	r3, #1
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 808a 	beq.w	8001202 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4a39      	ldr	r2, [pc, #228]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800110a:	4a34      	ldr	r2, [pc, #208]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001116:	f7ff fa63 	bl	80005e0 <HAL_GetTick>
 800111a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800111e:	f7ff fa5f 	bl	80005e0 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e278      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800113e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001144:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d02f      	beq.n	80011ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	429a      	cmp	r2, r3
 8001158:	d028      	beq.n	80011ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001162:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d014      	beq.n	80011ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fa2d 	bl	80005e0 <HAL_GetTick>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001188:	e00a      	b.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fa29 	bl	80005e0 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e240      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0ee      	beq.n	800118a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011b8:	d114      	bne.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80011cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d0:	4313      	orrs	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]
 80011d4:	e00c      	b.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000
 80011e0:	42470e40 	.word	0x42470e40
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011e6:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80011ee:	6093      	str	r3, [r2, #8]
 80011f0:	4947      	ldr	r1, [pc, #284]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80011f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011fe:	4313      	orrs	r3, r2
 8001200:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800120e:	4a41      	ldr	r2, [pc, #260]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001216:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00a      	beq.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001224:	493a      	ldr	r1, [pc, #232]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	4313      	orrs	r3, r2
 8001236:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00a      	beq.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001246:	4932      	ldr	r1, [pc, #200]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001248:	4b31      	ldr	r3, [pc, #196]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800124a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001256:	4313      	orrs	r3, r2
 8001258:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d011      	beq.n	800128c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001268:	4929      	ldr	r1, [pc, #164]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001270:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001278:	4313      	orrs	r3, r2
 800127a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001286:	d101      	bne.n	800128c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001298:	491d      	ldr	r1, [pc, #116]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800129c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	4313      	orrs	r3, r2
 80012aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d011      	beq.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80012ba:	4915      	ldr	r1, [pc, #84]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80012be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ca:	4313      	orrs	r3, r2
 80012cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012d8:	d101      	bne.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80012da:	2301      	movs	r3, #1
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d005      	beq.n	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012ec:	f040 80ff 	bne.w	80014ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80012f6:	f7ff f973 	bl	80005e0 <HAL_GetTick>
 80012fa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012fc:	e00e      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80012fe:	f7ff f96f 	bl	80005e0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d907      	bls.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e188      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001310:	40023800 	.word	0x40023800
 8001314:	424711e0 	.word	0x424711e0
 8001318:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800131c:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1ea      	bne.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001338:	2b00      	cmp	r3, #0
 800133a:	d009      	beq.n	8001350 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001344:	2b00      	cmp	r3, #0
 8001346:	d028      	beq.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d124      	bne.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001350:	4b71      	ldr	r3, [pc, #452]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001356:	0c1b      	lsrs	r3, r3, #16
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	3301      	adds	r3, #1
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001362:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001368:	0e1b      	lsrs	r3, r3, #24
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001370:	4969      	ldr	r1, [pc, #420]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	019b      	lsls	r3, r3, #6
 800137c:	431a      	orrs	r2, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	3b01      	subs	r3, #1
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	061b      	lsls	r3, r3, #24
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	071b      	lsls	r3, r3, #28
 8001394:	4313      	orrs	r3, r2
 8001396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013ae:	d00a      	beq.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d035      	beq.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c4:	d130      	bne.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013c6:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	3301      	adds	r3, #1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013de:	0f1b      	lsrs	r3, r3, #28
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80013e6:	494c      	ldr	r1, [pc, #304]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	431a      	orrs	r2, r3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	3b01      	subs	r3, #1
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	061b      	lsls	r3, r3, #24
 8001404:	431a      	orrs	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	071b      	lsls	r3, r3, #28
 800140a:	4313      	orrs	r3, r2
 800140c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001410:	4941      	ldr	r1, [pc, #260]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001418:	f023 021f 	bic.w	r2, r3, #31
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	3b01      	subs	r3, #1
 8001422:	4313      	orrs	r3, r2
 8001424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001430:	2b00      	cmp	r3, #0
 8001432:	d029      	beq.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800143c:	d124      	bne.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	3301      	adds	r3, #1
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001456:	0f1b      	lsrs	r3, r3, #28
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800145e:	492e      	ldr	r1, [pc, #184]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	3b01      	subs	r3, #1
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	061b      	lsls	r3, r3, #24
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	071b      	lsls	r3, r3, #28
 8001482:	4313      	orrs	r3, r2
 8001484:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001490:	2b00      	cmp	r3, #0
 8001492:	d016      	beq.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001494:	4920      	ldr	r1, [pc, #128]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	019b      	lsls	r3, r3, #6
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	3b01      	subs	r3, #1
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	061b      	lsls	r3, r3, #24
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	071b      	lsls	r3, r3, #28
 80014bc:	4313      	orrs	r3, r2
 80014be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014c8:	f7ff f88a 	bl	80005e0 <HAL_GetTick>
 80014cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014d0:	f7ff f886 	bl	80005e0 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e09f      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	f040 8095 	bne.w	8001620 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014fc:	f7ff f870 	bl	80005e0 <HAL_GetTick>
 8001500:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001502:	e00f      	b.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001504:	f7ff f86c 	bl	80005e0 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d908      	bls.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e085      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	42470068 	.word	0x42470068
 8001520:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800152c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001530:	d0e8      	beq.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800154e:	2b00      	cmp	r3, #0
 8001550:	d02b      	beq.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001556:	2b00      	cmp	r3, #0
 8001558:	d127      	bne.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800155c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001560:	0c1b      	lsrs	r3, r3, #16
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	3301      	adds	r3, #1
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800156c:	492f      	ldr	r1, [pc, #188]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699a      	ldr	r2, [r3, #24]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	431a      	orrs	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	3b01      	subs	r3, #1
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	4313      	orrs	r3, r2
 800158c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001590:	4926      	ldr	r1, [pc, #152]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	3b01      	subs	r3, #1
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4313      	orrs	r3, r2
 80015a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01d      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015be:	d118      	bne.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	0e1b      	lsrs	r3, r3, #24
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015ce:	4917      	ldr	r1, [pc, #92]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	3b01      	subs	r3, #1
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	431a      	orrs	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	4313      	orrs	r3, r2
 80015ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015f8:	f7fe fff2 	bl	80005e0 <HAL_GetTick>
 80015fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001600:	f7fe ffee 	bl	80005e0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e007      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800161a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800161e:	d1ef      	bne.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3730      	adds	r7, #48	; 0x30
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	42470070 	.word	0x42470070

08001634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001638:	b0a1      	sub	sp, #132	; 0x84
 800163a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001650:	4ba0      	ldr	r3, [pc, #640]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b0c      	cmp	r3, #12
 800165a:	f200 8193 	bhi.w	8001984 <HAL_RCC_GetSysClockFreq+0x350>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <HAL_RCC_GetSysClockFreq+0x30>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001699 	.word	0x08001699
 8001668:	08001985 	.word	0x08001985
 800166c:	08001985 	.word	0x08001985
 8001670:	08001985 	.word	0x08001985
 8001674:	0800169f 	.word	0x0800169f
 8001678:	08001985 	.word	0x08001985
 800167c:	08001985 	.word	0x08001985
 8001680:	08001985 	.word	0x08001985
 8001684:	080016a5 	.word	0x080016a5
 8001688:	08001985 	.word	0x08001985
 800168c:	08001985 	.word	0x08001985
 8001690:	08001985 	.word	0x08001985
 8001694:	08001821 	.word	0x08001821
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001698:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x2a4>)
 800169a:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 800169c:	e175      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800169e:	4b8f      	ldr	r3, [pc, #572]	; (80018dc <HAL_RCC_GetSysClockFreq+0x2a8>)
 80016a0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80016a2:	e172      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a4:	4b8b      	ldr	r3, [pc, #556]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ac:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ae:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d056      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ba:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	f04f 0400 	mov.w	r4, #0
 80016c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	ea01 0103 	and.w	r1, r1, r3
 80016d0:	ea02 0204 	and.w	r2, r2, r4
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	0160      	lsls	r0, r4, #5
 80016da:	6678      	str	r0, [r7, #100]	; 0x64
 80016dc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016de:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80016e2:	6678      	str	r0, [r7, #100]	; 0x64
 80016e4:	015b      	lsls	r3, r3, #5
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
 80016e8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80016ec:	1a5b      	subs	r3, r3, r1
 80016ee:	eb64 0402 	sbc.w	r4, r4, r2
 80016f2:	01a0      	lsls	r0, r4, #6
 80016f4:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016f6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016f8:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80016fc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80016fe:	0198      	lsls	r0, r3, #6
 8001700:	65b8      	str	r0, [r7, #88]	; 0x58
 8001702:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001706:	1aed      	subs	r5, r5, r3
 8001708:	eb66 0604 	sbc.w	r6, r6, r4
 800170c:	4633      	mov	r3, r6
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	657b      	str	r3, [r7, #84]	; 0x54
 8001712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001714:	4628      	mov	r0, r5
 8001716:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
 800171c:	462b      	mov	r3, r5
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	653b      	str	r3, [r7, #80]	; 0x50
 8001722:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001726:	461d      	mov	r5, r3
 8001728:	4626      	mov	r6, r4
 800172a:	186b      	adds	r3, r5, r1
 800172c:	eb46 0402 	adc.w	r4, r6, r2
 8001730:	4618      	mov	r0, r3
 8001732:	4621      	mov	r1, r4
 8001734:	460b      	mov	r3, r1
 8001736:	025b      	lsls	r3, r3, #9
 8001738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800173c:	4602      	mov	r2, r0
 800173e:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001744:	4603      	mov	r3, r0
 8001746:	025b      	lsls	r3, r3, #9
 8001748:	64bb      	str	r3, [r7, #72]	; 0x48
 800174a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	461a      	mov	r2, r3
 800175a:	4623      	mov	r3, r4
 800175c:	f7fe fd52 	bl	8000204 <__aeabi_uldivmod>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001766:	e04d      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001768:	4b5a      	ldr	r3, [pc, #360]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	ea01 0103 	and.w	r1, r1, r3
 800177e:	ea02 0204 	and.w	r2, r2, r4
 8001782:	460b      	mov	r3, r1
 8001784:	4614      	mov	r4, r2
 8001786:	0160      	lsls	r0, r4, #5
 8001788:	6478      	str	r0, [r7, #68]	; 0x44
 800178a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800178c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001790:	6478      	str	r0, [r7, #68]	; 0x44
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	643b      	str	r3, [r7, #64]	; 0x40
 8001796:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800179a:	1a5b      	subs	r3, r3, r1
 800179c:	eb64 0402 	sbc.w	r4, r4, r2
 80017a0:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 80017a4:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 80017a8:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 80017ac:	ebba 0a03 	subs.w	sl, sl, r3
 80017b0:	eb6b 0b04 	sbc.w	fp, fp, r4
 80017b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c8:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80017cc:	eb1a 0a01 	adds.w	sl, sl, r1
 80017d0:	eb4b 0b02 	adc.w	fp, fp, r2
 80017d4:	ea4f 238b 	mov.w	r3, fp, lsl #10
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
 80017da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017dc:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
 80017e2:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
 80017e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80017ec:	4650      	mov	r0, sl
 80017ee:	4659      	mov	r1, fp
 80017f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4623      	mov	r3, r4
 80017fa:	f7fe fd03 	bl	8000204 <__aeabi_uldivmod>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001804:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	3301      	adds	r3, #1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001814:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800181e:	e0b4      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001828:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d054      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	f04f 0400 	mov.w	r4, #0
 8001840:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	ea01 0103 	and.w	r1, r1, r3
 800184c:	ea02 0204 	and.w	r2, r2, r4
 8001850:	460b      	mov	r3, r1
 8001852:	4614      	mov	r4, r2
 8001854:	0160      	lsls	r0, r4, #5
 8001856:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800185a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800185e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
 8001864:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001868:	1a5b      	subs	r3, r3, r1
 800186a:	eb64 0402 	sbc.w	r4, r4, r2
 800186e:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001872:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001876:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800187a:	ebb8 0803 	subs.w	r8, r8, r3
 800187e:	eb69 0904 	sbc.w	r9, r9, r4
 8001882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001894:	623b      	str	r3, [r7, #32]
 8001896:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800189a:	eb18 0801 	adds.w	r8, r8, r1
 800189e:	eb49 0902 	adc.w	r9, r9, r2
 80018a2:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018ba:	4640      	mov	r0, r8
 80018bc:	4649      	mov	r1, r9
 80018be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018c0:	f04f 0400 	mov.w	r4, #0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	f7fe fc9c 	bl	8000204 <__aeabi_uldivmod>
 80018cc:	4603      	mov	r3, r0
 80018ce:	460c      	mov	r4, r1
 80018d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018d2:	e04b      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x338>
 80018d4:	40023800 	.word	0x40023800
 80018d8:	00f42400 	.word	0x00f42400
 80018dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_RCC_GetSysClockFreq+0x364>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	f04f 0400 	mov.w	r4, #0
 80018ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	ea01 0103 	and.w	r1, r1, r3
 80018f6:	ea02 0204 	and.w	r2, r2, r4
 80018fa:	460b      	mov	r3, r1
 80018fc:	4614      	mov	r4, r2
 80018fe:	0160      	lsls	r0, r4, #5
 8001900:	6178      	str	r0, [r7, #20]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001908:	6178      	str	r0, [r7, #20]
 800190a:	015b      	lsls	r3, r3, #5
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001912:	1a5b      	subs	r3, r3, r1
 8001914:	eb64 0402 	sbc.w	r4, r4, r2
 8001918:	01a6      	lsls	r6, r4, #6
 800191a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800191e:	019d      	lsls	r5, r3, #6
 8001920:	1aed      	subs	r5, r5, r3
 8001922:	eb66 0604 	sbc.w	r6, r6, r4
 8001926:	00f3      	lsls	r3, r6, #3
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	00eb      	lsls	r3, r5, #3
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800193a:	186d      	adds	r5, r5, r1
 800193c:	eb46 0602 	adc.w	r6, r6, r2
 8001940:	02b3      	lsls	r3, r6, #10
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	02ab      	lsls	r3, r5, #10
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001954:	4628      	mov	r0, r5
 8001956:	4631      	mov	r1, r6
 8001958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800195a:	f04f 0400 	mov.w	r4, #0
 800195e:	461a      	mov	r2, r3
 8001960:	4623      	mov	r3, r4
 8001962:	f7fe fc4f 	bl	8000204 <__aeabi_uldivmod>
 8001966:	4603      	mov	r3, r0
 8001968:	460c      	mov	r4, r1
 800196a:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_GetSysClockFreq+0x364>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0f1b      	lsrs	r3, r3, #28
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001978:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800197a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001982:	e002      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_RCC_GetSysClockFreq+0x368>)
 8001986:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800198c:	4618      	mov	r0, r3
 800198e:	3784      	adds	r7, #132	; 0x84
 8001990:	46bd      	mov	sp, r7
 8001992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	00f42400 	.word	0x00f42400

080019a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8083 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ba:	4b95      	ldr	r3, [pc, #596]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019c6:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019d2:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e0:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	d112      	bne.n	8001a12 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ec:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d05b      	beq.n	8001abe <HAL_RCC_OscConfig+0x11e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d157      	bne.n	8001abe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e216      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x8a>
 8001a1c:	4a7c      	ldr	r2, [pc, #496]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e01d      	b.n	8001a66 <HAL_RCC_OscConfig+0xc6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0xae>
 8001a34:	4a76      	ldr	r2, [pc, #472]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a36:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4a73      	ldr	r2, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0xc6>
 8001a4e:	4a70      	ldr	r2, [pc, #448]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a50:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4a6d      	ldr	r2, [pc, #436]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d013      	beq.n	8001a96 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7fe fdb7 	bl	80005e0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a76:	f7fe fdb3 	bl	80005e0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1db      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0xd6>
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7fe fda3 	bl	80005e0 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9e:	f7fe fd9f 	bl	80005e0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1c7      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab0:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0xfe>
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d06f      	beq.n	8001bac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d017      	beq.n	8001b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d11c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afc:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d116      	bne.n	8001b36 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x180>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e18f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	493b      	ldr	r1, [pc, #236]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b34:	e03a      	b.n	8001bac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d020      	beq.n	8001b80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7fe fd4c 	bl	80005e0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fd48 	bl	80005e0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e170      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4929      	ldr	r1, [pc, #164]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
 8001b7e:	e015      	b.n	8001bac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7fe fd2b 	bl	80005e0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7fe fd27 	bl	80005e0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e14f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d037      	beq.n	8001c28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d016      	beq.n	8001bee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_RCC_OscConfig+0x278>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7fe fd0b 	bl	80005e0 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bce:	f7fe fd07 	bl	80005e0 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e12f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x22e>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x278>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7fe fcf4 	bl	80005e0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7fe fcf0 	bl	80005e0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e118      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	42470000 	.word	0x42470000
 8001c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b8a      	ldr	r3, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8097 	beq.w	8001d64 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b83      	ldr	r3, [pc, #524]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10f      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4a7f      	ldr	r2, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b7c      	ldr	r3, [pc, #496]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d118      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4a76      	ldr	r2, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe fcaf 	bl	80005e0 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7fe fcab 	bl	80005e0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0d3      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x31a>
 8001cac:	4a66      	ldr	r2, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cae:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x354>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x33c>
 8001cc2:	4a61      	ldr	r2, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cc4:	4b60      	ldr	r3, [pc, #384]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cce:	4a5e      	ldr	r2, [pc, #376]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cd0:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x354>
 8001cdc:	4a5a      	ldr	r2, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cea:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	f023 0304 	bic.w	r3, r3, #4
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d015      	beq.n	8001d28 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7fe fc70 	bl	80005e0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7fe fc6c 	bl	80005e0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e092      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0ee      	beq.n	8001d04 <HAL_RCC_OscConfig+0x364>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7fe fc5a 	bl	80005e0 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe fc56 	bl	80005e0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e07c      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ee      	bne.n	8001d30 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d068      	beq.n	8001e3e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d060      	beq.n	8001e3a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d145      	bne.n	8001e0c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x4b0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7fe fc2b 	bl	80005e0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7fe fc27 	bl	80005e0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e04f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4926      	ldr	r1, [pc, #152]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	071b      	lsls	r3, r3, #28
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_RCC_OscConfig+0x4b0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe fbfc 	bl	80005e0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe fbf8 	bl	80005e0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e020      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x44c>
 8001e0a:	e018      	b.n	8001e3e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_OscConfig+0x4b0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe fbe5 	bl	80005e0 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fbe1 	bl	80005e0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x47a>
 8001e38:	e001      	b.n	8001e3e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	42470060 	.word	0x42470060

08001e54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e083      	b.n	8001f6e <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7f5b      	ldrb	r3, [r3, #29]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f001 ffa2 	bl	8003dc0 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	22ca      	movs	r2, #202	; 0xca
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2253      	movs	r2, #83	; 0x53
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fba8 	bl	80025e8 <RTC_EnterInitMode>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e05e      	b.n	8001f6e <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	6891      	ldr	r1, [r2, #8]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6850      	ldr	r0, [r2, #4]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6912      	ldr	r2, [r2, #16]
 8001ed6:	4310      	orrs	r0, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6952      	ldr	r2, [r2, #20]
 8001edc:	4302      	orrs	r2, r0
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	6911      	ldr	r1, [r2, #16]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6892      	ldr	r2, [r2, #8]
 8001efa:	0412      	lsls	r2, r2, #16
 8001efc:	430a      	orrs	r2, r1
 8001efe:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	68d2      	ldr	r2, [r2, #12]
 8001f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10e      	bne.n	8001f3c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fb3a 	bl	8002598 <HAL_RTC_WaitForSynchro>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	22ff      	movs	r2, #255	; 0xff
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2204      	movs	r2, #4
 8001f36:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e018      	b.n	8001f6e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6992      	ldr	r2, [r2, #24]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	22ff      	movs	r2, #255	; 0xff
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f76:	b590      	push	{r4, r7, lr}
 8001f78:	b087      	sub	sp, #28
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	7f1b      	ldrb	r3, [r3, #28]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_RTC_SetTime+0x1c>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e0b2      	b.n	80020f8 <HAL_RTC_SetTime+0x182>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d126      	bne.n	8001ff2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fb3f 	bl	8002640 <RTC_ByteToBcd2>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fb38 	bl	8002640 <RTC_ByteToBcd2>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fd4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	789b      	ldrb	r3, [r3, #2]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fb30 	bl	8002640 <RTC_ByteToBcd2>
 8001fe0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fe2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	78db      	ldrb	r3, [r3, #3]
 8001fea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e020      	b.n	8002034 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fb39 	bl	800267c <RTC_Bcd2ToByte>
 800200a:	4603      	mov	r3, r0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e002      	b.n	8002016 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2200      	movs	r2, #0
 8002014:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002022:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002028:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	78db      	ldrb	r3, [r3, #3]
 800202e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	22ca      	movs	r2, #202	; 0xca
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2253      	movs	r2, #83	; 0x53
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 facf 	bl	80025e8 <RTC_EnterInitMode>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2204      	movs	r2, #4
 800205c:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e047      	b.n	80020f8 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002072:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002076:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002086:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	6891      	ldr	r1, [r2, #8]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	68d0      	ldr	r0, [r2, #12]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	6912      	ldr	r2, [r2, #16]
 800209a:	4302      	orrs	r2, r0
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ae:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d111      	bne.n	80020e2 <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fa6a 	bl	8002598 <HAL_RTC_WaitForSynchro>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	22ff      	movs	r2, #255	; 0xff
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2204      	movs	r2, #4
 80020d6:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00a      	b.n	80020f8 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	22ff      	movs	r2, #255	; 0xff
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 80020f6:	2300      	movs	r3, #0
  }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	7f1b      	ldrb	r3, [r3, #28]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_RTC_SetDate+0x1c>
 8002118:	2302      	movs	r3, #2
 800211a:	e094      	b.n	8002246 <HAL_RTC_SetDate+0x146>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2202      	movs	r2, #2
 8002126:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <HAL_RTC_SetDate+0x4c>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	f023 0310 	bic.w	r3, r3, #16
 8002142:	b2db      	uxtb	r3, r3
 8002144:	330a      	adds	r3, #10
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11c      	bne.n	800218c <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fa72 	bl	8002640 <RTC_ByteToBcd2>
 800215c:	4603      	mov	r3, r0
 800215e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fa6b 	bl	8002640 <RTC_ByteToBcd2>
 800216a:	4603      	mov	r3, r0
 800216c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800216e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	789b      	ldrb	r3, [r3, #2]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fa63 	bl	8002640 <RTC_ByteToBcd2>
 800217a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800217c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e00e      	b.n	80021aa <HAL_RTC_SetDate+0xaa>
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(datetmpreg));
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002198:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800219e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	22ca      	movs	r2, #202	; 0xca
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2253      	movs	r2, #83	; 0x53
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fa14 	bl	80025e8 <RTC_EnterInitMode>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	22ff      	movs	r2, #255	; 0xff
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2204      	movs	r2, #4
 80021d2:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e033      	b.n	8002246 <HAL_RTC_SetDate+0x146>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021ec:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	68d2      	ldr	r2, [r2, #12]
 80021f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fc:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d111      	bne.n	8002230 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f9c3 	bl	8002598 <HAL_RTC_WaitForSynchro>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_RTC_SetDate+0x130>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	22ff      	movs	r2, #255	; 0xff
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2204      	movs	r2, #4
 8002224:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00a      	b.n	8002246 <HAL_RTC_SetDate+0x146>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	22ff      	movs	r2, #255	; 0xff
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 8002244:	2300      	movs	r3, #0
  }
}
 8002246:	4618      	mov	r0, r3
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
	...

08002250 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002264:	4ba1      	ldr	r3, [pc, #644]	; (80024ec <HAL_RTC_SetAlarm_IT+0x29c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4aa1      	ldr	r2, [pc, #644]	; (80024f0 <HAL_RTC_SetAlarm_IT+0x2a0>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0adb      	lsrs	r3, r3, #11
 8002270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	7f1b      	ldrb	r3, [r3, #28]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_RTC_SetAlarm_IT+0x36>
 8002282:	2302      	movs	r3, #2
 8002284:	e12e      	b.n	80024e4 <HAL_RTC_SetAlarm_IT+0x294>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2202      	movs	r2, #2
 8002290:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d137      	bne.n	8002308 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2200      	movs	r2, #0
 80022aa:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f9c5 	bl	8002640 <RTC_ByteToBcd2>
 80022b6:	4603      	mov	r3, r0
 80022b8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f9be 	bl	8002640 <RTC_ByteToBcd2>
 80022c4:	4603      	mov	r3, r0
 80022c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022c8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	789b      	ldrb	r3, [r3, #2]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f9b6 	bl	8002640 <RTC_ByteToBcd2>
 80022d4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022d6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	78db      	ldrb	r3, [r3, #3]
 80022de:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022e0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f9a8 	bl	8002640 <RTC_ByteToBcd2>
 80022f0:	4603      	mov	r3, r0
 80022f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022f4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002302:	4313      	orrs	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	e040      	b.n	800238a <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f9ae 	bl	800267c <RTC_Bcd2ToByte>
 8002320:	4603      	mov	r3, r0
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	e002      	b.n	800232c <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2200      	movs	r2, #0
 800232a:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d108      	bne.n	8002346 <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f99e 	bl	800267c <RTC_Bcd2ToByte>
 8002340:	4603      	mov	r3, r0
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	e007      	b.n	8002356 <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f995 	bl	800267c <RTC_Bcd2ToByte>
 8002352:	4603      	mov	r3, r0
 8002354:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002362:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002368:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	78db      	ldrb	r3, [r3, #3]
 800236e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002370:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002378:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800237a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002380:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002386:	4313      	orrs	r3, r2
 8002388:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	22ca      	movs	r2, #202	; 0xca
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2253      	movs	r2, #83	; 0x53
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ae:	d141      	bne.n	8002434 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	6892      	ldr	r2, [r2, #8]
 80023ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023be:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	68d2      	ldr	r2, [r2, #12]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80023d0:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	617a      	str	r2, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	22ff      	movs	r2, #255	; 0xff
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2203      	movs	r2, #3
 80023e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e077      	b.n	80024e4 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0e7      	beq.n	80023d2 <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	6892      	ldr	r2, [r2, #8]
 800241c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002420:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	6892      	ldr	r2, [r2, #8]
 800242c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	e040      	b.n	80024b6 <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002442:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	68d2      	ldr	r2, [r2, #12]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002454:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	617a      	str	r2, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2203      	movs	r2, #3
 800246c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e035      	b.n	80024e4 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0e7      	beq.n	8002456 <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80024b6:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3724      	adds	r7, #36	; 0x24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	20000008 	.word	0x20000008
 80024f0:	10624dd3 	.word	0x10624dd3
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f831 	bl	8002584 <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	68d2      	ldr	r2, [r2, #12]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002532:	60da      	str	r2, [r3, #12]
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f8b1 	bl	80026b8 <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002566:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RTC_AlarmIRQHandler+0x88>)
 800256a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256e:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	775a      	strb	r2, [r3, #29]
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40013c00 	.word	0x40013c00

08002584 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe f814 	bl	80005e0 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025ba:	e009      	b.n	80025d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025bc:	f7fe f810 	bl	80005e0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ca:	d901      	bls.n	80025d0 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e007      	b.n	80025e0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ee      	beq.n	80025bc <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d119      	bne.n	8002636 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f04f 32ff 	mov.w	r2, #4294967295
 800260a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800260c:	f7fd ffe8 	bl	80005e0 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002612:	e009      	b.n	8002628 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002614:	f7fd ffe4 	bl	80005e0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002622:	d901      	bls.n	8002628 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e007      	b.n	8002638 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 800264e:	e005      	b.n	800265c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3301      	adds	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	3b0a      	subs	r3, #10
 800265a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b09      	cmp	r3, #9
 8002660:	d8f6      	bhi.n	8002650 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	b2da      	uxtb	r2, r3
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	4313      	orrs	r3, r2
 800266e:	b2db      	uxtb	r3, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b2db      	uxtb	r3, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e01d      	b.n	800271a <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 fb80 	bl	8003df8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f000 f904 	bl	8002918 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}  
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fa10 	bl	8002b5c <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a10      	ldr	r2, [pc, #64]	; (8002784 <HAL_TIM_PWM_Start+0x60>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_PWM_Start+0x2c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a0f      	ldr	r2, [pc, #60]	; (8002788 <HAL_TIM_PWM_Start+0x64>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_TIM_PWM_Start+0x30>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_TIM_PWM_Start+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
} 
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40010000 	.word	0x40010000
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0b4      	b.n	8002910 <HAL_TIM_PWM_ConfigChannel+0x184>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	f200 809f 	bhi.w	80028fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80027be:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	080028fd 	.word	0x080028fd
 80027cc:	080028fd 	.word	0x080028fd
 80027d0:	080028fd 	.word	0x080028fd
 80027d4:	08002839 	.word	0x08002839
 80027d8:	080028fd 	.word	0x080028fd
 80027dc:	080028fd 	.word	0x080028fd
 80027e0:	080028fd 	.word	0x080028fd
 80027e4:	0800287b 	.word	0x0800287b
 80027e8:	080028fd 	.word	0x080028fd
 80027ec:	080028fd 	.word	0x080028fd
 80027f0:	080028fd 	.word	0x080028fd
 80027f4:	080028bb 	.word	0x080028bb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f9d0 	bl	8002ba4 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	6992      	ldr	r2, [r2, #24]
 800280e:	f042 0208 	orr.w	r2, r2, #8
 8002812:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	6992      	ldr	r2, [r2, #24]
 800281e:	f022 0204 	bic.w	r2, r2, #4
 8002822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	6991      	ldr	r1, [r2, #24]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	6912      	ldr	r2, [r2, #16]
 8002832:	430a      	orrs	r2, r1
 8002834:	619a      	str	r2, [r3, #24]
    }
    break;
 8002836:	e062      	b.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f914 	bl	8002a6c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	6992      	ldr	r2, [r2, #24]
 800284e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002852:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	6992      	ldr	r2, [r2, #24]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	6991      	ldr	r1, [r2, #24]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	6912      	ldr	r2, [r2, #16]
 8002872:	0212      	lsls	r2, r2, #8
 8002874:	430a      	orrs	r2, r1
 8002876:	619a      	str	r2, [r3, #24]
    }
    break;
 8002878:	e041      	b.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fa03 	bl	8002c8c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	69d2      	ldr	r2, [r2, #28]
 8002890:	f042 0208 	orr.w	r2, r2, #8
 8002894:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	69d2      	ldr	r2, [r2, #28]
 80028a0:	f022 0204 	bic.w	r2, r2, #4
 80028a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	69d1      	ldr	r1, [r2, #28]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	6912      	ldr	r2, [r2, #16]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
    }
    break;
 80028b8:	e021      	b.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fa5b 	bl	8002d7c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	69d2      	ldr	r2, [r2, #28]
 80028d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	69d2      	ldr	r2, [r2, #28]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	69d1      	ldr	r1, [r2, #28]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	6912      	ldr	r2, [r2, #16]
 80028f4:	0212      	lsls	r2, r2, #8
 80028f6:	430a      	orrs	r2, r1
 80028f8:	61da      	str	r2, [r3, #28]
    }
    break;
 80028fa:	e000      	b.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80028fc:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <TIM_Base_SetConfig+0x128>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <TIM_Base_SetConfig+0x44>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d00f      	beq.n	800295c <TIM_Base_SetConfig+0x44>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <TIM_Base_SetConfig+0x12c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0x44>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a40      	ldr	r2, [pc, #256]	; (8002a48 <TIM_Base_SetConfig+0x130>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0x44>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3f      	ldr	r2, [pc, #252]	; (8002a4c <TIM_Base_SetConfig+0x134>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0x44>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3e      	ldr	r2, [pc, #248]	; (8002a50 <TIM_Base_SetConfig+0x138>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <TIM_Base_SetConfig+0x48>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <TIM_Base_SetConfig+0x4a>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <TIM_Base_SetConfig+0x128>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d02b      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d027      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <TIM_Base_SetConfig+0x12c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d023      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <TIM_Base_SetConfig+0x130>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d01f      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <TIM_Base_SetConfig+0x134>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d01b      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <TIM_Base_SetConfig+0x138>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d017      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <TIM_Base_SetConfig+0x13c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a29      	ldr	r2, [pc, #164]	; (8002a58 <TIM_Base_SetConfig+0x140>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00f      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <TIM_Base_SetConfig+0x144>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <TIM_Base_SetConfig+0x148>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <TIM_Base_SetConfig+0x14c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0xc0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <TIM_Base_SetConfig+0x150>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <TIM_Base_SetConfig+0xc4>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <TIM_Base_SetConfig+0xc6>
 80029dc:	2300      	movs	r3, #0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <TIM_Base_SetConfig+0x128>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <TIM_Base_SetConfig+0x102>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <TIM_Base_SetConfig+0x138>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <TIM_Base_SetConfig+0x106>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <TIM_Base_SetConfig+0x108>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	615a      	str	r2, [r3, #20]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40010400 	.word	0x40010400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40014400 	.word	0x40014400
 8002a5c:	40014800 	.word	0x40014800
 8002a60:	40001800 	.word	0x40001800
 8002a64:	40001c00 	.word	0x40001c00
 8002a68:	40002000 	.word	0x40002000

08002a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0210 	bic.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0320 	bic.w	r3, r3, #32
 8002ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <TIM_OC2_SetConfig+0xe8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_OC2_SetConfig+0x74>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <TIM_OC2_SetConfig+0xec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <TIM_OC2_SetConfig+0x78>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <TIM_OC2_SetConfig+0x7a>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d021      	beq.n	8002b2e <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	621a      	str	r2, [r3, #32]
}
 8002b48:	bf00      	nop
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40010400 	.word	0x40010400

08002b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 0302 	bic.w	r3, r3, #2
 8002bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <TIM_OC1_SetConfig+0xe0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_OC1_SetConfig+0x70>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <TIM_OC1_SetConfig+0xe4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <TIM_OC1_SetConfig+0x74>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <TIM_OC1_SetConfig+0x76>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01e      	beq.n	8002c5c <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f023 0308 	bic.w	r3, r3, #8
 8002c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	621a      	str	r2, [r3, #32]
} 
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40010400 	.word	0x40010400

08002c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <TIM_OC3_SetConfig+0xe8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_OC3_SetConfig+0x72>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <TIM_OC3_SetConfig+0xec>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <TIM_OC3_SetConfig+0x76>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <TIM_OC3_SetConfig+0x78>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d021      	beq.n	8002d4c <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d22:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40010400 	.word	0x40010400

08002d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbe:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	031b      	lsls	r3, r3, #12
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <TIM_OC4_SetConfig+0xb8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_OC4_SetConfig+0x74>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <TIM_OC4_SetConfig+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <TIM_OC4_SetConfig+0x78>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <TIM_OC4_SetConfig+0x7a>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	019b      	lsls	r3, r3, #6
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e032      	b.n	8002eba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	6852      	ldr	r2, [r2, #4]
 8002e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e72:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	6851      	ldr	r1, [r2, #4]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e94:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	6891      	ldr	r1, [r2, #8]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	6852      	ldr	r2, [r2, #4]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
} 
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e044      	b.n	8002f6c <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e03f      	b.n	800300a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f001 f83a 	bl	8004018 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f829 	bl	8003014 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	6912      	ldr	r2, [r2, #16]
 8002fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6952      	ldr	r2, [r2, #20]
 8002fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	68d2      	ldr	r2, [r2, #12]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800302e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003050:	f023 030c 	bic.w	r3, r3, #12
 8003054:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4313      	orrs	r3, r2
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003088:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a4:	f040 80e4 	bne.w	8003270 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4aab      	ldr	r2, [pc, #684]	; (800335c <UART_SetConfig+0x348>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <UART_SetConfig+0xa8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4aaa      	ldr	r2, [pc, #680]	; (8003360 <UART_SetConfig+0x34c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d16c      	bne.n	8003196 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681c      	ldr	r4, [r3, #0]
 80030c0:	f7fd ff7a 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009a      	lsls	r2, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	4aa2      	ldr	r2, [pc, #648]	; (8003364 <UART_SetConfig+0x350>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	011d      	lsls	r5, r3, #4
 80030e4:	f7fd ff68 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80030fe:	f7fd ff5b 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8003102:	4602      	mov	r2, r0
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009a      	lsls	r2, r3, #2
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	4a92      	ldr	r2, [pc, #584]	; (8003364 <UART_SetConfig+0x350>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2264      	movs	r2, #100	; 0x64
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	1af3      	subs	r3, r6, r3
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	3332      	adds	r3, #50	; 0x32
 800312c:	4a8d      	ldr	r2, [pc, #564]	; (8003364 <UART_SetConfig+0x350>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800313a:	441d      	add	r5, r3
 800313c:	f7fd ff3c 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8003140:	4602      	mov	r2, r0
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb2 f6f3 	udiv	r6, r2, r3
 8003156:	f7fd ff2f 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 800315a:	4602      	mov	r2, r0
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009a      	lsls	r2, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	4a7c      	ldr	r2, [pc, #496]	; (8003364 <UART_SetConfig+0x350>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2264      	movs	r2, #100	; 0x64
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	1af3      	subs	r3, r6, r3
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	3332      	adds	r3, #50	; 0x32
 8003184:	4a77      	ldr	r2, [pc, #476]	; (8003364 <UART_SetConfig+0x350>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	442b      	add	r3, r5
 8003192:	60a3      	str	r3, [r4, #8]
 8003194:	e154      	b.n	8003440 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681c      	ldr	r4, [r3, #0]
 800319a:	f7fd fef9 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009a      	lsls	r2, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	4a6b      	ldr	r2, [pc, #428]	; (8003364 <UART_SetConfig+0x350>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	011d      	lsls	r5, r3, #4
 80031be:	f7fd fee7 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009a      	lsls	r2, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80031d8:	f7fd feda 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009a      	lsls	r2, r3, #2
 80031e6:	441a      	add	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <UART_SetConfig+0x350>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	2264      	movs	r2, #100	; 0x64
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	1af3      	subs	r3, r6, r3
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	3332      	adds	r3, #50	; 0x32
 8003206:	4a57      	ldr	r2, [pc, #348]	; (8003364 <UART_SetConfig+0x350>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003214:	441d      	add	r5, r3
 8003216:	f7fd febb 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 800321a:	4602      	mov	r2, r0
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009a      	lsls	r2, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003230:	f7fd feae 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8003234:	4602      	mov	r2, r0
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009a      	lsls	r2, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4a46      	ldr	r2, [pc, #280]	; (8003364 <UART_SetConfig+0x350>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2264      	movs	r2, #100	; 0x64
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	1af3      	subs	r3, r6, r3
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a41      	ldr	r2, [pc, #260]	; (8003364 <UART_SetConfig+0x350>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	442b      	add	r3, r5
 800326c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800326e:	e0e7      	b.n	8003440 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a39      	ldr	r2, [pc, #228]	; (800335c <UART_SetConfig+0x348>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <UART_SetConfig+0x270>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a38      	ldr	r2, [pc, #224]	; (8003360 <UART_SetConfig+0x34c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d171      	bne.n	8003368 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681c      	ldr	r4, [r3, #0]
 8003288:	f7fd fe96 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 800328c:	4602      	mov	r2, r0
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009a      	lsls	r2, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <UART_SetConfig+0x350>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	011d      	lsls	r5, r3, #4
 80032ac:	f7fd fe84 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009a      	lsls	r2, r3, #2
 80032ba:	441a      	add	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80032c6:	f7fd fe77 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009a      	lsls	r2, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	4a20      	ldr	r2, [pc, #128]	; (8003364 <UART_SetConfig+0x350>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2264      	movs	r2, #100	; 0x64
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	1af3      	subs	r3, r6, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3332      	adds	r3, #50	; 0x32
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <UART_SetConfig+0x350>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003300:	441d      	add	r5, r3
 8003302:	f7fd fe59 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8003306:	4602      	mov	r2, r0
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f6f3 	udiv	r6, r2, r3
 800331c:	f7fd fe4c 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8003320:	4602      	mov	r2, r0
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009a      	lsls	r2, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <UART_SetConfig+0x350>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2264      	movs	r2, #100	; 0x64
 8003340:	fb02 f303 	mul.w	r3, r2, r3
 8003344:	1af3      	subs	r3, r6, r3
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a06      	ldr	r2, [pc, #24]	; (8003364 <UART_SetConfig+0x350>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	442b      	add	r3, r5
 8003358:	60a3      	str	r3, [r4, #8]
 800335a:	e071      	b.n	8003440 <UART_SetConfig+0x42c>
 800335c:	40011000 	.word	0x40011000
 8003360:	40011400 	.word	0x40011400
 8003364:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681c      	ldr	r4, [r3, #0]
 800336c:	f7fd fe10 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8003370:	4602      	mov	r2, r0
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009a      	lsls	r2, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	4a30      	ldr	r2, [pc, #192]	; (8003448 <UART_SetConfig+0x434>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	011d      	lsls	r5, r3, #4
 8003390:	f7fd fdfe 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8003394:	4602      	mov	r2, r0
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	441a      	add	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80033aa:	f7fd fdf1 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009a      	lsls	r2, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <UART_SetConfig+0x434>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2264      	movs	r2, #100	; 0x64
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	1af3      	subs	r3, r6, r3
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	3332      	adds	r3, #50	; 0x32
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <UART_SetConfig+0x434>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	441d      	add	r5, r3
 80033e6:	f7fd fdd3 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009a      	lsls	r2, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8003400:	f7fd fdc6 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8003404:	4602      	mov	r2, r0
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009a      	lsls	r2, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <UART_SetConfig+0x434>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	2264      	movs	r2, #100	; 0x64
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	1af3      	subs	r3, r6, r3
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	3332      	adds	r3, #50	; 0x32
 800342e:	4a06      	ldr	r2, [pc, #24]	; (8003448 <UART_SetConfig+0x434>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	442b      	add	r3, r5
 800343c:	60a3      	str	r3, [r4, #8]
}
 800343e:	e7ff      	b.n	8003440 <UART_SetConfig+0x42c>
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003448:	51eb851f 	.word	0x51eb851f

0800344c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003450:	f7fd f860 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003454:	f000 f85c 	bl	8003510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003458:	f000 fb70 	bl	8003b3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800345c:	f000 fb44 	bl	8003ae8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003460:	f000 f8e6 	bl	8003630 <MX_I2C1_Init>
  MX_TIM4_Init(0);//all PWM (for LED and FL) initialized with 0 (all lights off)
 8003464:	2000      	movs	r0, #0
 8003466:	f000 fa57 	bl	8003918 <MX_TIM4_Init>
  MX_TIM3_Init(0);
 800346a:	2000      	movs	r0, #0
 800346c:	f000 f9f6 	bl	800385c <MX_TIM3_Init>
  MX_TIM8_Init(0);
 8003470:	2000      	movs	r0, #0
 8003472:	f000 faaf 	bl	80039d4 <MX_TIM8_Init>
  MX_TIM2_Init(0);
 8003476:	2000      	movs	r0, #0
 8003478:	f000 f994 	bl	80037a4 <MX_TIM2_Init>
  MX_RTC_Init();
 800347c:	f000 f906 	bl	800368c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003480:	2201      	movs	r2, #1
 8003482:	2120      	movs	r1, #32
 8003484:	481e      	ldr	r0, [pc, #120]	; (8003500 <main+0xb4>)
 8003486:	f7fd fb77 	bl	8000b78 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */
  //Set time, data and alarm
  	//1) Set time
  	myTime.Hours = 12;
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <main+0xb8>)
 800348c:	220c      	movs	r2, #12
 800348e:	701a      	strb	r2, [r3, #0]
  	myTime.Minutes = 59;
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <main+0xb8>)
 8003492:	223b      	movs	r2, #59	; 0x3b
 8003494:	705a      	strb	r2, [r3, #1]
  	myTime.Seconds = 45;
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <main+0xb8>)
 8003498:	222d      	movs	r2, #45	; 0x2d
 800349a:	709a      	strb	r2, [r3, #2]
  	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 800349c:	2200      	movs	r2, #0
 800349e:	4919      	ldr	r1, [pc, #100]	; (8003504 <main+0xb8>)
 80034a0:	4819      	ldr	r0, [pc, #100]	; (8003508 <main+0xbc>)
 80034a2:	f7fe fd68 	bl	8001f76 <HAL_RTC_SetTime>
  	//2) Set date
  	myDate.Date = 6;
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <main+0xc0>)
 80034a8:	2206      	movs	r2, #6
 80034aa:	709a      	strb	r2, [r3, #2]
  	myDate.Month = RTC_MONTH_DECEMBER;
 80034ac:	4b17      	ldr	r3, [pc, #92]	; (800350c <main+0xc0>)
 80034ae:	2212      	movs	r2, #18
 80034b0:	705a      	strb	r2, [r3, #1]
  	myDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <main+0xc0>)
 80034b4:	2204      	movs	r2, #4
 80034b6:	701a      	strb	r2, [r3, #0]
  	myDate.Year = 18;
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <main+0xc0>)
 80034ba:	2212      	movs	r2, #18
 80034bc:	70da      	strb	r2, [r3, #3]
  	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 80034be:	2200      	movs	r2, #0
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <main+0xc0>)
 80034c2:	4811      	ldr	r0, [pc, #68]	; (8003508 <main+0xbc>)
 80034c4:	f7fe fe1c 	bl	8002100 <HAL_RTC_SetDate>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	set_RGB(25,0,0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	2019      	movs	r0, #25
 80034ce:	f000 fbed 	bl	8003cac <set_RGB>
	HAL_Delay(1000);
 80034d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034d6:	f7fd f88f 	bl	80005f8 <HAL_Delay>
	set_RGB(75,0,0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	204b      	movs	r0, #75	; 0x4b
 80034e0:	f000 fbe4 	bl	8003cac <set_RGB>
	HAL_Delay(1000);
 80034e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034e8:	f7fd f886 	bl	80005f8 <HAL_Delay>
	set_RGB(100,0,0);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2100      	movs	r1, #0
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f000 fbdb 	bl	8003cac <set_RGB>
	HAL_Delay(1000);
 80034f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034fa:	f7fd f87d 	bl	80005f8 <HAL_Delay>
	set_RGB(25,0,0);
 80034fe:	e7e3      	b.n	80034c8 <main+0x7c>
 8003500:	40020000 	.word	0x40020000
 8003504:	2000002c 	.word	0x2000002c
 8003508:	2000014c 	.word	0x2000014c
 800350c:	20000148 	.word	0x20000148

08003510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0ac      	sub	sp, #176	; 0xb0
 8003514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003516:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800351a:	2234      	movs	r2, #52	; 0x34
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fea0 	bl	8004264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003524:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	225c      	movs	r2, #92	; 0x5c
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fe91 	bl	8004264 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <SystemClock_Config+0x118>)
 8003548:	4b37      	ldr	r3, [pc, #220]	; (8003628 <SystemClock_Config+0x118>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b35      	ldr	r3, [pc, #212]	; (8003628 <SystemClock_Config+0x118>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4a32      	ldr	r2, [pc, #200]	; (800362c <SystemClock_Config+0x11c>)
 8003564:	4b31      	ldr	r3, [pc, #196]	; (800362c <SystemClock_Config+0x11c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800356c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b2e      	ldr	r3, [pc, #184]	; (800362c <SystemClock_Config+0x11c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800357e:	2306      	movs	r3, #6
 8003580:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003582:	2301      	movs	r3, #1
 8003584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003588:	2301      	movs	r3, #1
 800358a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800358e:	2310      	movs	r3, #16
 8003590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003594:	2302      	movs	r3, #2
 8003596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800359a:	2300      	movs	r3, #0
 800359c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 80035a0:	2310      	movs	r3, #16
 80035a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80035a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80035aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80035ae:	2304      	movs	r3, #4
 80035b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035b4:	2302      	movs	r3, #2
 80035b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035ba:	2302      	movs	r3, #2
 80035bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe f9eb 	bl	80019a0 <HAL_RCC_OscConfig>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80035d0:	f000 fb7f 	bl	8003cd2 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d4:	230f      	movs	r3, #15
 80035d6:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035d8:	2302      	movs	r3, #2
 80035da:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035dc:	2300      	movs	r3, #0
 80035de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035e6:	2300      	movs	r3, #0
 80035e8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035ee:	2102      	movs	r1, #2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd fbdf 	bl	8000db4 <HAL_RCC_ClockConfig>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80035fc:	f000 fb69 	bl	8003cd2 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003600:	2320      	movs	r3, #32
 8003602:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fce6 	bl	8000fe0 <HAL_RCCEx_PeriphCLKConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800361a:	f000 fb5a 	bl	8003cd2 <Error_Handler>
  }
}
 800361e:	bf00      	nop
 8003620:	37b0      	adds	r7, #176	; 0xb0
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	40007000 	.word	0x40007000

08003630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <MX_I2C1_Init+0x50>)
 8003636:	4a13      	ldr	r2, [pc, #76]	; (8003684 <MX_I2C1_Init+0x54>)
 8003638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <MX_I2C1_Init+0x50>)
 800363c:	4a12      	ldr	r2, [pc, #72]	; (8003688 <MX_I2C1_Init+0x58>)
 800363e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <MX_I2C1_Init+0x50>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <MX_I2C1_Init+0x50>)
 8003648:	2200      	movs	r2, #0
 800364a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <MX_I2C1_Init+0x50>)
 800364e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <MX_I2C1_Init+0x50>)
 8003656:	2200      	movs	r2, #0
 8003658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <MX_I2C1_Init+0x50>)
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <MX_I2C1_Init+0x50>)
 8003662:	2200      	movs	r2, #0
 8003664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <MX_I2C1_Init+0x50>)
 8003668:	2200      	movs	r2, #0
 800366a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800366c:	4804      	ldr	r0, [pc, #16]	; (8003680 <MX_I2C1_Init+0x50>)
 800366e:	f7fd fac1 	bl	8000bf4 <HAL_I2C_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003678:	f000 fb2b 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200000b8 	.word	0x200000b8
 8003684:	40005400 	.word	0x40005400
 8003688:	000186a0 	.word	0x000186a0

0800368c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b090      	sub	sp, #64	; 0x40
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036a2:	2300      	movs	r3, #0
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80036a6:	463b      	mov	r3, r7
 80036a8:	2228      	movs	r2, #40	; 0x28
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fdd9 	bl	8004264 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <MX_RTC_Init+0x110>)
 80036b4:	4a3a      	ldr	r2, [pc, #232]	; (80037a0 <MX_RTC_Init+0x114>)
 80036b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036b8:	4b38      	ldr	r3, [pc, #224]	; (800379c <MX_RTC_Init+0x110>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036be:	4b37      	ldr	r3, [pc, #220]	; (800379c <MX_RTC_Init+0x110>)
 80036c0:	227f      	movs	r2, #127	; 0x7f
 80036c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036c4:	4b35      	ldr	r3, [pc, #212]	; (800379c <MX_RTC_Init+0x110>)
 80036c6:	22ff      	movs	r2, #255	; 0xff
 80036c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <MX_RTC_Init+0x110>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036d0:	4b32      	ldr	r3, [pc, #200]	; (800379c <MX_RTC_Init+0x110>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036d6:	4b31      	ldr	r3, [pc, #196]	; (800379c <MX_RTC_Init+0x110>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036dc:	482f      	ldr	r0, [pc, #188]	; (800379c <MX_RTC_Init+0x110>)
 80036de:	f7fe fbb9 	bl	8001e54 <HAL_RTC_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80036e8:	f000 faf3 	bl	8003cd2 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036fe:	2300      	movs	r3, #0
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800370a:	2201      	movs	r2, #1
 800370c:	4619      	mov	r1, r3
 800370e:	4823      	ldr	r0, [pc, #140]	; (800379c <MX_RTC_Init+0x110>)
 8003710:	f7fe fc31 	bl	8001f76 <HAL_RTC_SetTime>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800371a:	f000 fada 	bl	8003cd2 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x18;
 8003730:	2318      	movs	r3, #24
 8003732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800373a:	2201      	movs	r2, #1
 800373c:	4619      	mov	r1, r3
 800373e:	4817      	ldr	r0, [pc, #92]	; (800379c <MX_RTC_Init+0x110>)
 8003740:	f7fe fcde 	bl	8002100 <HAL_RTC_SetDate>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800374a:	f000 fac2 	bl	8003cd2 <Error_Handler>
  }
  /**Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800374e:	2300      	movs	r3, #0
 8003750:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003752:	2300      	movs	r3, #0
 8003754:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003756:	2300      	movs	r3, #0
 8003758:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800377e:	463b      	mov	r3, r7
 8003780:	2201      	movs	r2, #1
 8003782:	4619      	mov	r1, r3
 8003784:	4805      	ldr	r0, [pc, #20]	; (800379c <MX_RTC_Init+0x110>)
 8003786:	f7fe fd63 	bl	8002250 <HAL_RTC_SetAlarm_IT>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003790:	f000 fa9f 	bl	8003cd2 <Error_Handler>
  }


}
 8003794:	bf00      	nop
 8003796:	3740      	adds	r7, #64	; 0x40
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2000014c 	.word	0x2000014c
 80037a0:	40002800 	.word	0x40002800

080037a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(int brightness)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]
 80037c4:	611a      	str	r2, [r3, #16]
 80037c6:	615a      	str	r2, [r3, #20]
 80037c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037ca:	4b23      	ldr	r3, [pc, #140]	; (8003858 <MX_TIM2_Init+0xb4>)
 80037cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <MX_TIM2_Init+0xb4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <MX_TIM2_Init+0xb4>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80037de:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <MX_TIM2_Init+0xb4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e4:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <MX_TIM2_Init+0xb4>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037ea:	481b      	ldr	r0, [pc, #108]	; (8003858 <MX_TIM2_Init+0xb4>)
 80037ec:	f7fe ff6e 	bl	80026cc <HAL_TIM_PWM_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80037f6:	f000 fa6c 	bl	8003cd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003806:	4619      	mov	r1, r3
 8003808:	4813      	ldr	r0, [pc, #76]	; (8003858 <MX_TIM2_Init+0xb4>)
 800380a:	f7ff fb17 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003814:	f000 fa5d 	bl	8003cd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003818:	2360      	movs	r3, #96	; 0x60
 800381a:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = brightness;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	2208      	movs	r2, #8
 800382e:	4619      	mov	r1, r3
 8003830:	4809      	ldr	r0, [pc, #36]	; (8003858 <MX_TIM2_Init+0xb4>)
 8003832:	f7fe ffab 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800383c:	f000 fa49 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8003840:	2108      	movs	r1, #8
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_TIM2_Init+0xb4>)
 8003844:	f7fe ff6e 	bl	8002724 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003848:	4803      	ldr	r0, [pc, #12]	; (8003858 <MX_TIM2_Init+0xb4>)
 800384a:	f000 fb37 	bl	8003ebc <HAL_TIM_MspPostInit>

}
 800384e:	bf00      	nop
 8003850:	3730      	adds	r7, #48	; 0x30
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000016c 	.word	0x2000016c

0800385c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(int duty)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08c      	sub	sp, #48	; 0x30
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800386e:	f107 030c 	add.w	r3, r7, #12
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	615a      	str	r2, [r3, #20]
 8003880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <MX_TIM3_Init+0xb4>)
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <MX_TIM3_Init+0xb8>)
 8003886:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <MX_TIM3_Init+0xb4>)
 800388a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800388e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003890:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <MX_TIM3_Init+0xb4>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <MX_TIM3_Init+0xb4>)
 8003898:	2264      	movs	r2, #100	; 0x64
 800389a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <MX_TIM3_Init+0xb4>)
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038a2:	481b      	ldr	r0, [pc, #108]	; (8003910 <MX_TIM3_Init+0xb4>)
 80038a4:	f7fe ff12 	bl	80026cc <HAL_TIM_PWM_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80038ae:	f000 fa10 	bl	8003cd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038be:	4619      	mov	r1, r3
 80038c0:	4813      	ldr	r0, [pc, #76]	; (8003910 <MX_TIM3_Init+0xb4>)
 80038c2:	f7ff fabb 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80038cc:	f000 fa01 	bl	8003cd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d0:	2360      	movs	r3, #96	; 0x60
 80038d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	2204      	movs	r2, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4809      	ldr	r0, [pc, #36]	; (8003910 <MX_TIM3_Init+0xb4>)
 80038ea:	f7fe ff4f 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80038f4:	f000 f9ed 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80038f8:	2104      	movs	r1, #4
 80038fa:	4805      	ldr	r0, [pc, #20]	; (8003910 <MX_TIM3_Init+0xb4>)
 80038fc:	f7fe ff12 	bl	8002724 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <MX_TIM3_Init+0xb4>)
 8003902:	f000 fadb 	bl	8003ebc <HAL_TIM_MspPostInit>

}
 8003906:	bf00      	nop
 8003908:	3730      	adds	r7, #48	; 0x30
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	2000010c 	.word	0x2000010c
 8003914:	40000400 	.word	0x40000400

08003918 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(int duty)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08c      	sub	sp, #48	; 0x30
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	615a      	str	r2, [r3, #20]
 800393c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <MX_TIM4_Init+0xb4>)
 8003940:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <MX_TIM4_Init+0xb8>)
 8003942:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8003944:	4b21      	ldr	r3, [pc, #132]	; (80039cc <MX_TIM4_Init+0xb4>)
 8003946:	f44f 7252 	mov.w	r2, #840	; 0x348
 800394a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394c:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <MX_TIM4_Init+0xb4>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <MX_TIM4_Init+0xb4>)
 8003954:	2264      	movs	r2, #100	; 0x64
 8003956:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <MX_TIM4_Init+0xb4>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800395e:	481b      	ldr	r0, [pc, #108]	; (80039cc <MX_TIM4_Init+0xb4>)
 8003960:	f7fe feb4 	bl	80026cc <HAL_TIM_PWM_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800396a:	f000 f9b2 	bl	8003cd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003972:	2300      	movs	r3, #0
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800397a:	4619      	mov	r1, r3
 800397c:	4813      	ldr	r0, [pc, #76]	; (80039cc <MX_TIM4_Init+0xb4>)
 800397e:	f7ff fa5d 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8003988:	f000 f9a3 	bl	8003cd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800398c:	2360      	movs	r3, #96	; 0x60
 800398e:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	2200      	movs	r2, #0
 80039a2:	4619      	mov	r1, r3
 80039a4:	4809      	ldr	r0, [pc, #36]	; (80039cc <MX_TIM4_Init+0xb4>)
 80039a6:	f7fe fef1 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80039b0:	f000 f98f 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80039b4:	2100      	movs	r1, #0
 80039b6:	4805      	ldr	r0, [pc, #20]	; (80039cc <MX_TIM4_Init+0xb4>)
 80039b8:	f7fe feb4 	bl	8002724 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80039bc:	4803      	ldr	r0, [pc, #12]	; (80039cc <MX_TIM4_Init+0xb4>)
 80039be:	f000 fa7d 	bl	8003ebc <HAL_TIM_MspPostInit>

}
 80039c2:	bf00      	nop
 80039c4:	3730      	adds	r7, #48	; 0x30
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000007c 	.word	0x2000007c
 80039d0:	40000800 	.word	0x40000800

080039d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(int duty)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b092      	sub	sp, #72	; 0x48
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	615a      	str	r2, [r3, #20]
 80039f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	615a      	str	r2, [r3, #20]
 8003a0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a10:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <MX_TIM8_Init+0x110>)
 8003a12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840;
 8003a14:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a16:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003a1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1c:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a24:	2264      	movs	r2, #100	; 0x64
 8003a26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a34:	482a      	ldr	r0, [pc, #168]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a36:	f7fe fe49 	bl	80026cc <HAL_TIM_PWM_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8003a40:	f000 f947 	bl	8003cd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a50:	4619      	mov	r1, r3
 8003a52:	4823      	ldr	r0, [pc, #140]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a54:	f7ff f9f2 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8003a5e:	f000 f938 	bl	8003cd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a62:	2360      	movs	r3, #96	; 0x60
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = duty;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a82:	2204      	movs	r2, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4816      	ldr	r0, [pc, #88]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003a88:	f7fe fe80 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003a92:	f000 f91e 	bl	8003cd2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003aaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4809      	ldr	r0, [pc, #36]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003abc:	f7ff fa03 	bl	8002ec6 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003ac6:	f000 f904 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8003aca:	2104      	movs	r1, #4
 8003acc:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003ace:	f7fe fe29 	bl	8002724 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003ad2:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <MX_TIM8_Init+0x10c>)
 8003ad4:	f000 f9f2 	bl	8003ebc <HAL_TIM_MspPostInit>

}
 8003ad8:	bf00      	nop
 8003ada:	3748      	adds	r7, #72	; 0x48
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000040 	.word	0x20000040
 8003ae4:	40010400 	.word	0x40010400

08003ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003aee:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <MX_USART2_UART_Init+0x50>)
 8003af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003b0e:	220c      	movs	r2, #12
 8003b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b12:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b1e:	4805      	ldr	r0, [pc, #20]	; (8003b34 <MX_USART2_UART_Init+0x4c>)
 8003b20:	f7ff fa2a 	bl	8002f78 <HAL_UART_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b2a:	f000 f8d2 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200001a8 	.word	0x200001a8
 8003b38:	40004400 	.word	0x40004400

08003b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	4a4f      	ldr	r2, [pc, #316]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b58:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	f043 0304 	orr.w	r3, r3, #4
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4a48      	ldr	r2, [pc, #288]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b74:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b45      	ldr	r3, [pc, #276]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	4a41      	ldr	r2, [pc, #260]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b90:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003bac:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <MX_GPIO_Init+0x158>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	607b      	str	r3, [r7, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2160      	movs	r1, #96	; 0x60
 8003bc6:	4834      	ldr	r0, [pc, #208]	; (8003c98 <MX_GPIO_Init+0x15c>)
 8003bc8:	f7fc ffd6 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2120      	movs	r1, #32
 8003bd0:	4832      	ldr	r0, [pc, #200]	; (8003c9c <MX_GPIO_Init+0x160>)
 8003bd2:	f7fc ffd1 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <MX_GPIO_Init+0x164>)
 8003bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4619      	mov	r1, r3
 8003bea:	482e      	ldr	r0, [pc, #184]	; (8003ca4 <MX_GPIO_Init+0x168>)
 8003bec:	f7fc fe32 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <MX_GPIO_Init+0x16c>)
 8003bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	4619      	mov	r1, r3
 8003c02:	4828      	ldr	r0, [pc, #160]	; (8003ca4 <MX_GPIO_Init+0x168>)
 8003c04:	f7fc fe26 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8003c08:	2360      	movs	r3, #96	; 0x60
 8003c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	481e      	ldr	r0, [pc, #120]	; (8003c98 <MX_GPIO_Init+0x15c>)
 8003c20:	f7fc fe18 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <MX_GPIO_Init+0x16c>)
 8003c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	4619      	mov	r1, r3
 8003c38:	4817      	ldr	r0, [pc, #92]	; (8003c98 <MX_GPIO_Init+0x15c>)
 8003c3a:	f7fc fe0b 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	4619      	mov	r1, r3
 8003c54:	4811      	ldr	r0, [pc, #68]	; (8003c9c <MX_GPIO_Init+0x160>)
 8003c56:	f7fc fdfd 	bl	8000854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	2007      	movs	r0, #7
 8003c60:	f7fc fdc1 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003c64:	2007      	movs	r0, #7
 8003c66:	f7fc fdda 	bl	800081e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	2017      	movs	r0, #23
 8003c70:	f7fc fdb9 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c74:	2017      	movs	r0, #23
 8003c76:	f7fc fdd2 	bl	800081e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2028      	movs	r0, #40	; 0x28
 8003c80:	f7fc fdb1 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c84:	2028      	movs	r0, #40	; 0x28
 8003c86:	f7fc fdca 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8003c8a:	bf00      	nop
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40020000 	.word	0x40020000
 8003c9c:	40020400 	.word	0x40020400
 8003ca0:	10210000 	.word	0x10210000
 8003ca4:	40020800 	.word	0x40020800
 8003ca8:	10110000 	.word	0x10110000

08003cac <set_RGB>:

/* USER CODE BEGIN 4 */
void set_RGB(int red, int green, int blue)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
	MX_TIM4_Init(red);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fe2d 	bl	8003918 <MX_TIM4_Init>
	MX_TIM3_Init(green);
 8003cbe:	68b8      	ldr	r0, [r7, #8]
 8003cc0:	f7ff fdcc 	bl	800385c <MX_TIM3_Init>
	MX_TIM8_Init(blue);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fe85 	bl	80039d4 <MX_TIM8_Init>
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <HAL_MspInit+0x4c>)
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_MspInit+0x4c>)
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_MspInit+0x4c>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_MspInit+0x4c>)
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_MspInit+0x4c>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_MspInit+0x4c>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d1e:	2007      	movs	r0, #7
 8003d20:	f7fc fd56 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_I2C_MspInit+0x84>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d12c      	bne.n	8003dac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_I2C_MspInit+0x88>)
 8003d58:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_I2C_MspInit+0x88>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	6313      	str	r3, [r2, #48]	; 0x30
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_I2C_MspInit+0x88>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d74:	2312      	movs	r3, #18
 8003d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d80:	2304      	movs	r3, #4
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	4619      	mov	r1, r3
 8003d8a:	480c      	ldr	r0, [pc, #48]	; (8003dbc <HAL_I2C_MspInit+0x8c>)
 8003d8c:	f7fc fd62 	bl	8000854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <HAL_I2C_MspInit+0x88>)
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_I2C_MspInit+0x88>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_I2C_MspInit+0x88>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003dac:	bf00      	nop
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40005400 	.word	0x40005400
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020400 	.word	0x40020400

08003dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a08      	ldr	r2, [pc, #32]	; (8003df0 <HAL_RTC_MspInit+0x30>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10a      	bne.n	8003de8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RTC_MspInit+0x34>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2100      	movs	r1, #0
 8003ddc:	2029      	movs	r0, #41	; 0x29
 8003dde:	f7fc fd02 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003de2:	2029      	movs	r0, #41	; 0x29
 8003de4:	f7fc fd1b 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40002800 	.word	0x40002800
 8003df4:	42470e3c 	.word	0x42470e3c

08003df8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e08:	d10e      	bne.n	8003e28 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e10:	4b26      	ldr	r3, [pc, #152]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e26:	e03a      	b.n	8003e9e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <HAL_TIM_PWM_MspInit+0xb8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10e      	bne.n	8003e50 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
}
 8003e4e:	e026      	b.n	8003e9e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <HAL_TIM_PWM_MspInit+0xbc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10e      	bne.n	8003e78 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e60:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	e012      	b.n	8003e9e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <HAL_TIM_PWM_MspInit+0xc0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10d      	bne.n	8003e9e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	4a09      	ldr	r2, [pc, #36]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	6453      	str	r3, [r2, #68]	; 0x44
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_TIM_PWM_MspInit+0xb4>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40010400 	.word	0x40010400

08003ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	; 0x30
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d11f      	bne.n	8003f1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	4a46      	ldr	r2, [pc, #280]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003ee4:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	6313      	str	r3, [r2, #48]	; 0x30
 8003eee:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f00:	2302      	movs	r3, #2
 8003f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f10:	f107 031c 	add.w	r3, r7, #28
 8003f14:	4619      	mov	r1, r3
 8003f16:	483a      	ldr	r0, [pc, #232]	; (8004000 <HAL_TIM_MspPostInit+0x144>)
 8003f18:	f7fc fc9c 	bl	8000854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003f1c:	e06a      	b.n	8003ff4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a38      	ldr	r2, [pc, #224]	; (8004004 <HAL_TIM_MspPostInit+0x148>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d11e      	bne.n	8003f66 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003f2e:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6313      	str	r3, [r2, #48]	; 0x30
 8003f38:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f54:	2302      	movs	r3, #2
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	482a      	ldr	r0, [pc, #168]	; (8004008 <HAL_TIM_MspPostInit+0x14c>)
 8003f60:	f7fc fc78 	bl	8000854 <HAL_GPIO_Init>
}
 8003f64:	e046      	b.n	8003ff4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a28      	ldr	r2, [pc, #160]	; (800400c <HAL_TIM_MspPostInit+0x150>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d11e      	bne.n	8003fae <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003f76:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4816      	ldr	r0, [pc, #88]	; (8004000 <HAL_TIM_MspPostInit+0x144>)
 8003fa8:	f7fc fc54 	bl	8000854 <HAL_GPIO_Init>
}
 8003fac:	e022      	b.n	8003ff4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_TIM_MspPostInit+0x154>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d11d      	bne.n	8003ff4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	4a0f      	ldr	r2, [pc, #60]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f043 0304 	orr.w	r3, r3, #4
 8003fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <HAL_TIM_MspPostInit+0x140>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe8:	f107 031c 	add.w	r3, r7, #28
 8003fec:	4619      	mov	r1, r3
 8003fee:	4809      	ldr	r0, [pc, #36]	; (8004014 <HAL_TIM_MspPostInit+0x158>)
 8003ff0:	f7fc fc30 	bl	8000854 <HAL_GPIO_Init>
}
 8003ff4:	bf00      	nop
 8003ff6:	3730      	adds	r7, #48	; 0x30
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40020400 	.word	0x40020400
 8004004:	40000400 	.word	0x40000400
 8004008:	40020000 	.word	0x40020000
 800400c:	40000800 	.word	0x40000800
 8004010:	40010400 	.word	0x40010400
 8004014:	40020800 	.word	0x40020800

08004018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <HAL_UART_MspInit+0x84>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d12b      	bne.n	8004092 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <HAL_UART_MspInit+0x88>)
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_UART_MspInit+0x88>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_UART_MspInit+0x88>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4a11      	ldr	r2, [pc, #68]	; (80040a0 <HAL_UART_MspInit+0x88>)
 800405c:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_UART_MspInit+0x88>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_UART_MspInit+0x88>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004072:	230c      	movs	r3, #12
 8004074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800407a:	2301      	movs	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004082:	2307      	movs	r3, #7
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	4805      	ldr	r0, [pc, #20]	; (80040a4 <HAL_UART_MspInit+0x8c>)
 800408e:	f7fc fbe1 	bl	8000854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004092:	bf00      	nop
 8004094:	3728      	adds	r7, #40	; 0x28
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40004400 	.word	0x40004400
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40020000 	.word	0x40020000

080040a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ba:	e7fe      	b.n	80040ba <HardFault_Handler+0x4>

080040bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c0:	e7fe      	b.n	80040c0 <MemManage_Handler+0x4>

080040c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040c6:	e7fe      	b.n	80040c6 <BusFault_Handler+0x4>

080040c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <UsageFault_Handler+0x4>

080040ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040fc:	f7fc fa5c 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}

08004104 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  // TODO what happens when button is pushed?

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004108:	2002      	movs	r0, #2
 800410a:	f7fc fd4f 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */


  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <EXTI9_5_IRQHandler+0x20>)
 800411a:	695b      	ldr	r3, [r3, #20]
	  //TODO what happens when the rotary encoder is turned and pulls potential of this pin to ground?
	  //TODO check for set flag in main (polling) and call menu function if flag is set
  }

  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <EXTI9_5_IRQHandler+0x20>)
 800411e:	695b      	ldr	r3, [r3, #20]
	  //TODO what happens when the rotary encoder is turned and pulls potential of this pin to ground?
	  //TODO check for set flag in main (polling) and call menu function if flag is set
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);		// Clear interrupt flag
 8004120:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004124:	f7fc fd42 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);		// Clear interrupt flag
 8004128:	f44f 7000 	mov.w	r0, #512	; 0x200
 800412c:	f7fc fd3e 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40013c00 	.word	0x40013c00

08004138 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800413c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004140:	f7fc fd34 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}

08004148 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800414c:	4802      	ldr	r0, [pc, #8]	; (8004158 <RTC_Alarm_IRQHandler+0x10>)
 800414e:	f7fe f9d3 	bl	80024f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000014c 	.word	0x2000014c

0800415c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <SystemInit+0x60>)
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <SystemInit+0x60>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800416c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004170:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <SystemInit+0x64>)
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <SystemInit+0x64>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <SystemInit+0x64>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <SystemInit+0x64>)
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <SystemInit+0x64>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800418c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <SystemInit+0x64>)
 8004194:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <SystemInit+0x68>)
 8004196:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004198:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <SystemInit+0x64>)
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <SystemInit+0x64>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <SystemInit+0x64>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041aa:	4b04      	ldr	r3, [pc, #16]	; (80041bc <SystemInit+0x60>)
 80041ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041b0:	609a      	str	r2, [r3, #8]
#endif
}
 80041b2:	bf00      	nop
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000ed00 	.word	0xe000ed00
 80041c0:	40023800 	.word	0x40023800
 80041c4:	24003010 	.word	0x24003010

080041c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041ce:	e003      	b.n	80041d8 <LoopCopyDataInit>

080041d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041d6:	3104      	adds	r1, #4

080041d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041d8:	480b      	ldr	r0, [pc, #44]	; (8004208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041e0:	d3f6      	bcc.n	80041d0 <CopyDataInit>
  ldr  r2, =_sbss
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041e4:	e002      	b.n	80041ec <LoopFillZerobss>

080041e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041e8:	f842 3b04 	str.w	r3, [r2], #4

080041ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041f0:	d3f9      	bcc.n	80041e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041f2:	f7ff ffb3 	bl	800415c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041f6:	f000 f811 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041fa:	f7ff f927 	bl	800344c <main>
  bx  lr    
 80041fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004204:	080042b4 	.word	0x080042b4
  ldr  r0, =_sdata
 8004208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800420c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004210:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004214:	20000210 	.word	0x20000210

08004218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004218:	e7fe      	b.n	8004218 <ADC_IRQHandler>
	...

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4e0d      	ldr	r6, [pc, #52]	; (8004254 <__libc_init_array+0x38>)
 8004220:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004222:	1ba4      	subs	r4, r4, r6
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	2500      	movs	r5, #0
 8004228:	42a5      	cmp	r5, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	4e0b      	ldr	r6, [pc, #44]	; (800425c <__libc_init_array+0x40>)
 800422e:	4c0c      	ldr	r4, [pc, #48]	; (8004260 <__libc_init_array+0x44>)
 8004230:	f000 f820 	bl	8004274 <_init>
 8004234:	1ba4      	subs	r4, r4, r6
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	2500      	movs	r5, #0
 800423a:	42a5      	cmp	r5, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004244:	4798      	blx	r3
 8004246:	3501      	adds	r5, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800424e:	4798      	blx	r3
 8004250:	3501      	adds	r5, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	080042ac 	.word	0x080042ac
 8004258:	080042ac 	.word	0x080042ac
 800425c:	080042ac 	.word	0x080042ac
 8004260:	080042b0 	.word	0x080042b0

08004264 <memset>:
 8004264:	4402      	add	r2, r0
 8004266:	4603      	mov	r3, r0
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	f803 1b01 	strb.w	r1, [r3], #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <_init>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr

08004280 <_fini>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr
